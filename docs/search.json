[{"path":"https://jmw86069.github.io/jamba/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 James M. Ward Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_12mar2025","dir":"","previous_headings":"","what":"12mar2025","title":"TODO for jamba","text":"DONE. Fix notice Dr. Brian Ripley regarding package checks.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_05mar2025","dir":"","previous_headings":"","what":"05mar2025","title":"TODO for jamba","text":"modify globalenv() Capitalize app names, add tick mark quotes around apps APIs, e.g. ‘Excel’, ‘Rmarkdown’.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_01mar2025","dir":"","previous_headings":"","what":"01mar2025","title":"TODO for jamba","text":"DONE. Fix missing \\value() make_html_styles(), provigrep(). DONE. Confirm verbose=FALSE default. DONE. Confirm bare printDebug() without using (verbose){} DONE. Change use withr equivalent functions par(), options(), .exit(). Consider using cli new dependency drop-print() inside printDebug() functions. DONE. Remove/Confirm \\dontrun{} Examples: writeOpenxlsx(), applyXlsxConditionalFormat(), applyXlsxCategoricalFormat(), set_xlsx_colwidths(), set_xlsx_rowheights(), readOpenxlsx(), setPrompt().","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_13feb2025","dir":"","previous_headings":"","what":"13feb2025","title":"TODO for jamba","text":"asSize() call object.size() first input object already numeric.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_27jan2025","dir":"","previous_headings":"","what":"27jan2025","title":"TODO for jamba","text":"readOpenxlsx() Fix rows,cols arguments subset rows columns imported. Handle multi-row headers formally: Consider method define specific header rows, instead hoping detected correctly. Define multi-row header delimiter, default \"_\". Fix/Improve handling multi-row headers via check_header=TRUE. Currently doesn’t work intended. “default”: multiple rows “header”, delimit row value new column header. “extend”: , except leading fields NA, use recent non-NA value header, thus “extending” header field next column. example grouped columns, group name present first row,column group.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_11dec2024","dir":"","previous_headings":"","what":"11dec2024","title":"TODO for jamba","text":"writeOpenxlsx() Consider startRow,startCol (startColumn) define begin saving worksheet data. Related, consider optional multi-row headers. Bonus points: merge cells consecutive repeated headings, (probably) lowest/last header row. One revamp rainbowJam() improve default colors. much pink, much “beige”, colors love. Design idea take named_colors, arrayed rank order hue (degrees) literally reassign color hue popularity named colors. People don’t name nearly many greens name red-orange-yellow, partly green hues easily resolved detail. (green nearly 1/3 color wheel!) RGB wheel: color_pie(jamba::hsv2col(rbind(h=seq(0, =1, =0.01), s=1, v=1))) Update named_colors","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_09dec2024","dir":"","previous_headings":"","what":"09dec2024","title":"TODO for jamba","text":"setTextContrastColor() - consider option jam.hclCutoff jam.L_threshold control breaking point light/dark text. hcl2col() - fix alpha argument input, currently ignored. shadowText() Apply arguments vectorized form: pos,adj kable_coloring() Consider option hide borders (top/bottom/left/right). Consider optional text_color_sub control text color, support venndir::textvenn() output labels use fill color, labels use font color.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_24nov2024","dir":"","previous_headings":"","what":"24nov2024","title":"TODO for jamba","text":"Fix error cPaste() S4Vectors installed.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_01nov2024","dir":"","previous_headings":"","what":"01nov2024","title":"TODO for jamba","text":"jargs() - consider word-wrapping numerous items, see: jargs(multienrichjam::fixSetLabels, \"words\").","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_07oct2024","dir":"","previous_headings":"","what":"07oct2024","title":"TODO for jamba","text":"Consider support Matrix sparse matrix objects, CsparseMatrix specifically rowGroupMeans() causes errors jamma","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_13sep2024","dir":"","previous_headings":"","what":"13sep2024","title":"TODO for jamba","text":"DONE. kable_coloring() Fix bug HTML tables show HTML tags escapes, something format=\"html\" included default.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_04sep2024","dir":"","previous_headings":"","what":"04sep2024","title":"TODO for jamba","text":"plotRidges() - make work one column. plotPolygonDensity() - make reset par(\"mfrow\") plotting.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_13aug204","dir":"","previous_headings":"","what":"13aug204","title":"TODO for jamba","text":"reload_rmarkdown_cache() path accept base RMarkdown cache find proper subdirectory: \"./html\" relevant subdirectory names. Currently stops : \".rdata files found directory.\" Use options package handle Jam-related package options See: https://github.com/dgkf/options options::define_option() Manages options, default values, ect. Also creates documentation jamba::options options, defaults, descriptions. Low overhead dependencies, imports utils. Add stub: Current options: shadowText(): jam.shadow, jam.shadow.r, jam.shadow.n, jam.shadowColor, jam.alphaShadow, jam.outline, jam.alphaOutline printDebug(): jam.fgDefault, jam.fgTime, jam.timeStamp, jam.comment, jam.htmlOut, jam.formatNumbers, jam.trim, jam.digits, jam.nsmall, jam.big.mark, jam.small.mark jam.doColor, jam.sep, jam.file, jam.append, jam.invert color-related: jam.lightMode, jam.Crange, jam.Lrange, jam.Cgrey, jam.adjustRgb, jam.model (hcl, polarLUV, polarLAB) jam.stopClasses","code":"#' @eval options::as_roxygen_docs() NULL"},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_31jul2024","dir":"","previous_headings":"","what":"31jul2024","title":"TODO for jamba","text":"tcount() Pass ... table(x), using table(x, ...) instead. change allow things like useNA=\"ifany\", custom exclude. Require input x atomic .atomic(x) prevent weirdness list data.frame input. Consider handle table(x, y) table(data.frame)","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_09jul2024","dir":"","previous_headings":"","what":"09jul2024","title":"TODO for jamba","text":"Consider rsdim() scalable extension sdim() ssdim() Goal permit sdim() logic deeper nested objects two levels. Consider sdim() new argument indent, help print nested sdim(). Consider new function: remakeNames() Alternate makeNames() removes version suffix, reapplies new suffix. Optional recursive=TRUE trim multiple suffix versions, example c(\"A_v1\", \"A_v1_v1\", \"A_v1_v2\") eventually become c(\"\", \"\", \"\"). Motivation prevent entries version-versioned, c(\"\", \"A_v1\", \"A_v1\") become c(\"\", \"A_v1_v1\", \"A_v1_v2\"). preferred option may consider input c(\"\", \"\", \"\"), version values create: c(\"A_v1\", \"A_v2\", \"A_v3\"). motivation avoid “fix problems” within makeNames() potentially create duplicates: makeNames(c(\"\", \"\", \"A_v1\")) output c(\"A_v1\", \"A_v2\", \"A_v1\"), see . Consider new function: unmakeNames() purpose remove previous version suffix created makeNames(). makeNames() Resolve potential bug versioned name repeats pre-existing value, example makeNames(c(\"\", \"\", \"A_v1\")) create two entries \"NA_v1\". Three potential methods: “Reset versions”: Basically, entry previously versioned, causing newly versioned entries fail, un-versioned, re-versioned succeed. Added benefit versions order appear output. process iterative: duplicated values trigger unmakeNames() remove version suffix. values un-versioned value (use input vector rather actually un-versioning) re-versioned together set. step inadvertently create new duplicates, causing process occur , . eventually stop, given finite input set. makeNames(c(\"\", \"\", \"A_v1\")) change \"A_v1\" entry \"\", output becomes c(\"A_v1\", \"A_v2\", \"A_v3\"). option unfortunately changes entries, can confusing. example, entry originally \"A_v1\" final entry called \"A_v1\". “Append versions”: Basically duplicates makeNames(), calls makeNames() iteratively entries unique. option unfortunately appends multiple suffix versions. one benefit data might traceable. suffices \"_v1_v1\" \"_v1_v2\" suggests entries previously \"_v1\". slight risk getting stuck iterative loop, input data already multiple layers versioning. Example: makeNames(c(\"\", \"\", \"A_v1\")) produces c(\"A_v1\", \"A_v2\", \"A_v1\"), c(\"A_v1_v1\", \"A_v2\", \"A_v1_v2\"). “Keep existing versions”: complicated logic. Keep existing versions -, increment next available un-used version number. input data already versioned, keep -without change, unless duplicates among versioned values, case handle usual. Previously unversioned values become duplicates skip version number. example makeNames(c(\"\", \"\", \"A_v2\")) produce c(\"A_v1\", \"A_v3\", \"A_v2\"). algorithm: Check duplicates versioning. none, end. duplicates, definition must one input, one created versioning. Keep entry already existed, re-assign one. two c(\"A_v2\", \"A_v2\") input entries, versioned already create c(\"A_v2_v1\", \"A_v2_v2\"). desired output multiple \"\" entries skip \"_v2\" version \"A_v2\" already exists, continue \"_v3\" . tricky part multiple versions assigned. 15 duplicates \"\" \"A_v7\" \"A_v11\" already assigned, method know create 15 + 2 suffix values, since 15 duplicated entries, 2 existing entries. remove \"_v7\" \"_v11\" already exist. assigns remaining values order.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_20jun2024","dir":"","previous_headings":"","what":"20jun2024","title":"TODO for jamba","text":"setPrompt() consider option include date /date-time stamp. Similar bash prompt style. Current default: {project-name}-R-4.2.3_processid> Suggested date option 1: {project-name}-{20jun2024}-R-4.2.3_processid> Suggested datetime option 1: {project-name}-{20jun2024}-R-4.2.3_processid> Side notes available date string options POSIXct, POSIXt: %c uses full time date: \"Sun Jun  9 01:45:53 2024\" %H hour 24H scale leading zero %hour 12H scale leading zero %p indicates \"\" \"PM\" (representation /PM?) %M minute leading zero %S second leading zero %T equivalent \"%H:%M:%S\" %t replaced tab getDate() Consider allowing dateFormat jam option: options(\"jam.dateFormat\"). Bonus point asDate() can recognize variety common formats.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_04jun2024","dir":"","previous_headings":"","what":"04jun2024","title":"TODO for jamba","text":"DONE. heatmap_column_order(), heatmap_row_order() Error seen HeatmapList (drawing list heatmaps) multiple annotation heatmaps preceding “main” heatmap. preceding heatmaps row column order, causes fail. solution use first entry class Heatmap HeatmapList hm@ht_list. Also add new argument select specific heatmap. DONE. mixedSortDF() Fix handling \"mtime\", \"POSIXct\", \"POSIXt\", \"Date\" classes converted data.frame. sdim() ssdim() input array contains list data, returns lengths() list elements, return dimensions enclosing array. Prepare urgently CRAN Bioconductor submission.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_27may2024","dir":"","previous_headings":"","what":"27may2024","title":"TODO for jamba","text":"heatmap_column_group_labels() Fix bug one column_split values, enable drawing box around entire heatmap, without group lines group labels. Error: \"Viewport 'expression_heatmap_body_1_7' found\"","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_22mar2024","dir":"","previous_headings":"","what":"22mar2024","title":"TODO for jamba","text":"DONE. writeOpenxlsx(), applyXlsxCategoricalFormat() appears applying categorical colors incorrect columns, sync. setPrompt() enable color run inside RMarkdown.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_24jan2024","dir":"","previous_headings":"","what":"24jan2024","title":"TODO for jamba","text":"reload_rmarkdown_cache() Accept cache directory even subdirectory \"project_cache/html/\". also accept \"project_cache\", detect presence subdirectory \"html\". Question: potential subdirectory names subdirectory based upon RMarkdown output format? See https://bookdown.org/yihui/rmarkdown-cookbook/cache-path.html, yes: \"html\", \"latex\", \"docx\". kable_coloring() Consider options similar writeOpenxlsx(): highlightColumns, pvalueColumns, fcColumns, lfcColumns, numColumns, intColumns, order interest. highlighting easy useful.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_10jan2024","dir":"","previous_headings":"","what":"10jan2024","title":"TODO for jamba","text":"heatmap_column_order() Current: HeatmapList supplied multiple heatmaps, default returns column order first heatmap. Future: give option return column order individual heatmaps, across heatmaps.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_17nov2023","dir":"","previous_headings":"","what":"17nov2023","title":"TODO for jamba","text":"writeOpenxlsx() Consider adding optional multi-row headers Consider adding ability save table existing workbook starting certain row,column position. feature also used enable multi-row headers, multi-column row annotations, example saving SummarizedExperiment matrix object contains rownames, separate row annotations.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_24oct2023","dir":"","previous_headings":"","what":"24oct2023","title":"TODO for jamba","text":"DONE. printDebug() DONE. debug issue htmlOut=TRUE inserts multiple newlines <br/> DONE. add convenience function: printDebugHtml() use RMarkdown, enables htmlOut=TRUE comment=FALSE default.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_03oct2023","dir":"","previous_headings":"","what":"03oct2023","title":"TODO for jamba","text":"DELAYED: consider migrating printDebug() use cli::cli_alert_info() Downside: print HTML output inside RMarkdown, instead falls back uncolorized output. Oh well, color primary motivation. also use fancy bullets HTML, another cool feature lost. useful employ pattern time/date stamp, color-coding potential benefit output use R recommended methods E.g. messaging, warnings, errors, etc. Added features: inline markup; bullets; icons; word wrap; Therefore output silenced using standard approaches. offers improved formatting: bullets, icons, emojis, etc. (HTML output.) unclear colorization readily configurable, better use cli patterns print message:","code":"save_file <- \"output_file.txt\"; cli::cli_alert_info(\"Saved to: '{.field {save_file}}'.\") cli::cli_alert(\"Saved to: '{.field {save_file}}'.\") {options(\"warn\"=FALSE) cli::cli_alert_warning(\"Saved to: '{.field {save_file}}'.\")} cli::cli_alert_success(\"Saved to: '{.field {save_file}}'.\")"},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_28sep2023","dir":"","previous_headings":"","what":"28sep2023","title":"TODO for jamba","text":"writeOpenxlsx() consider adding pctColumns,pctRule,pctColors percentage values Consider updates startRow 1, write data existing workbook sheet? Driving use case organize multiple small data.frame worksheet. might therefore need header row?","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_27aug2023","dir":"","previous_headings":"","what":"27aug2023","title":"TODO for jamba","text":"setPrompt() Debug prompt defined color called inside RMarkdown.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_22aug2023","dir":"","previous_headings":"","what":"22aug2023","title":"TODO for jamba","text":"sdim() Consider option print object size beside row. option incur performance hit, useful understanding object components consume memory. Data general getting larger, helpful trimming unnecessary duplication data object list context example. Consider way indicate object S4, means names slotNames() just names(). Unclear work ssdim() multiple data.frame results intended stackable columns, require colnames(). Find somewhere indicate whether slotNames() names() shown. Add methods recognize names(x). Find simple test cases can test S3 S4 objects.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_17aug2023","dir":"","previous_headings":"","what":"17aug2023","title":"TODO for jamba","text":"printDebug() DONE. argument comment take optional character string use prefix. consider calling cli::format_message tidyverse-compliant R messages warnings.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_10aug2023","dir":"","previous_headings":"","what":"10aug2023","title":"TODO for jamba","text":"DONE. applyXlsxCategoricalFormat() writeOpenxlsx() DONE. argument colorSub accept list input, similar kable_coloring(). list named colnames(x) accepts either named character vector colors names match values column, function takes column values returns character vector colors value column.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_08aug2023","dir":"","previous_headings":"","what":"08aug2023","title":"TODO for jamba","text":"makeColorDarker() consider new argument dex “darkness expansion factor” similar use color2gradient() consider new argument satex “saturation expansion factor”","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_11jul2023","dir":"","previous_headings":"","what":"11jul2023","title":"TODO for jamba","text":"DONE: grepls() properly applying regular expressions search package functions, example library(multienrichjam);jamba::grepls(\"^enrich\") returns results, jamba::grepls(\"enrich\") return results. DONE: migrate multienrichjam::gsubs() jamba. Minor: Deprecate gsubs() multienrichjam, calls jamba::gsubs() jamba sufficient version.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_05jul2023","dir":"","previous_headings":"","what":"05jul2023","title":"TODO for jamba","text":"DONE: plotSmoothScatter() asp defined, honor setting also defining axis ranges appropriately, cropping points outside range axis range increased accommodate aspect ratio. One workaround use nullPlot(asp=asp, doBoxes=FALSE), use par(\"usr\") define actual xlim, ylim values, plotSmoothScatter(..., add=TRUE) inherit options. drawLabels() enhance labels allow adj define text justification, example text can left-aligned, right-aligned, centered. Currently text centered, defining midpoint label , using adj=c(0.5, 0.5). cases nice left-aligned text. change, text width calculated, x coordinate moved left side box, buffer equal half difference box width text width.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_12jun2023","dir":"","previous_headings":"","what":"12jun2023","title":"TODO for jamba","text":"printDebug(), printDebugI() Atomic elements empty names (NA, \"\", \"^[\\t ]+$\") (whitespace) printed using element value name. Currently, names printed exist, attention given whether names empty. Unclear whether expected/correct behavior print values, mixture non-empty-names/values-instead--empty-names. now, go second option, printing names non-empty, element values otherwise. Consider argument names_and_values=TRUE optionally display names values used print(). case, names printed inverted (empty, name visible), values printed using color inverted. RMarkdown use colorized text output: printDebug(), printDebugI(). Investigate pkgdown::build_article() able produce RMarkdown/HTML output includes colored text printDebug(), knitr::render_markdown() captures color using block option results='asis'. Default yaml options include: pkgdown: as_is: true, maybe preferred keep results='asis'?","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_23mar2023","dir":"","previous_headings":"","what":"23mar2023","title":"TODO for jamba","text":"kable_coloring() DONE. Enable passing sample_color_list colorize columns DONE. Allow coloring numeric columns, perhaps sample_color_list? Using function effective colorSub numeric values. DONE. (virtue calling platjam::design2colors().) Automate colorizing numeric columns value, example platjam::df_to_numcolors() except invisible. Maybe optional argument enabling/disabling feature, enabled default? apply color row.names displayed. (Taken 10jan2023 TODO item.) Use bold font default row names. Consider handling matrix input using color gradient colorize numeric values.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_22mar2023","dir":"","previous_headings":"","what":"22mar2023","title":"TODO for jamba","text":"imageByColors() adjustMargins=TRUE reset margins plotting. may desirable, features can added, causes problems running series plots.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_27feb2023","dir":"","previous_headings":"","what":"27feb2023","title":"TODO for jamba","text":"consider new color function: is_color_ramp() simple function performs test getColorRamp() just validate input character string possible color ramp. potential argument require character string specific named color ramp, single color converted color ramp.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_06feb2023","dir":"","previous_headings":"","what":"06feb2023","title":"TODO for jamba","text":"mixedSorts() optimization DONE: honorFactor=FALSE class \"factor\" considered \"character\", minimizing effects handling factor character data independently. Handle edge cases mixed class, nested simple list. reload_rmarkdown_cache() check subdirectory “./html/” initial reload fails. reason RMarkdown output imposes additional subdirectory “html” html output. matter, function may need check subdirectories default use first one found (without dot prefix like “.git”).","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_04feb2023","dir":"","previous_headings":"","what":"04feb2023","title":"TODO for jamba","text":"run performance profiling core functions: mixedSort() related functions cPaste() related functions","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_10jan2023","dir":"","previous_headings":"","what":"10jan2023","title":"TODO for jamba","text":"kable_coloring() Categorical colors assigned colorSub, also compatible color_list output platjam::design2colors() (soon moved colorjam). apply color row.names displayed.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_28nov2022","dir":"","previous_headings":"","what":"28nov2022","title":"TODO for jamba","text":"jargs() fails functions follow troubled paradigm generics, e.g.: Design idea: Figure way “sniff” arguments. Eval function body, look function named .local fail functions call UseMethod(\"mean\"), requires object class order search generics using form function.class1(), class1 first \"character\" value class(object). Optionally, jargs_internal() argument class object guide appropriate method based upon class class(object). Driving example: ComplexHeatmap::draw() can found names(findMethods(\"draw\")), class \"Heatmap\", \"HeatmapAnnotation\", several others. args(findMethods(\"draw\")$Heatmap) show function(object, ...) however function body defines .local function","code":"some_func <- function(object, ...){    .local <- function(object, arg1, arg2, arg3);    .local(object, ...) }"},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_14nov2022","dir":"","previous_headings":"","what":"14nov2022","title":"TODO for jamba","text":"jargs() janky functions, example arguments begin parentheses. non-standard formatting previously caused problems, examples like embedded functions appear work fine. Example works: jamses::heatmap_se() argument cluster_rows=function(x, ...){ amap::hcluster(x, ...) }. Actually, one fails insert comma internal function arguments. Sigh. Example fails: multienrichjam::layout_with_qfr() argument repulse.rad=(igraph::vcount(g)^repulse) Design idea: write test routine calls jamba::jargs() functions package, captures text output, searches argument spans multiple lines. print visual summary check potential problems.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_19oct2022","dir":"","previous_headings":"","what":"19oct2022","title":"TODO for jamba","text":"readOpenxlsx() throws error column headers align subsequent data. Insert filler column headers. Easiest workaround change default check_header=FALSE check_header=TRUE logic change, intent detect one row additional header column headers, usually seen lower ncol, however sometimes real data fewer ncol last column(s) contain empty cells.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_14oct2022","dir":"","previous_headings":"","what":"14oct2022","title":"TODO for jamba","text":"renameColumn() accept integer values indicate column indexes. driving use case matrix lacks colnames, renameColumn(x, =1:4, =letters[1:4]). Internally convert integer numeric values colnames(x) length(colnames(x)) == 0 assign colnames(x) <- seq_len(ncol(x)),, convert <- .character().","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_04oct2022","dir":"","previous_headings":"","what":"04oct2022","title":"TODO for jamba","text":"jargs() Option multiple columns, functions many arguments. Requires estimate number console columns, user-defined. jamsplom() new custom function still use often outside Jam package context, useful enough added jamba convenience. ’s useful plotPolygoDensity(), plotSmoothScatter(), plotRidges(), somewhat combined.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_27sep2022","dir":"","previous_headings":"","what":"27sep2022","title":"TODO for jamba","text":"mixedSortDF() work time class \"POSIXct\", although mixedSort() work. Coersion .numeric() suffice workaround.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_01sep2022","dir":"","previous_headings":"","what":"01sep2022","title":"TODO for jamba","text":"readOpenxlsx() add option include colnames, equivalent colNames=FALSE. option skip step loads colnames separately. debug argument rows","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_26jul2022","dir":"","previous_headings":"","what":"26jul2022","title":"TODO for jamba","text":"adjustAxisLabelMargins() operate much like par(), returning par() values changed, can changed back. option defines .exit(par(opar)) revert margin values re-defines operation.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_20jul2022","dir":"","previous_headings":"","what":"20jul2022","title":"TODO for jamba","text":"kable_coloring() chokes colorSub uses color names, just need converted hex format beforehand. cell_fun_label() arguments prefix suffix indexed list m show confusing. Consider applying prefix suffix order entry show. cPasteU() uniques() appears slow situations Apparently small length vectors <1000, lapply(x, unique) much faster BioC methods unique(CharacterList(x)) unique(FactorList(x)) extremely slow large vectors unclear whether cPaste() ever handle factor without converting character - data character upfront, may speed downstream steps. mixedSorts() handle mixed list character factor Easiest option works*: input class proceed optimization step currently used, otherwise revert lapply(x, mixedSort) markedly slower, consistent expected behavior. mixedSort() mixedSorts() inconsistent handling factor mixedSort() option honor factor order, consistent mixedSorts() mixedSorts() handle mix character factor return list classes input list. suggest new argument honorFactor=FALSE default mixedSort() keep previous behavior without affecting dependencies suggest new argument honorFactor=TRUE default mixedSorts() keep previous behavior without affecting dependencies","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_18jul2022","dir":"","previous_headings":"","what":"18jul2022","title":"TODO for jamba","text":"COMPLETE: printDebug() updates Situation: Rmarkdown, R block uses results='asis', see RMarkdown Guide#generate-multiple-tables----loop). output printDebug() configurable format, maybe global option, internal functions call printDebug() affected way without pass option child function process.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_07jul2022","dir":"","previous_headings":"","what":"07jul2022","title":"TODO for jamba","text":"rmNA() work properly data.frame matrix objects, returning object back, relevant values replaced naValue relevant.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_17jun2022","dir":"","previous_headings":"","what":"17jun2022","title":"TODO for jamba","text":"add log2fold_axis() convenience function plotSmoothScatter() argument transFactor used default, argument transformation default use transFactor.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_25may2022","dir":"","previous_headings":"","what":"25may2022","title":"TODO for jamba","text":"Check cell_fun_label: COMPLETE: possible increase speed skipping blank cells? (Yes.)","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_23may2022","dir":"","previous_headings":"","what":"23may2022","title":"TODO for jamba","text":"Allow list colors/color functions input writeOpenxlsx(). platjam::design2colors() soon migrated colorjam::design2colors() design2colors() outputs list named color vectors, numeric columns returns color function defined circlize::colorRamp2(). sure well custom color function work Excel, pre-defining cell color individual cell, seems sub-optimal. main benefit color list can matched colnames(x), applied columns known benefit color assignment. Also, colors can uniquely assigned column.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_22may2022","dir":"","previous_headings":"","what":"22may2022","title":"TODO for jamba","text":"COMPLETE: drawLabels() option force least panel width, intended mimic ggplot facet labels.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_05may2022","dir":"","previous_headings":"","what":"05may2022","title":"TODO for jamba","text":"COMPLETE. Consider new function specifically MAD outlier point filtering, instead hiding feature inside rowGroupMeans(). dumb, function rowRmMadOutliers() purpose, however function grouped, instead per row. COMPLETE. New function rowGroupRmOutliers(). Consider moving functions package currently used multiple Jam packages: update_function_params() - jamma multienrichjam update_list_elements() - jamma multienrichjam (use utils::modifyList()) find_colname() - jamma, multienrichjam","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_19apr2022","dir":"","previous_headings":"","what":"19apr2022","title":"TODO for jamba","text":"Consider steps required publish jamba CRAN. (yike!) Might need add tests every function (yike!) Might need remove non-essential functions: \"jamrandom\", \"jamitall\"? printDebug() printDebugI() changes: consider detecting “state” run inside RMarkdown, although currently seems require R block options include results='asis' enable color, also requires htmlOut=TRUE. htmlOut=TRUE de-colorize applying delimiter; also default remove comment prefix. consider moving color-related functions colorjam. hcl2col(), col2hcl(), rgb2col(), hsv2col(), col2hsv() check cross-jam-package dependencies, e.g. jamba::rgb2col() splicejam, colorjam, R scripts. writeOpenxlsx() related functions Enable startRow write data starting row 2 row 3 example. Add example syntax saving multi-sheet data file one write operation, avoiding read/write worksheet. Convert imageToColors() ComplexHeatmap::Heatmap() create variation uses ComplexHeatmap requires function label cells center contiguous range cells color label","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_02dec2021","dir":"","previous_headings":"","what":"02dec2021","title":"TODO for jamba","text":"COMPLETE: additional functions convert abbreviated size asSize()","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_29nov2021","dir":"","previous_headings":"","what":"29nov2021","title":"TODO for jamba","text":"COMPLETE: mixedSortDF() appears issues sorting data.frame columns type “integer64”. appears sort columns . COMPLETE: readOpenxlsx() throwing errors edge cases, needs debugging. COMPLETE: readOpenxlsx() detect one header lines column headers, example overall title first row rows worksheet. can detected either counting ncol() first 5 rows individually, comparing column classes row loaded individually.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_22nov2021","dir":"","previous_headings":"","what":"22nov2021","title":"TODO for jamba","text":"Consider adding version check_pkg_installed() additional constraints. idea check package installed, optionally package version least >= x.y.z, likely using utils::compareVersion(). COMPLETE: Update getColorRamp() recognize color ramps supplied colorjam package installed: jam_linear jam_divergent.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_04nov2021","dir":"","previous_headings":"","what":"04nov2021","title":"TODO for jamba","text":"mixedSortDF() currently allows applying reverse sort using colname prefix “-”. numeric columns sometimes useful sort magnitude instead absolute value. suggest new prefix “*” “~” may appear without “-”. “~-” “-~” appear prefix, data sorted decreasing absolute value. “~” appears prefix, data sorted increasing absolute value. point sort columns use non-standard evaluation, allow fancy math logic applied . yet.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_05oct2021","dir":"","previous_headings":"04nov2021","what":"05oct2021","title":"TODO for jamba","text":"Simple utility function load common set JAM packages “omics” - loads jamba, jamma, colorjam, jamsession, jamses “regions” - plus GenomicRanges “rnaseq” - plus splicejam “peaks” - “omics”, “regions”, slicejam “covhm” - “omics” platjam","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_10aug2021","dir":"","previous_headings":"04nov2021","what":"10aug2021","title":"TODO for jamba","text":"COMPLETE: writeOpenxlsx() can painfully slow somewhat large Excel sheets, roughly 20,000 rows 11 columns. slow step probably either applyXlsxConditionalFormat(), applyXlsxCategoricalFormat(). Whichever step slowest, needs become much faster. Note: Slowness resolved converting functions use Workbook instead saving/loading/updating/saving.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"id_25jul2021","dir":"","previous_headings":"04nov2021","what":"25jul2021","title":"TODO for jamba","text":"geom_shadowText() - essentially drop-replacement geom_text() except uses shadowText() logic ggplot2 context. similar package “shadowtext” Dr.Guangchuang Yu, however package offer features implemented : define transparency shadow outline define color shadow order rendering shadows label vectorized context","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"functions-to-update","dir":"","previous_headings":"04nov2021","what":"Functions to update","title":"TODO for jamba","text":"DONE: shadowText() - consider re-ordering rendering shadow text label placed next label. DONE: checkLightmode() along printDebug(), makeStyles(), setPrompt() collectively update light mode intended used inside RStudio. issue setCLranges(). Also, set, light mode easily changed intended. colorRampPaletteJam() - new function drop-replacement colorRampPalette(); alternative calls blend_colors() pair colors order create better intermediate colors gradient. Examples: red-blue produce purple intermediate; yellow-blue produce green intermediate. colorjam::blend_colors() currently purple-gold purple-yellow create green intermediate color, cases go red/brown. requires either manual correction /requires purple--yellow shortest hue angular path goes red. Consider using slightly improved red-yellow-blue color hue wheel, better delineation blue-purple-red transitions. hope color hue wheel might make purple-red-yellow preferred (shorter) angular path purple--yellow. Consider manual correction inside blend_colors() cases colors roughly 180 hue degrees different, instead leaving chance. colorjam::rainbowJam() better mechanism define preset custom color hue wheels, example \"custom\" option uses h1 h2 hue conversion already defined defined.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"vignettes-for-common-small-use-cases","dir":"","previous_headings":"04nov2021","what":"Vignettes for common small use cases","title":"TODO for jamba","text":"color manipulation creating adjusting color gradients getColorRamp() showColors() creating categorical colors, using make gradients colorjam::rainbowJam() log-transformation, sqrt-transformation plotting appropriate axes log2signed(), exp2signed() minorLogTicksAxis(), sqrtAxis() log-transformed P-values","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"usability","dir":"","previous_headings":"04nov2021","what":"Usability","title":"TODO for jamba","text":"FIXED: plotSmoothScatter() ignores xlab ylab. plotSmoothScatter() using bandwidthN confusing, overrides bwpi. getColorRamp() value defaultBaseColor=\"grey95\" annoying , change \"grey98\" \"grey99\"","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"new-functions","dir":"","previous_headings":"04nov2021","what":"new functions","title":"TODO for jamba","text":"splomSmooth() -versus-scatter plot matrix using equivalent logic used plotSmoothScatter(), using lattice::splom(). much efficient equivalent base ggplot2 plot methods. add option “hide” combinations panels, combinations relevant appropriate visualization. option specify specific color gradient cell, opposed combining categorical color input column. make options bandwidth visual bins intuitive","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"bugs-28aug2020","dir":"","previous_headings":"04nov2021","what":"Bugs 28aug2020","title":"TODO for jamba","text":"FIXED: printDebug() throws warning fixYellow: Warning message: (fixYellow) { : condition length > 1 first element used","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"bugs-29jul2020","dir":"","previous_headings":"04nov2021","what":"Bugs 29jul2020","title":"TODO for jamba","text":"writeOpenxlsx() highlightColumns appears prevent conditional formatting columns. provigrep() checks names assigns missing, correct duplicate names already present.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"enhancements-29jul2020","dir":"","previous_headings":"04nov2021","what":"enhancements 29jul2020","title":"TODO for jamba","text":"tcount2() - wrapper tcount(..., minCount=2)","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"migrate-functions-from-other-packages","dir":"","previous_headings":"04nov2021","what":"migrate functions from other packages","title":"TODO for jamba","text":"find_colname() deconcat_df()","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"enhance-writeopenxlsx-08may2020","dir":"","previous_headings":"04nov2021","what":"Enhance writeOpenxlsx() 08may2020","title":"TODO for jamba","text":"writeOpenxlsx() option supply header displayed top row Excel worksheet, style. example header may title “Data following normalization limma analysis” dark blue background, white text, font size 18.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"nice-to-have","dir":"","previous_headings":"04nov2021 > Enhance writeOpenxlsx() 08may2020","what":"Nice to have","title":"TODO for jamba","text":"applyXlsxConditionalFormat() theory color text setTextContrastColor() use white text dark background colors. sure Excel allows , requires manually setting color cell. writeOpenxlsx() option apply conditional formatting numeric columns using column numeric range, fixed range. option supply list rules numRule. Design idea: numRule=NULL numRule=NA create rule based upon numeric range (min, mean, max). Also, numRule can list, example numRule=list(c(0,100,1000), NA, c(0,1,2)). rule apply c(0,100,1000) first column numColumns, apply NA second column (thus auto-scaled), apply c(0,1,2) third column.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"optimizations-29apr2020","dir":"","previous_headings":"04nov2021","what":"Optimizations 29apr2020","title":"TODO for jamba","text":"FIXED: cPaste() fully efficient input require going steps unlist() split(). cases data left CharacterList possible, use S4Vectors::unstrsplit() directly. Conditions require unlist() split(): na.rm=TRUE presence NA values doSort=TRUE list element multiple values","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"bug-02oct2019","dir":"","previous_headings":"04nov2021","what":"Bug 02oct2019","title":"TODO for jamba","text":"plotSmoothScatter() throws error \".numeric(xlim) TRUE\" plotting data class \"difftime\".","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"general-enhancements","dir":"","previous_headings":"04nov2021","what":"General enhancements","title":"TODO for jamba","text":"Add message package install suggesting “crayon” package installed already installed. Investigate interplay Mac/Linux TERM, locale LC_ALL, special characters like  (theta), R help docs.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"bug-fixes--enhancements-to-existing-functions","dir":"","previous_headings":"04nov2021","what":"Bug fixes / Enhancements to existing functions","title":"TODO for jamba","text":"printDebug() probably needs specific delimiter lists. Currently collapse accepted via ... separates every entry.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"new-plotsmoothscatterg-with-grouped-colors","dir":"","previous_headings":"04nov2021","what":"new plotSmoothScatterG with grouped colors","title":"TODO for jamba","text":"plotSmoothScatterG() new function create smooth scatter plot like plotSmoothScatter() except also allow coloring points group. previous closest estimate ability overlay contours different colors, however transparency layer effective, last color layer drawn becomes dominant color. function essentially creates layer color, blends one collective layer. layer probably weight applied layer colors, order avoid blending paleness become dominant. point color determined weighted color blend, intensity color gradient starting background color determined sum weights, relative rest plot. Required secondary functions: Weighted color blending function. Must blend yellow blue make green, grey (requirement). See \"jonclayden/shades\", colorspace::mixcolor() though works 2 colors. Weighted gradient color assignment, given color, weight 0 1, returns single color representing color position along gradient background foreground color. Commentary: one color space blend red + yellow = orange blue + yellow = green? Maybe polarLUV. Others either blend blue + yellow grey purple … makes zero sense (). printDebug() option HTML Rmarkdown-friendly output. Note feature seems work producing HTML output Rmarkdown. jargs() choking certain argument formats: argument prefixed function, :: spaces . f <- function(x=jamba::colorjam){10};jargs(f); doesn’t happen function parentheses: f <- function(x=jamba::colorjam()){10};jargs(f); another case empty argument displayed actual argument existed function. can’t remember exact conditions, placeholder now.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"testthat","dir":"","previous_headings":"04nov2021","what":"testthat","title":"TODO for jamba","text":"Functions jamba various options tested using package testthat help maintain consistent performance future package R builds. jargs() can tested several example custom functions make sure produces output desired. mixedSort(), mixedSortDF(), mixedOrder(), mixedSorts() needs several tests confirm consistent outputs various custom conditions.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"jam-global-re-usable-options","dir":"","previous_headings":"04nov2021","what":"jam global re-usable options","title":"TODO for jamba","text":"goal make easier set certain function parameters global option, make efficient parameters used several functions. Per Hadley Wickham’s recommendation, options restricted non-analytical parameters, order maintain clear reproducible analysis workflows. , analysis parameter defined clearly function called, never use value global option. fact, options change visual output may preferred global options, since help support specific output hard-coded R script. general, visual themes may good candidates parameters.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"nomenclature-for-jam-package-options","dir":"","previous_headings":"04nov2021 > jam global re-usable options","what":"Nomenclature for jam package options","title":"TODO for jamba","text":"Jam package options named prefix “jam.” followed name function argument. example function parameter “adjustRgb” become “jam.adjustRgb”.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"parameters-proposed-to-become-jam-options","dir":"","previous_headings":"04nov2021 > jam global re-usable options","what":"Parameters proposed to become jam options","title":"TODO for jamba","text":"jam.adjustRgb, used colsHead() printDebug() displaying colored text R console. value applies slight adjustment crayon package rgb--ansi conversion correct limitation 256-color ANSI 6 channels brightness red,green,blue, 8 typical VGA-style 256-color palettes. effect 6 channel color ranges rgb conversion results fractional values rounded , making many colors less saturated (less colorful), nature works core goal adding color. jam.lightMode, used colsHead() printDebug() restrict range dark light colors displayed R console, based upon whether background colors light (high luminance, lightMode=TRUE), dark (low luminance, lightMode=FALSE.) Normally, lightMode specifically defined, functions try detect whether running inside Rstudio, assumes Rstudio using default white background, sets lightMode=TRUE.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"rbindlist","dir":"","previous_headings":"04nov2021","what":"rbindList","title":"TODO for jamba","text":"optional recursive operation, event nested list data.frames, recurse list, calling rbindList() list element progressive build one resulting data.frame matrix. optional ability handle different colnames; alternative review data.table::rbindlist() potential replacement.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"imagebycolors","dir":"","previous_headings":"04nov2021","what":"imageByColors","title":"TODO for jamba","text":"new argument cellnoteColor define specific cellnote text color, currently uses setTextContrastColor() able define custom colors. (Setup print colorized text data.frame using similar input.) optional boolean parameter transpose image, .e. t(x) applicable t(cellnote). optionally draw boxes around grouped labels, visual indicator groups cells sharing one label. Care taken enable functionality large table containing grouped labels, even scenario resulting “many boxes”.","code":""},{"path":"https://jmw86069.github.io/jamba/TODO.html","id":"color-brightness-and-saturation-handling","dir":"","previous_headings":"04nov2021","what":"color brightness and saturation handling","title":"TODO for jamba","text":"helper functions like darken(), lighten(), saturate(), desaturate(). Note colorspace::desaturate() completely removes color saturation (chroma), conflicts function naming scheme. Maybe: jam_desaturate(), jam_darken(), jam_brighten(), jam_saturate(). new function subsetColors() internally creates data.frame hex, RGB, HSV, HCL values, can used subset input set colors. Bonus points accepting different color classes input, returning color class output.","code":""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"jamba-overview","dir":"Articles","previous_headings":"","what":"Jamba Overview","title":"Jamba Overview","text":"Jamba intended contain JAM base functions, re-used analysis, R packages. Functions broadly divided categories.","code":""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"efficient-alphanumeric-sort","dir":"Articles","previous_headings":"Jamba Overview","what":"Efficient alphanumeric sort","title":"Jamba Overview","text":"mixedSort(), mixedSortDF() functions designed “genes”, “chromosomes”, “versions”, alphanumeric sorting. example: * gene \"ACTA2\" \"ACTA10\" * micro-RNA \"hsa-miR-21\" \"hsa-miR-100\" * chromosome \"chr2\" \"chr10\" fast enough large dataset operations, unreasonably slower base::sort(), much faster alternative approaches. mixedSort() - alphanumeric sort. mixedSortDF() - sort data.frame (tibble, matrix, DataFrame, etc.) mixedSorts() - sort list vectors, vectorized speed boost. Example:","code":"#>     miRNA sort_rank mixedSort_rank #> 2   ABCA2         2              1 #> 1  ABCA12         1              2 #> 3   miR-1         3              3 #> 6  miR-1a         6              4 #> 7  miR-1b         7              5 #> 8   miR-2         8              6 #> 4  miR-12         4              7 #> 9  miR-22         9              8 #> 5 miR-122         5              9"},{"path":[]},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"plotsmoothscatter","dir":"Articles","previous_headings":"Jamba Overview > Plot functions","what":"plotSmoothScatter()","title":"Jamba Overview","text":"common problem visualizing extremely large datasets display thousands datapoints indicating amount overlap points. “overplotting” problem. R graphics::smoothScatter() function provides adequate drop-replacement uses plot(), plotSmoothScatter() applies enhanced defaults. Bandwidth increased provide visual detail. Bins increased render higher resolution. Output rasterized improve speed visual quality. Color ramp uses two-scale colors distinguish low/high density. calculates 2D density independent x-/y-axis ranges, without affecting 2D density estimate. means density spherical oblong, x-/y-axis range differ substantially. customizations use “bin” define bin size, “bw” define 2D kernel density bandwidth. bandwidth defines detail “carpet”, point landscape . bin size defines many pixels used render carpet. Typically bin size related graphics device resolution. However, bandwidth related relative detail data. Adjustments easiest arguments: * binpi - bins per inch * bwpi bandwidth per inch Running plotSmoothScatter() doTest=TRUE produces visual comparison default smoothScatter().","code":"plotSmoothScatter(doTest=TRUE);"},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"imagebycolors","dir":"Articles","previous_headings":"Jamba Overview > Plot functions","what":"imageByColors()","title":"Jamba Overview","text":"imageByColors() function intended take matrix data.frame already contains colors cell. optionally displays cell labels supplied. Cell labels grouped display one unique label per repeated label, using function breaksByVector() group labels. function particularly useful simplify labels large table repeated values, example experiment design. , define simple data.frame composed colors, use data.frame label :  Labels can independently rotated resized, arbitrary example shown :","code":"a1 <- c(\"red\",\"blue\")[c(1,1,2)]; b1 <- c(\"yellow\",\"orange\")[c(1,2,2)]; c1 <- c(\"purple\",\"orange\")[c(1,2,2)]; d1 <- c(\"purple\",\"green\")[c(1,2,2)]; df1 <- data.frame(a=a1, b=b1, c=c1, d=d1); imageByColors(df1, cellnote=df1); imageByColors(df1,    cellnote=df1,     useRaster=TRUE,    #adjBy=\"column\",    cexCellnote=list(c(1.5,1.5,1),       c(1,1.5),        c(1.6,1.2),        c(1.6,1.5)),    srtCellnote=list(c(90,0,0),        c(0,45),        c(0,0,0),        c(0,90,0)));"},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"axis-label-functions","dir":"Articles","previous_headings":"Jamba Overview > Plot functions","what":"Axis label functions","title":"Jamba Overview","text":"several useful axis labeling functions. log-transformed data, minorLogTicksAxis() flexible function help deal different transforms. enables “offset”, commonly used log2(1 + x), now enables using offset, e.g. log2(0.5 + x). Axis labels use integer values, accounting offset. logBase can customized, can properly labeled showing log10(P-value). showing log2 fold changes, accepts negative values flips sign accordingly.","code":"# example showing volcano plot features set.seed(123); n <- 1000; vdf <- data.frame(lfc=rnorm(n) * 2) vdf$`-log10 (padj)` <- abs(vdf$lfc) * abs(rnorm(n)) plotSmoothScatter(vdf, xaxt=\"n\", yaxt=\"n\", xlab=\"Fold change\",    main=\"Volcano plot\\ndisplayBase=2\") logFoldAxis(1) pvalueAxis(2)"},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"plotpolygondensity","dir":"Articles","previous_headings":"Jamba Overview > Plot functions","what":"plotPolygonDensity()","title":"Jamba Overview","text":"plotPolygonDensity() light wrapper around two functions: hist() density(). However, makes two options convenient: Transform x-axis either log10(1 + x) sqrt(), use xScale=c(\"default\", \"log10\", \"sqrt\"). Display multiple panels column numeric matrix. See also: plotRidges() - ggridges alternative.","code":"withr::with_par(list(\"mar\"=c(6, 4, 4, 2), \"mfrow\"=c(2, 2)), {    withr::local_options(list(\"scipen\"=7)); set.seed(123); plotPolygonDensity(10^(3+rnorm(2000)),    breaks=50,    cex.axis=1,    main=\"normal-scaled x-axis\"); plotPolygonDensity(10^(3+rnorm(2000)),    log=\"x\",    breaks=50,    main=\"log-scaled x-axis\"); plotPolygonDensity((3+rnorm(2000))^2,    cex.axis=1,    breaks=50,    main=\"normal-scaled x-axis\"); plotPolygonDensity((3+rnorm(2000))^2,    cex.axis=1,    xScale=\"sqrt\",    breaks=50,    main=\"\"); drawLabels(preset=\"topright\",    txt=\"sqrt-scaled x-axis\",    labelCex=1.5) })"},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"drawlabels","dir":"Articles","previous_headings":"Jamba Overview > Plot functions","what":"drawLabels()","title":"Jamba Overview","text":"drawLabels() aimed base R graphics, provides quick way add label plot. argument preset used place label relative sides corners plot. Shown text_fn=jamba::shadowText enable shadow text output.","code":"par(\"mfrow\"=c(1,1)) plotPolygonDensity((3+rnorm(2000))^2,    cex.axis=1,    xScale=\"sqrt\",    breaks=50,    main=\"\"); drawLabels(preset=\"bottom\",    txt=\"sqrt-scaled x-axis\",    text_fn=jamba::shadowText,    labelCex=1.5)"},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"colors","dir":"Articles","previous_headings":"Jamba Overview","what":"Colors","title":"Jamba Overview","text":", color plays big role daily work, use R, figures visualizations produce data analysis. Another Jam package colorjam focuses defining categorical colors extensible manner.","code":""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"getcolorramp","dir":"Articles","previous_headings":"Jamba Overview > Colors","what":"getColorRamp()","title":"Jamba Overview","text":"getColorRamp() workhorse several functions workflows. makes convenient job obtaining color ramp (aka color palette, color gradient). interfaces RColorBrewer viridisLite color palette names, allows useful extensions. accepts suffix \"_r\" reverse color order, RColorBrewer palette \"RdBu\" reversed \"RdBu_r\". Red high color heatmap - “heat”, “RdBu_r” recommended.","code":""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"printdebug","dir":"Articles","previous_headings":"Jamba Overview > Colors","what":"printDebug()","title":"Jamba Overview","text":"printDebug() present every Jam function, used verbose=TRUE follow processing steps. course uses color. printDebugHtml() used RMarkdown output, use chunk option results='asis' HTML displayed properly. printDebugI() alternative “inverts” color, using color background, contrasting text color top. vector provided, values delimited sep, value “dithered” color lighter/darker pattern visual distinction. element assigned color recycled fgText, can customized. (14:38:41) 22Mar2025: printDebugHtml(): Output colorized: ,B,C,D,E,F,G,H (14:38:42) 22Mar2025: printDebug() using withr::with_options(): Output colorized: ,B,C,D,E,F,G,H","code":"printDebugHtml(\"printDebugHtml(): \",   \"Output is colorized: \",   head(LETTERS, 8)) withr::with_options(list(jam.htmlOut=TRUE, jam.comment=FALSE), {   printDebugHtml(c(\"printDebug() using withr::with_options(): \"),     c(\"Output should be colorized: \"),     head(LETTERS, 8)); })"},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"showcolors","dir":"Articles","previous_headings":"Jamba Overview > Colors","what":"showColors()","title":"Jamba Overview","text":"showColors() displays color ramp, list color ramps, function defined circlize::colorRamp2(). (Amazing function way.)","code":""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"other-color-functions","dir":"Articles","previous_headings":"Jamba Overview > Colors","what":"Other color functions","title":"Jamba Overview","text":"warpRamp() used argument lens functions, can warp colors contrast. even handles divergent colors, keeping middle color intact. rainbow2() simple drop-replacement rainbow(), adds alternating contrast adjacent colors. better option colorjam::rainbowJam() rainbow2() simple option colorjam CRAN.","code":"showColors(list(    Reds=getColorRamp(\"Reds\"),    RdBu=getColorRamp(\"RdBu\"),    RdBu_r=getColorRamp(\"RdBu_r\"),    `RdBu_r, lens=5`=warpRamp(getColorRamp(\"RdBu_r\"), lens=5),    `RdBu_r, lens=-5`=warpRamp(getColorRamp(\"RdBu_r\"), lens=-5),    `rainbow2(15)`=rainbow2(15)    ));"},{"path":[]},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"setprompt","dir":"Articles","previous_headings":"Jamba Overview > Console functions","what":"setPrompt()","title":"Jamba Overview","text":"setPrompt() convenience function R console RStudio work, creates colorized R prompt useful info: * project name * R version * Process ID (PID). PID useful case ahem R session runs wild. Ultimately, helps answer question “working ?”","code":"setPrompt(\"jambaVignette\"); # {jambaVignette}-R-3.6.0_10789>"},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"jargs","dir":"Articles","previous_headings":"Jamba Overview > Console functions","what":"jargs()","title":"Jamba Overview","text":"Jam args(). Aligns arguments, one per row Allows pattern search Optionally sorts argument name Colorized R console","code":"# all args jargs(plotSmoothScatter) #>                 x = , #>                 y = NULL, #>              bwpi = 50, #>             binpi = 50, #>        bandwidthN = NULL, #>              nbin = NULL, #>            expand = c(0.04, 0.04), #>       transFactor = 0.25, #>    transformation = function( x ) x^transFactor, #>              xlim = NULL, #>              ylim = NULL, #>              xlab = NULL, #>              ylab = NULL, #>          nrpoints = 0, #>           colramp = c(\"white\", \"lightblue\", \"blue\", \"orange\", \"orangered2\"), #>               col = \"black\", #>            doTest = FALSE, #>    fillBackground = TRUE, #>          naAction = c(\"remove\", \"floor0\", \"floor1\"), #>              xaxt = \"s\", #>              yaxt = \"s\", #>               add = FALSE, #>               asp = NULL, #> applyRangeCeiling = TRUE, #>         useRaster = TRUE, #>           verbose = FALSE, #>               ... =   # args with \"y\" in the name jargs(plotSmoothScatter, \"^y\") #>    y = NULL, #> ylim = NULL, #> ylab = NULL, #> yaxt = \"s\""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"sdim-and-ssdim","dir":"Articles","previous_headings":"Jamba Overview > Console functions","what":"sdim() and ssdim()","title":"Jamba Overview","text":"functions apply dim() list, list lists. recognize S4 object types, special types like igraph Bioconductor objects. returns either data.frame dimensions, list data.frame, can easily parsed reviewed.","code":"L <- list(LETTERS=LETTERS,    letters=letters,    lettersDF=data.frame(LETTERS, letters)); sdim(L); #>           rows cols      class #> LETTERS     26       character #> letters     26       character #> lettersDF   26    2 data.frame  L2 <- list(List1=L,    List2=L);  sdim(L2); #>       rows class #> List1    3  list #> List2    3  list ssdim(L2) #> $List1 #>           rows cols      class #> LETTERS     26       character #> letters     26       character #> lettersDF   26    2 data.frame #>  #> $List2 #>           rows cols      class #> LETTERS     26       character #> letters     26       character #> lettersDF   26    2 data.frame"},{"path":[]},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"writeopenxlsx","dir":"Articles","previous_headings":"Jamba Overview > Excel functions","what":"writeOpenxlsx()","title":"Jamba Overview","text":"writeOpenxlsx() convenient wrapper amazing openxlsx, automate numeric formatting, column color, font size, text alignment. saving Excel, want details look pretty, usable without configure later. presets certain data types, default numeric formatting, conditional color-coding default: * P-values * fold change, log fold change * numeric values * integer values * highlight columns (bold font) configures defaults: * column headers filtering enabled * striped column header colors * freeze pane row keep header visible * column widths * word wrap, * header row height * categorical colors defined nice extras: * save one worksheets file * optionally include rownames","code":""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"readopenxlsx","dir":"Articles","previous_headings":"Jamba Overview > Excel functions","what":"readOpenxlsx()","title":"Jamba Overview","text":"readOpenxlsx() convenient reading worksheets Excel file, returns data without mangling column headers. returns list data.frame objects.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"vigrep-provigrep-igrep-igrephas","dir":"Articles","previous_headings":"Jamba Overview > Convenience","what":"vigrep(), provigrep(), igrep(), igrepHas()","title":"Jamba Overview","text":"Quick custom base::grep() case-insensitive, value-returning work. vigrep() - extends grep use value=TRUE ignore.case=TRUE igrep() - extends grep use ignore.case=TRUE, case-insensitive matching. provigrep() - progressive pattern matching, returning entries order match vector patterns. Super useful. igrepHas() - extends igrep() return TRUE FALSE, convenient () statements.","code":""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"gsubordered","dir":"Articles","previous_headings":"Jamba Overview > Convenience","what":"gsubOrdered()","title":"Jamba Overview","text":"gsubOrdered() extension gsub() preserves factor order input data, creating new ordered factor levels using gsub() replacement. Much useful might think!","code":""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"pastebyrow-and-pastebyrowordered","dir":"Articles","previous_headings":"Jamba Overview > Convenience","what":"pasteByRow() and pasteByRowOrdered()","title":"Jamba Overview","text":"pasteByRow() lightweight efficient method combining multiple columns one character string. approaches, however function among fastest, especially 10000 rows , allows “ignoring” empty cells output, trimming leading/trailing blanks. pasteByRowOrdered() extension pasteByRow() also maintains factor level order column. , super useful make labels honor factor level order, example experimental designs.","code":"a1 <- factor(c(\"mutant\", \"control\")[c(1,1,2)],    levels=c(\"control\", \"mutant\")); b1 <- factor(c(\"vehicle\", \"treated\")[c(2,1,1)],    levels=c(\"vehicle\", \"treated\")); d1 <- c(\"purple\",\"green\")[c(1,2,2)]; df2 <- data.frame(a=a1, b=b1, d=d1); df2; #>         a       b      d #> 1  mutant treated purple #> 2  mutant vehicle  green #> 3 control vehicle  green pasteByRow(df2); #>                       1                       2                       3  #> \"mutant_treated_purple\"  \"mutant_vehicle_green\" \"control_vehicle_green\" pasteByRowOrdered(df2); #>                     1                     2                     3  #> mutant_treated_purple  mutant_vehicle_green control_vehicle_green  #> Levels: control_vehicle_green mutant_vehicle_green mutant_treated_purple  df3 <- data.frame(df2,    pasteByRowOrdered=pasteByRowOrdered(df2)); mixedSortDF(df3, byCols=\"pasteByRowOrdered\") #>         a       b      d     pasteByRowOrdered #> 3 control vehicle  green control_vehicle_green #> 2  mutant vehicle  green  mutant_vehicle_green #> 1  mutant treated purple mutant_treated_purple"},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"makenames-namevector-namevectorn","dir":"Articles","previous_headings":"Jamba Overview > Convenience","what":"makeNames(), nameVector(), nameVectorN()","title":"Jamba Overview","text":"Create unique names controlled versioning options. base::make.unique() great, sometimes need control output. makeNames() returns unique names, default duplicated values uses suffix style _v1, _v2, _v3. suffix can controlled, whether add suffix singlet entries, number start , etc. nameVector() similar setNames() except secretly runs makeNames(), provided vector, vector used define names. Named vectors convenient lapply() type list functions, names used returned list. nameVectorN() creates named vector vector names, useful lapply() need know element name function call.","code":"x <- rep(head(letters, 4), c(2,4,1,5)); x; #>  [1] \"a\" \"a\" \"b\" \"b\" \"b\" \"b\" \"c\" \"d\" \"d\" \"d\" \"d\" \"d\"  makeNames(x); #>  [1] \"a_v1\" \"a_v2\" \"b_v1\" \"b_v2\" \"b_v3\" \"b_v4\" \"c\"    \"d_v1\" \"d_v2\" \"d_v3\" #> [11] \"d_v4\" \"d_v5\"  nameVector(x); #> a_v1 a_v2 b_v1 b_v2 b_v3 b_v4    c d_v1 d_v2 d_v3 d_v4 d_v5  #>  \"a\"  \"a\"  \"b\"  \"b\"  \"b\"  \"b\"  \"c\"  \"d\"  \"d\"  \"d\"  \"d\"  \"d\"  y <- nameVector(x); nameVectorN(y); #>   a_v1   a_v2   b_v1   b_v2   b_v3   b_v4      c   d_v1   d_v2   d_v3   d_v4  #> \"a_v1\" \"a_v2\" \"b_v1\" \"b_v2\" \"b_v3\" \"b_v4\"    \"c\" \"d_v1\" \"d_v2\" \"d_v3\" \"d_v4\"  #>   d_v5  #> \"d_v5\"  lapply(nameVectorN(head(y)), function(i){    i }) #> $a_v1 #> [1] \"a_v1\" #>  #> $a_v2 #> [1] \"a_v2\" #>  #> $b_v1 #> [1] \"b_v1\" #>  #> $b_v2 #> [1] \"b_v2\" #>  #> $b_v3 #> [1] \"b_v3\" #>  #> $b_v4 #> [1] \"b_v4\""},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"cpaste-cpastesu-cpasteu","dir":"Articles","previous_headings":"Jamba Overview > Convenience","what":"cPaste(), cPasteSU(), cPasteU()","title":"Jamba Overview","text":"cPaste() “concatenate-paste”, takes list combines vectors using delimiter. among fastest methods (time), partly using S4Vectors::unstrsplit() available. (Kudos Herve Pages!) cPasteU() calls unique() vector (vectorized). cPasteS() applies mixedSort() vector (vectorized). cPasteSU() spplies sort unique. functions useful operating list gene symbols. example, vector 500,000 assay probe names may converted list gene symbols, assay probe names associated multiple gene symbols. function cPasteSU() combines gene symbols delimiter \",\", sorting making values unique. also useful gene-pathway data, biological pathways associated long list gene symbols.","code":"set.seed(123); x <- lapply(seq_len(6), function(i){    paste0(\"Gene\",        sample(LETTERS,          sample(c(1,1,2,5,9), 1),          replace=TRUE)); }); cPaste(x); #> [1] \"GeneN,GeneC\" \"GeneR\"       \"GeneE,GeneT\" \"GeneZ\"       \"GeneE,GeneS\" #> [6] \"GeneY,GeneY\" cPasteU(x); #> [1] \"GeneN,GeneC\" \"GeneR\"       \"GeneE,GeneT\" \"GeneZ\"       \"GeneE,GeneS\" #> [6] \"GeneY\" cPasteSU(x); #> [1] \"GeneC,GeneN\" \"GeneR\"       \"GeneE,GeneT\" \"GeneZ\"       \"GeneE,GeneS\" #> [6] \"GeneY\"  data.frame(cPaste=cPaste(x),    cPasteU=cPasteU(x),    cPasteSU=cPasteSU(x)) #>        cPaste     cPasteU    cPasteSU #> 1 GeneN,GeneC GeneN,GeneC GeneC,GeneN #> 2       GeneR       GeneR       GeneR #> 3 GeneE,GeneT GeneE,GeneT GeneE,GeneT #> 4       GeneZ       GeneZ       GeneZ #> 5 GeneE,GeneS GeneE,GeneS GeneE,GeneS #> 6 GeneY,GeneY       GeneY       GeneY"},{"path":[]},{"path":"https://jmw86069.github.io/jamba/articles/jamba-vignette.html","id":"kable_coloring","dir":"Articles","previous_headings":"Jamba Overview > RMarkdown Colored Tables","what":"kable_coloring()","title":"Jamba Overview","text":"kable_coloring() - applies categorical colors kable() output using kableExtra::kable(). also applies contrasting text color.","code":"expt_df <- data.frame(   Sample_ID=\"\",   Treatment=rep(c(\"Vehicle\", \"Dex\"), each=6),   Genotype=rep(c(\"Wildtype\", \"Knockout\"), each=3),   Rep=paste0(\"rep\", c(1:3))) expt_df$Sample_ID <- pasteByRow(expt_df[, 2:4])  # define colors colorSub <- c(Vehicle=\"palegoldenrod\",   Dex=\"navy\",   Wildtype=\"gold\",   Knockout=\"firebrick\",   nameVector(color2gradient(\"grey48\", n=3, dex=10), rep(\"rep\", 3), suffix=\"\"),   nameVector(     color2gradient(n=3,       c(\"goldenrod1\", \"indianred3\", \"royalblue3\", \"darkorchid4\")),     expt_df$Sample_ID)) if (requireNamespace(\"kableExtra\", quietly=FALSE)) {    kbl <- kable_coloring(      expt_df,      caption=\"Experiment design table showing categorical color assignment.\",      colorSub) }"},{"path":"https://jmw86069.github.io/jamba/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James M. Ward. Author, maintainer, copyright holder.","code":""},{"path":"https://jmw86069.github.io/jamba/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Farris S, Ward JM, Carstens KE, Samadi M, Wang Y, Dudek SM (2019). “Hippocampal Subregions Express Distinct Dendritic Transcriptomes Reveal Differences Mitochondrial Function CA2.” Cell Reports, 29(2), 522-539. doi:10.1016/j.celrep.2019.08.093.","code":"@Article{,   title = {Hippocampal Subregions Express Distinct Dendritic Transcriptomes that Reveal Differences in Mitochondrial Function in CA2},   author = {Shannon Farris and James M. Ward and Kelly E. Carstens and Mahsa Samadi and Yu Wang and Serena M. Dudek},   year = {2019},   journal = {Cell Reports},   volume = {29},   number = {2},   pages = {522-539},   doi = {10.1016/j.celrep.2019.08.093}, }"},{"path":"https://jmw86069.github.io/jamba/index.html","id":"jamba","dir":"","previous_headings":"","what":"Jam Base Methods for bioinformatics and data analysis","title":"Jam Base Methods for bioinformatics and data analysis","text":"goal jamba provide useful custom functions R data analysis visualization. jamba version 1.0.2","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"package-reference","dir":"","previous_headings":"","what":"Package Reference","title":"Jam Base Methods for bioinformatics and data analysis","text":"full online function reference available via pkgdown documentation: Full jamba command reference Functions categorized, examples listed :","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Jam Base Methods for bioinformatics and data analysis","text":"Production soon available CRAN: install.packages(\"jamba\") development version can installed: remotes::install_github(\"jmw86069/jamba\")","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"additional-r-packages-in-suggests","dir":"","previous_headings":"Installation","what":"Additional R Packages in “Suggests”","title":"Jam Base Methods for bioinformatics and data analysis","text":"crayon - install install.packages(\"crayon\") glorious colored console output. Color makes better. farver - install install.packages(\"farver\") efficient color manipulations, HSL color coneversions.","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"additional-r-packages-in-enhances","dir":"","previous_headings":"Installation","what":"Additional R Packages in “Enhances”","title":"Jam Base Methods for bioinformatics and data analysis","text":"Bioconductor packages invaluable bioinformatics work, can bit “heavy” install absolutely necessary. Therefore, Bioconductor packages “Enhances” require someone make choice install . S4Vectors - install BiocManager::install(\"S4vectors\") improve speed cPaste() functions. openxlsx - install install.packages(\"openxlsx\") support Excel xlsx file import, stylized export. kableExtra - install install.packages(\"kableExtra\") enable colorized kable HTML tables RMarkdown documents. ComplexHeatmap - install BiocManager::install(\"ComplexHeatmap\") use heatmap_row_order(), cell_fun_label() custom labels. matrixStats - install install.packages(\"matrixStats\") efficient numeric stats calculations, sparseMatrixStats use Matrix sparse matrices used Seurat SingleCellExperiment data. ggridges - install install.packages(\"ggridges\") convenient ridge density plots using plotRidges().","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Jam Base Methods for bioinformatics and data analysis","text":"R functions jamba built , used, tested, revised several years. immediately useful day--day work, efficient robust enough production pipelines. Many inspired discussion Stackoverflow, R-help, Bioconductor, citations thanking principal author(s). Many thanks original authors! R community built upon collective greatness contributors! functions designed around workflows Bioinformatics analyses, functions need efficient operating 10,000 100,000 elements. (work quite well millions well.) Usually speed gains obvious 100 elements, scale linearly (worse) number increases. others use functions time. One example function writeOpenxlsx() simple wrapper around useful openxlsx::write.xlsx(), also applies column formatting column types: P-values, fold changes, log2 fold changes, numeric, integer values. Columns use conditional Excel formatting apply color-shading cells type. Similarly, readOpenxlsx() wrapper function openxlsx::read.xlsx() reads worksheet returns list data.frame objects. can detect multi-row column headers, returns combined column names. also applies equivalent check.names=FALSE column names returned without change. Small large efficiencies used wherever possible. mixedSort() functions based upon gtools::mixedsort(), additional optimizations speed custom needs. sorts chromosome names, gene names, micro-RNA names, etc.","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"alphanumeric-sort","dir":"","previous_headings":"","what":"Alphanumeric sort","title":"Jam Base Methods for bioinformatics and data analysis","text":"mixedSort() - highly efficient alphanumeric sort, example chr1, chr2, chr3, chr10, etc. mixedSortDF() - , applied columns data.frame (matrix, tibble, DataFrame, etc.) mixedSorts() - , applied list vectors speed loss. Example:","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"base-r-plotting","dir":"","previous_headings":"","what":"Base R plotting","title":"Jam Base Methods for bioinformatics and data analysis","text":"functions help base R plots, little cases amazing ggplot2 package smooth fit. nullPlot() - convenient “blank” base R plot, optionally displays margins plotSmoothScatter() - smooth scatter plot() point density, enhanced smoothScatter() plotPolygonDensity() - fast density/histogram plot vector matrix imageDefault() - enhanced image() enables raster output consistent pixel aspect ratio. imageByColors() - wrapper image() matrix data.frame colors, optional labels minorLogTicksAxis(), logFoldAxis(), pvalueAxis() - log axis tick marks labels, compatible offset example log(offset + x). sqrtAxis() - draw square-root transformed axis, proper labels. drawLabels() - draw square colorized text labels shadowText() - replacement text() draws shadows outlines. groupedAxis() - grouped axis labels show regions/ranges decideMfrow() - determine appropriate value par(\"mfrow\") multipanel output base R plotting. getPlotAspect() - determine visible plot aspect ratio.","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"excel-export","dir":"","previous_headings":"","what":"Excel export","title":"Jam Base Methods for bioinformatics and data analysis","text":"Every Bioinformatician/statistician needs write data Excel, writeOpenxlsx() function consistent makes look pretty. can save numerous worksheets single Excel file, without go back custom-format everything. writeOpenxlsx() - flexible Excel exporter, categorical conditional colors. applyXlsxCategoricalFormat() - apply categorical colors Excel applyXlsxConditionalFormat() - apply conditional colors Excel","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"colors","dir":"","previous_headings":"","what":"Colors","title":"Jam Base Methods for bioinformatics and data analysis","text":"Almost everything uses color somewhere, especially R console, every R plot. getColorRamp() - retrieve create color palettes setTextContrastColor() - find contrasting font color colored background makeColorDarker() - make color darker (lighter, saturated) color2gradient() - split one color gradient n colors showColors() - display vector list colors rainbow2() - enhances rainbow() categorical colors visual contrast. warpRamp() - “bend” color gradient enhance visual range fixYellow() - opinionated reduction yellow-green hue printDebug() - colorized text output console RMarkdown printDebugHtml() - colorized HTML output RMarkdown web pages kable_coloring() - colored kableExtra::kable() RMarkdown tables, kableExtra package installed. col2alpha(), alpha2col() - get set alpha transparency col2hcl(), col2hsl(), col2hsv(), hcl2col(), hsl2col(), hsv2col(), rgb2col() - consistent color conversions. color_dither() - split color two make color stripes","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"list-functions","dir":"","previous_headings":"","what":"List Functions","title":"Jam Base Methods for bioinformatics and data analysis","text":"Efficient methods operate lists one call, avoid looping list either () loops, lapply() map() functions. Driven speed 10k-100k rows, typical biological datasets. Compared convenient alternatives, apply() tidyverse, typically order magnitude faster. (Ymmv.) Notable exceptions: data.table Bioconductor S4Vectors. amazing, fairly heavy installations. S4Vectors used available. cPaste() - paste(..., collapse) list vectors cPasteS() - cPaste() mixedSort() cPasteU() - cPaste() unique() (actually uniques()) cPasteSU() - cPaste() mixedSort() unique() uniques() - unique() across list vectors sclass() - class() list sdim() - dim() across list, S4 object, non-list object ssdim() - sdim() across list sdima() - sdim() attributes() rbindList() - .call(rbind, ...) bind rows matrix data.frame, useful together strsplit(). mergeAllXY() - merge(..., .x=TRUE, .y=TRUE) list data.frame rmNULL() - remove NULL list, optional replacement rmNAs() - rmNA() across list, option replacement(s) showColors() - display colors heads() - head() across list","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"unique-names-with-versions","dir":"","previous_headings":"","what":"Unique names with versions","title":"Jam Base Methods for bioinformatics and data analysis","text":"R object names provide additional method confirm data kept proper order. Duplicated names may silently ignored, motivated easy approach “make unique names”. makeNames() - make unique names, flexible rules nameVector() - add unique names using makeNames() nameVectorN() - make vector names, named makeNames(). Useful inside lapply() returns names provided.","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"dataframematrixtibble","dir":"","previous_headings":"","what":"data.frame/matrix/tibble","title":"Jam Base Methods for bioinformatics and data analysis","text":"mixedSortDF() - mixedSort() columns rownames pasteByRow() - fast row-paste delimiters, default skips blanks pasteByRowOrdered() - nifty alternative honors factor levels rowGroupMeans(), rowRmMadOutliers() - grouped row functions mergeAllXY() - merge list data.frame one, keeping rows renameColumn() - rename columns . kable_coloring() - flexible colorized data.frame output Rmarkdown.","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"string--grep","dir":"","previous_headings":"","what":"String / grep","title":"Jam Base Methods for bioinformatics and data analysis","text":"tcount() - table() sorted high--low, minimum count filter middle() - show n entries start, middle, end. gsubOrdered() - gsub() returns ordered factor, inherits existing gsubs() - gsub() vector patterns/replacements. grepls() - grep environment object names, including attached packages vgrep(), vigrep() - value-grep shortcut unvgrep(), unvigrep() - un-grep, remove matched results provigrep() - progressive grep, returns matches order patterns igrepHas() - case-insensitive grep-ucfirst() - upper-case first letter word. padString(), padInteger() - produce strings numeric values consistent leading zeros.","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"numeric","dir":"","previous_headings":"","what":"Numeric","title":"Jam Base Methods for bioinformatics and data analysis","text":"formatInt() - opinionated format() integers. normScale() - scale 0 1 custom range noiseFloor() - apply noise floor, ceiling, flexible replacements log2signed(), exp2signed() - log2 offset, reciprocal rowGroupMeans(), rowRmMadOutliers() - efficient grouped row functions deg2rad(), rad2deg() - interconvert degrees radians rmNA() - remove NA values, optional replacement warpAroundZero() - warp numeric vector symmetrically around zero rmInfinite() - remove infinite values, optional replacement. formatInt() - convenient format() integer output, comma-delimiter default","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"common-usage","dir":"","previous_headings":"Numeric","what":"Common usage","title":"Jam Base Methods for bioinformatics and data analysis","text":"convert zero NA: convert values floor floor: convert values floor NA floor:","code":"noiseFloor(0:10, minimum=1e-20, newValue=NA) #>  [1] NA  1  2  3  4  5  6  7  8  9 10 noiseFloor(0:10, minimum=3) #>  [1]  3  3  3  3  4  5  6  7  8  9 10 noiseFloor(c(0:10, NA), minimum=3, adjustNA=TRUE) #>  [1]  3  3  3  3  4  5  6  7  8  9 10  3"},{"path":"https://jmw86069.github.io/jamba/index.html","id":"practical--helpful","dir":"","previous_headings":"","what":"Practical / helpful","title":"Jam Base Methods for bioinformatics and data analysis","text":"jargs() - pretty function arguments, optional pattern search argument name sdim(), ssdim() - dimensions list objects, nested list lists sdima() - runs sdim() attributes object. isTRUEV(), isFALSEV() - vectorized test TRUE FALSE values, since isTRUE() operates single values, allow NA. reload_rmarkdown_cache() - load RMarkdown cache folder environment call_fn_ellipsis() - developers, call child function passing acceptable arguments .... Instead : something(x, ...), use: call_fn_ellipsis(something, x, ...) never worry .... log2signed(), exp2signed() - convenient log2(1 + x) reciprocal, using customizable offset. newestFile() - recently modified file vector files","code":"jargs(plotSmoothScatter) #>                 x = , #>                 y = NULL, #>              bwpi = 50, #>             binpi = 50, #>        bandwidthN = NULL, #>              nbin = NULL, #>            expand = c(0.04, 0.04), #>       transFactor = 0.25, #>    transformation = function( x ) x^transFactor, #>              xlim = NULL, #>              ylim = NULL, #>              xlab = NULL, #>              ylab = NULL, #>          nrpoints = 0, #>           colramp = c(\"white\", \"lightblue\", \"blue\", \"orange\", \"orangered2\"), #>               col = \"black\", #>            doTest = FALSE, #>    fillBackground = TRUE, #>          naAction = c(\"remove\", \"floor0\", \"floor1\"), #>              xaxt = \"s\", #>              yaxt = \"s\", #>               add = FALSE, #>               asp = NULL, #> applyRangeCeiling = TRUE, #>         useRaster = TRUE, #>           verbose = FALSE, #>               ... ="},{"path":"https://jmw86069.github.io/jamba/index.html","id":"r-console","dir":"","previous_headings":"Practical / helpful","what":"R console","title":"Jam Base Methods for bioinformatics and data analysis","text":"jargs() - Jam argument list - see “Practical” example lldf() - ls() object.size() data.frame middle() - Similar head() tail(), middle() shows n entries beginning, middle, end. printDebug() - colorized text output setPrompt() - colorized R console prompt project name R version","code":""},{"path":"https://jmw86069.github.io/jamba/index.html","id":"rmarkdown","dir":"","previous_headings":"Practical / helpful","what":"RMarkdown","title":"Jam Base Methods for bioinformatics and data analysis","text":"reload_rmarkdown_cache() - rendering RMarkdown cache=TRUE, function reads cache reload environment without re-processing, recover exact result continued work. printDebugHtml() - colored HTML output. Shortcut printDebug(..., htmlOut=TRUE, comments=FALSE), options(\"jam.htmlOut\"=TRUE, \"jam.comment\"=FALSE). RMarkdown chunk must include: results='asis' (12:05:41) 07Mar2025: printDebugHtml(): Output colorized: ,B,C,D,E,F,G,H (12:05:41) 07Mar2025: printDebug() using withr::with_options(): Output colorized: ,B,C,D,E,F,G,H kable_coloring() - applies categorical colors kable() output using kableExtra::kable(). also applies contrasting text color. Unfortunately, HTML output compatible page Github, see package function docs RStudio.","code":"printDebugHtml(\"printDebugHtml(): \",   \"Output is colorized: \",   head(LETTERS, 8)) withr::with_options(list(jam.htmlOut=TRUE, jam.comment=FALSE), {   printDebugHtml(c(\"printDebug() using withr::with_options(): \"),     c(\"Output should be colorized: \"),     head(LETTERS, 8)); }) expt_df <- data.frame(   Sample_ID=\"\",   Treatment=rep(c(\"Vehicle\", \"Dex\"), each=6),   Genotype=rep(c(\"Wildtype\", \"Knockout\"), each=3),   Rep=paste0(\"rep\", c(1:3))) expt_df$Sample_ID <- pasteByRow(expt_df[, 2:4])  # define colors colorSub <- c(Vehicle=\"palegoldenrod\",   Dex=\"navy\",   Wildtype=\"gold\",   Knockout=\"firebrick\",   nameVector(color2gradient(\"grey48\", n=3, dex=10), rep(\"rep\", 3), suffix=\"\"),   nameVector(     color2gradient(n=3,       c(\"goldenrod1\", \"indianred3\", \"royalblue3\", \"darkorchid4\")),     expt_df$Sample_ID)) kbl <- kable_coloring(   expt_df,   caption=\"Experiment design table showing categorical color assignment.\",   colorSub)"},{"path":"https://jmw86069.github.io/jamba/index.html","id":"other-related-jam-packages","dir":"","previous_headings":"","what":"Other related Jam packages","title":"Jam Base Methods for bioinformatics and data analysis","text":"Jam Github R packages transitioned CRAN/Bioconductor: venndir: Venn diagrams direction, designed published figures. multienrichjam: Multi-enrichment pathway analysis visualization tools. splicejam: Sashimi plots RNA-seq coverage junction data. jamma: MA-plots unified data signal quality control toolset. colorjam: rainbowJam(), Categorical colors improved visual contrast. genejam: Fast, structured approach gene symbol integration. platjam: Platform specific functions: Nanostring, Salmon, Proteomics, Lipidomics; NGS coverage heatmaps. jamses: heatmap_se() friendly wrapper ComplexHeatmap; integrated methods factor-aware design/contrasts, normalization, contrasts, heatmaps. jamsession: properly save/load R objects, R sessions, R functions.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/prep_CRAN_release_dec2022.html","id":"function-documentation","dir":"","previous_headings":"","what":"Function documentation","title":"Prepare for CRAN release","text":"functions must contain @returns functions contain @examples","code":""},{"path":"https://jmw86069.github.io/jamba/prep_CRAN_release_dec2022.html","id":"unit-tests","dir":"","previous_headings":"","what":"Unit tests","title":"Prepare for CRAN release","text":"key functions include unit tests basic functionality.","code":""},{"path":"https://jmw86069.github.io/jamba/prep_CRAN_release_dec2022.html","id":"code-changes-for-cran-compliance","dir":"","previous_headings":"","what":"Code changes for CRAN compliance","title":"Prepare for CRAN release","text":"DONE. Remove use :::, replace call exported function, internal function performs equivalent task. DONE: grDevices:::.smoothScatterCalcDensity() - wrapper KernSmooth::bkde2D() can replaced internal Jam function. DONE: RColorBrewer:::namelist - removed, RColorBrewer Imports, Suggests. Use manually-encoded method recognize valid RColorBrewer color names. (jamba-showcolors.R:52) DONE: utils:::relist.default() - remove reference help docs, see jamba-string.r:2411. DONE: base:::merge.data.frame() - manually recognize argument names, see jamba.r:4632. Consider splitting large files smaller counterparts, examples: jamba.r: 5,074 lines jamba-plots.r: 3,341 lines jamba-string.r: 2,629 lines jamba-colors.r: 2,107 lines jamba-export.r: 1,762 lines jamba-mixedSort.R: 1,147 lines Port imageDefault() call image.default() DONE: avoid .External.graphics(graphics:::C_image, x, y, zi, col)","code":""},{"path":"https://jmw86069.github.io/jamba/reference/adjustAxisLabelMargins.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust axis label margins — adjustAxisLabelMargins","title":"Adjust axis label margins — adjustAxisLabelMargins","text":"Adjust axis label margins accommodate axis labels","code":""},{"path":"https://jmw86069.github.io/jamba/reference/adjustAxisLabelMargins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust axis label margins — adjustAxisLabelMargins","text":"","code":"adjustAxisLabelMargins(   x,   margin = 1,   maxFig = 1/2,   cex = graphics::par(\"cex\"),   cex.axis = graphics::par(\"cex.axis\"),   prefix = \"-- -- \",   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/adjustAxisLabelMargins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust axis label margins — adjustAxisLabelMargins","text":"x character vector axis labels margin integer value indicating margin adjust, using order graphics::par(\"mar\"), 1=bottom, 2=left, 3=top, 4=right. maxFig numeric fraction less 1, indicating maximum size margin relative figure size. Setting margins large results error otherwise. cex numeric NULL, default graphics::par(\"cex\"), used convenience cex * cex.axis passed graphics::strwidth(). However, graphics::axis() use cex.axis adjusting axis label font size. cex.axis numeric, default graphics::par(\"cex.axis\") define axis label font size. prefix character string add whitespace around axis label order add \"buffer\" whitespace. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/adjustAxisLabelMargins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust axis label margins — adjustAxisLabelMargins","text":"list named \"mai\" suitable use graphics::par() adjust margin size using inches.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/adjustAxisLabelMargins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust axis label margins — adjustAxisLabelMargins","text":"function takes vector axis labels, margin used, adjusts relevant axis margin accomodate label size, maximum fraction figure size defined maxFig. Labels assumed perpendicular axis, example argument las=2 using graphics::text(). Note function render labels figure, therefore revert axis margins original size. process performed separately.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/adjustAxisLabelMargins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust axis label margins — adjustAxisLabelMargins","text":"","code":"xlabs <- paste0(\"item_\", (1:20)); ylabs <- paste0(\"rownum_\", (1:20));  # proper adjustment should be done using withr, for example x_cex <- 0.8; y_cex <- 1.2; withr::with_par(adjustAxisLabelMargins(xlabs, 1, cex.axis=x_cex), {    withr::local_par(adjustAxisLabelMargins(ylabs, 2, cex.axis=y_cex))    nullPlot(xlim=c(1,20), ylim=c(1,20), doMargins=FALSE);    graphics::axis(1, at=1:20, labels=xlabs, las=2, cex.axis=x_cex);    graphics::axis(2, at=1:20, labels=ylabs, las=2, cex.axis=y_cex); })   withr::with_par(adjustAxisLabelMargins(xlabs, 3, cex.axis=x_cex), {    withr::local_par(adjustAxisLabelMargins(ylabs, 4, cex.axis=y_cex))    nullPlot(xlim=c(1,20), ylim=c(1,20), doMargins=FALSE);    graphics::axis(3, at=1:20, labels=xlabs, las=2);    graphics::axis(4, at=1:20, labels=ylabs, las=2); })   par(\"mar\") #> [1] 5.671528 4.100000 5.671528 2.100000"},{"path":"https://jmw86069.github.io/jamba/reference/alpha2col.html","id":null,"dir":"Reference","previous_headings":"","what":"set R color alpha value — alpha2col","title":"set R color alpha value — alpha2col","text":"Define alpha transparency per R color","code":""},{"path":"https://jmw86069.github.io/jamba/reference/alpha2col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set R color alpha value — alpha2col","text":"","code":"alpha2col(x, alpha = 1, maxValue = 1, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/alpha2col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set R color alpha value — alpha2col","text":"x R compatible color, either color name, hex value, mixture two. value compatible col2rgb. alpha numeric alpha transparency use per x color. alpha recycled length(x) needed. maxValue numeric maximum value return, useful downstream alpha range 255. default maxValue=1 returned. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/alpha2col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set R color alpha value — alpha2col","text":"character vector R colors, alpha values.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/alpha2col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set R color alpha value — alpha2col","text":"","code":"withr::with_par(list(\"mfrow\"=c(2,2)), { for (alpha in c(1, 0.8, 0.5, 0.2)) {    nullPlot(plotAreaTitle=paste0(\"alpha=\", alpha),       doMargins=FALSE);    usrBox(fill=alpha2col(\"yellow\",       alpha=alpha)); } })"},{"path":"https://jmw86069.github.io/jamba/reference/applyCLrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply CL color range — applyCLrange","title":"Apply CL color range — applyCLrange","text":"Restrict chroma (C) luminance (L) ranges vector R colors","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyCLrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply CL color range — applyCLrange","text":"","code":"applyCLrange(   x,   lightMode = NULL,   Crange = getOption(\"jam.Crange\"),   Lrange = getOption(\"jam.Lrange\"),   Cgrey = getOption(\"jam.Cgrey\", 5),   fixYellow = TRUE,   CLmethod = c(\"scale\", \"floor\", \"expand\"),   fixup = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/applyCLrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply CL color range — applyCLrange","text":"x vector R colors lightMode NULL logical. lightMode=NULL Crange Lrange values used -; lightMode=TRUE lightMode=FALSE default values used Crange Lrange values, lightMode=TRUE intended colors contrast light/bright/white background, lightMode=FALSE intended colors contrast dark background. Crange NULL numeric range minimum maximum allowed values chroma (C) component. Lrange NULL numeric range minimum maximum allowed values luminance (L) component. Cgrey numeric chroma (C) value, defines grey colors chroma. colors grey cutoff C values unchanged. mechanism prevents converting black red, example. disable effect, set Cgrey=-1. fixYellow logical indicating whether \"fix\" darkening yellow, otherwise turns green. Instead, since JAM can, JAM make yellow slightly golden darkening, achieved calling fixYellowHue(). CLmethod character string indicating alter values outside respective Crange Lrange ranges. \"scale\" rescale values outside range, rescale full range c(Crange, Cvalues) c(Crange). way, values outside range rescaled. \"floor\" apply fixed cutoff, values outside range set equal range boundary . \"expand\" rescale values range equal Crange. fixup logical passed hcl2col() subsequently colorspace::hex() converting colors outside color gamut (visible range.) fixup NULL, hcl2col() method applies aggressive technique restrict color range. ... additional argyments passed fixYellowHue() fixYellow TRUE.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyCLrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply CL color range — applyCLrange","text":"vector colors applying chroma (C) luminance (L) ranges.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyCLrange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply CL color range — applyCLrange","text":"function primarily intended restrict range brightness values contrast background color, particularly background color may bright dark. Note output slightly different supplying one color, compared supplying vector colors. One color simply restricted Crange Lrange. However, vector colors scaled within ranges relative C L values maintained, visual comparison. C L values defined colorspace::polarLUV(), C typically restricted 0..100 L typically 0..100. colors, values 100 allowed. Values restricted given numeric range using one three methods, set via CLmethod argument. example, consider done Crange <- c(10,70) C values Cvalues <- c(50, 60, 70, 80). \"floor\" uses jamba::noiseFloor() apply fixed cutoffs minimum maximum range. method effect making values outside range equal final value. \"scale\" apply jamba::normScale() rescale values outside given range. example, c(Crange, Cvalues) initial range, constrains values c(Crange).  method effect maintaining relative difference values. \"expand\" simply apply jamba::normScale() fit values minimum maximum range values. method effect forcing colors fit full numeric range, even original differences values small. case (1) , Cvalues become c(50, 60, 70, 70). case (2) , Cvalues become c(44, 53, 61, 70) case (3) , Cvalues become c(10, 30, 50, 70) Note colors C (chroma) values less Cgrey C value changed, order maintain colors greyscale, without colorizing . Particularly pure grey, C=0, still required hue H, important increase C.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/applyCLrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply CL color range — applyCLrange","text":"","code":"cl <- c(\"red\", \"blue\", \"navy\", \"yellow\", \"orange\"); cl_lite <- applyCLrange(cl, lightMode=TRUE); cl_dark <- applyCLrange(cl, lightMode=FALSE);  # individual colors cl_lite_ind <- sapply(cl, applyCLrange, lightMode=TRUE); cl_dark_ind <- sapply(cl, applyCLrange, lightMode=FALSE);  # display colors showColors(list(`input colors`=cl,    `lightMode=TRUE, vector`=cl_lite,    `lightMode=TRUE, individual`=cl_lite_ind,    `lightMode=FALSE, vector`=cl_dark,    `lightMode=FALSE, individual`=cl_dark_ind))  printDebug(cl, lightMode=TRUE); #> ##  (14:37:53) 22Mar2025:      red,blue,navy,yellow,orange"},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxCategoricalFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Add categorical colors to 'Excel' 'xlsx' worksheets — applyXlsxCategoricalFormat","title":"Add categorical colors to 'Excel' 'xlsx' worksheets — applyXlsxCategoricalFormat","text":"Add categorical colors 'Excel' 'xlsx' worksheets","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxCategoricalFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add categorical colors to 'Excel' 'xlsx' worksheets — applyXlsxCategoricalFormat","text":"","code":"applyXlsxCategoricalFormat(   xlsxFile,   sheet = 1,   rowRange = NULL,   colRange = NULL,   colorSub = NULL,   colorSubText = setTextContrastColor(colorSub),   trimCatNames = TRUE,   overwrite = TRUE,   wrapText = FALSE,   stack = TRUE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxCategoricalFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add categorical colors to 'Excel' 'xlsx' worksheets — applyXlsxCategoricalFormat","text":"xlsxFile character filename file \".xlsx\" extension, Workbook object defined openxlsx package. xlsxFile Workbook output saved file. sheet integer index worksheet worksheets. rowRange, colRange integer vectors rows columns apply categorical colors 'Excel' 'xlsx' worksheet, passed openxlsx::readWorkbook(..., rows=rowRange, cols=colRange). step defines columns read workbook, however colorSub provided list whose names intended match colnames(), matching colnames processed. colorSub one following types input: Named character vector valid R colors, whose names correspond values worksheet cells. Named list whose names correspond colnames one workbooks sheet. list element character vector named column values, color function takes column values returns character vector colors value. colorSubText optional character vector colors, whose names correspond values worksheet cells. absence specific text color, setTextContrastColor() used define contrasting text color visible colored background. trimCatNames logical whether trim whitespace punctuation colorSub 'Excel' cell fields matching colors 'Excel' values. overwrite logical indicating whether new cell color styles forced overwrite previous cell styles. wrapText logical indicating whether wrap text. stack logical indicating whether new color rules applied existing styles, many whose styles may affect specific cell color, example font size font name. verbose logical indicating whether print verbose output. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxCategoricalFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add categorical colors to 'Excel' 'xlsx' worksheets — applyXlsxCategoricalFormat","text":"Workbook object defined openxlsx package returned invisibly invisible(). Workbook can used argument wb provide speed boost saving multiple sheets file.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxCategoricalFormat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add categorical colors to 'Excel' 'xlsx' worksheets — applyXlsxCategoricalFormat","text":"function convenient wrapper applying categorical color formatting cell background colors, applies contrasting color text cells using setTextContrastColor(). uses named character vector colors supplied colorSub define cell background colors, optionally colorSubText define specific color cell text.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxCategoricalFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add categorical colors to 'Excel' 'xlsx' worksheets — applyXlsxCategoricalFormat","text":"","code":"# write to tempfile for examples if (check_pkg_installed(\"openxlsx\")) {    out_xlsx <- tempfile(pattern=\"writeOpenxlsx_\", fileext=\".xlsx\")    df <- data.frame(a=LETTERS[1:5], b=1:5);    writeOpenxlsx(x=df,       file=out_xlsx,       sheetName=\"jamba_test\");     colorSub <- nameVector(       rainbow2(5, s=c(0.8, 1), v=c(0.8, 1)),       LETTERS[1:5]);    applyXlsxCategoricalFormat(out_xlsx,       sheet=\"jamba_test\",       colorSub=colorSub    ) }"},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxConditionalFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"Xlsx Conditional formatting — applyXlsxConditionalFormat","title":"Xlsx Conditional formatting — applyXlsxConditionalFormat","text":"Xlsx Conditional formatting","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxConditionalFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Xlsx Conditional formatting — applyXlsxConditionalFormat","text":"","code":"applyXlsxConditionalFormat(   xlsxFile,   sheet = 1,   fcColumns = NULL,   fcGrep = NULL,   fcStyle = c(\"#4F81BD\", \"#EEECE1\", \"#C0504D\"),   fcRule = c(-6, 0, 6),   fcType = \"colourScale\",   lfcColumns = NULL,   lfcGrep = NULL,   lfcStyle = c(\"#4F81BD\", \"#EEECE1\", \"#C0504D\"),   lfcRule = c(-3, 0, 3),   lfcType = \"colourScale\",   hitColumns = NULL,   hitGrep = NULL,   hitStyle = c(\"#4F81BD\", \"#EEECE1\", \"#C0504D\"),   hitRule = c(-1.5, 0, 1.5),   hitType = \"colourScale\",   intColumns = NULL,   intGrep = NULL,   intStyle = c(\"#EEECE1\", \"#FDC99B\", \"#F77F30\"),   intRule = c(0, 100, 10000),   intType = \"colourScale\",   numColumns = NULL,   numGrep = NULL,   numStyle = c(\"#F2F0F7\", \"#B4B1D4\", \"#938EC2\"),   numRule = c(1, 10, 20),   numType = \"colourScale\",   pvalueColumns = NULL,   pvalueGrep = NULL,   pvalueStyle = c(\"#F77F30\", \"#FDC99B\", \"#EEECE1\"),   pvalueRule = c(0, 0.01, 0.05),   pvalueType = \"colourScale\",   verbose = FALSE,   startRow = 2,   overwrite = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxConditionalFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Xlsx Conditional formatting — applyXlsxConditionalFormat","text":"xlsxFile character filename file \".xlsx\" extension, Workbook object defined openxlsx package. xlsxFile Workbook output saved file. sheet integer character, either worksheet number, order character worksheet name. vector can contain multiple values, cause conditional formatting applied worksheet order given. fcColumns, lfcColumns, hitColumns, intColumns, numColumns, pvalueColumns integer column indices, character colnames indicating columns treated various column types. fcGrep, lfcGrep, hitGrep, intGrep, numGrep, pvalueGrep optional character vector used provigrep colnames(x). process may convenient apply formatting known colname character patterns, rather supplying exact column indices colnames. fcStyle, lfcStyle, hitStyle, intStyle, numStyle, pvalueStyle color vector length=3, corresponding numeric thresholds defined corresponding Rules. fcRule, lfcRule, hitRule, intRule, numRule, pvalueRule numeric vector length=3, used define three numeric thresholds color gradients applied. fcType, lfcType, hitType, intType, numType, pvalueType character string indicating type conditional rule apply, cases \"colourScale\" allows three numeric thresholds, three corresponding colors. allowed values, see openxlsx::conditionalFormatting(). verbose logical indicating whether print verbose output. startRow integer indicating row begin applying conditional formatting. cases startRow=2, allows one row column headers. However, multiple header rows, startRow 1 number header rows. overwrite logical indicating whether original 'Excel' files replaced new one, whether new file created. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxConditionalFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Xlsx Conditional formatting — applyXlsxConditionalFormat","text":"Workbook object defined openxlsx package returned invisibly invisible(). Workbook can used argument wb provide speed boost saving multiple sheets file.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxConditionalFormat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Xlsx Conditional formatting — applyXlsxConditionalFormat","text":"function convenient wrapper applying conditional formatting 'Excel' 'xlsx' worksheets, reasonable settings commonly used data types. Note function apply cell formatting, numeric formatting displayed 'Excel'. description column types follows: \"fc\" Fold change, typically positive negative values, formatted show one decimal place, use commas separate thousands places, e.g. 1,020.1. Colors applied neutral midpoint, coloring values zero. \"lfc\" log fold change, typically positive negative values, formatted show one decimal place, use commas separate thousands places, e.g. 12.1. Colors applied neutral midpoint, coloring values zero. Log fold changes slightly different color thresholds fold changes. \"hit\" Hit columns, often just values like c(-1,0,1), fold changes statistical hits example. formatted show one decimal place, use commas separate thousands places, e.g. 1.5. Colors applied neutral midpoint, coloring values zero, typically fairly low threshold. \"int\" Integer columns, formatted hide decimal place values even present, can help clean visible tabular data. formatted use commas separate thousands places, e.g. 1,020. Colors applied baseline zero, intended highlighting two thresholds values zero. \"num\" Numeric columns, formatted display 2 decimal places, use commas separate thousands places, e.g. 1,020.1. Colors applied baseline zero, intended highlighting two thresholds values zero. \"pvalue\" P-value columns, formatted display scientific notation always, consistency, two decimal places, e.g. 1.02e-02. Colors applied starting white P-value 1 (non-significant) becoming red P-value approaches 0.01, 0.0001. column type, one can describe column using integer indices, colnames, optionally use Grep parameters. Grep parameters intended pattern matching, may contain vector grep patterns used provigrep() match colnames. Grep method particularly useful applying conditional formatting multiple worksheets 'xlsx' file, colnames identical worksheet. column type associated 3-threshold rule, three associated colors. order apply different thresholds, one need call function multiple times, specifying different subsets columns corresponding set thresholds. process required order apply different color gradients different columns. Note styles default \"stacked\", maintains font cell border styles without removing . However, \"stacking\" means applying two rules cell work, since first rule applied 'Microsoft Excel'. Interestingly, multiple conditional rules applied cell, visible order inside 'Microsoft Excel' application.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/applyXlsxConditionalFormat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Xlsx Conditional formatting — applyXlsxConditionalFormat","text":"","code":"# write to tempfile for examples if (check_pkg_installed(\"openxlsx\")) {    out_xlsx <- tempfile(pattern=\"writeOpenxlsx_\", fileext=\".xlsx\")    df <- data.frame(a=LETTERS[1:5], b=1:5);    writeOpenxlsx(x=df,       file=out_xlsx,       sheetName=\"jamba_test\");     applyXlsxConditionalFormat(out_xlsx,       sheet=\"jamba_test\",       intColumns=2,       intRule=c(0,3,5),       intStyle=c(\"#FFFFFF\", \"#1E90FF\", \"#9932CC\")    ) }"},{"path":"https://jmw86069.github.io/jamba/reference/asDate.html","id":null,"dir":"Reference","previous_headings":"","what":"convert date DDmmmYYYY to Date — asDate","title":"convert date DDmmmYYYY to Date — asDate","text":"convert date DDmmmYYYY Date","code":""},{"path":"https://jmw86069.github.io/jamba/reference/asDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert date DDmmmYYYY to Date — asDate","text":"","code":"asDate(getDateValues, dateFormat = \"%d%b%Y\", ...)"},{"path":"https://jmw86069.github.io/jamba/reference/asDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert date DDmmmYYYY to Date — asDate","text":"getDateValues character date, format recognized dateFormat dateFormat character string representing recognized date format, default \"DDmmmYYYY\", recognizes \"23aug2007\". ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/asDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert date DDmmmYYYY to Date — asDate","text":"Date object","code":""},{"path":"https://jmw86069.github.io/jamba/reference/asDate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert date DDmmmYYYY to Date — asDate","text":"function converts text date string Date object, mainly allow date-related math operations, example difftime.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/asDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert date DDmmmYYYY to Date — asDate","text":"","code":"asDate(getDate()); #>    22mar2025  #> \"2025-03-22\""},{"path":"https://jmw86069.github.io/jamba/reference/asSize.html","id":null,"dir":"Reference","previous_headings":"","what":"convert numeric value or R object to human-readable size — asSize","title":"convert numeric value or R object to human-readable size — asSize","text":"convert numeric value R object human-readable size","code":""},{"path":"https://jmw86069.github.io/jamba/reference/asSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert numeric value or R object to human-readable size — asSize","text":"","code":"asSize(   x,   digits = 3,   abbreviateUnits = TRUE,   unitType = \"bytes\",   unitAbbrev = gsub(\"^(.).*$\", \"\\\\1\", unitType),   kiloSize = 1024,   sep = \" \",   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/asSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert numeric value or R object to human-readable size — asSize","text":"x numeric vector, class object_size converted numeric, R object converted single numeric value using utils::object.size(). digits integer number digits used base::format() formatting number create character string abbreviateUnits logical, default TRUE,  whether print abbreviated units, example using k, M, G, T, P instead kilo, mega, Giga, Tera, Peta, respectively. unitType character string indicating base unit measure, default \"bytes\". Note trailing \"s\" removed number singular. unitAbbrev character string indicating abbreviated base unit, default uses first character unitType. kiloSize numeric, default 1024,  number base units converting one \"kilo\" base unit. computer-based size file size object size, value 1024. purposes, scientific monetary numbers, value usually 1000. sep delimiter used numeric value unit, default \" \". ... parameters passed base::format().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/asSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert numeric value or R object to human-readable size — asSize","text":"character vector representing human-friendly size, based upon kiloSize argument determine whether report byte (1024) scientific (1000) units.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/asSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert numeric value or R object to human-readable size — asSize","text":"function returns human-readable size based upon numeric input. Alternatively, input R object, calls utils::object.size() produce single numeric value used produce human-readable size. default behavior report computer size bytes, 1024 considered \"kilo\", however argument kiloSize can used produce values kiloSize=1000 suitable monetary scientific values.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/asSize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert numeric value or R object to human-readable size — asSize","text":"","code":"asSize(c(1, 10,2010,22000,52200)) #> [1] \"1 byte\"   \"10 bytes\" \"1.96 kb\"  \"21.5 kb\"  \"51 kb\"    #> \"1 byte\"   \"10 bytes\" \"2 kb\"     \"21 kb\"    \"51 kb\"  # demonstration of straight numeric units asSize(c(1, 100, 1000, 10000), unitType=\"\", kiloSize=100) #> [1] \"1\"    \"1 k\"  \"10 k\" \"1 M\""},{"path":"https://jmw86069.github.io/jamba/reference/breakDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate more detailed density of numeric values — breakDensity","title":"Calculate more detailed density of numeric values — breakDensity","text":"Calculate detailed density numeric values","code":""},{"path":"https://jmw86069.github.io/jamba/reference/breakDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate more detailed density of numeric values — breakDensity","text":"","code":"breakDensity(   x,   breaks = length(x)/3,   bw = NULL,   width = NULL,   densityBreaksFactor = 3,   weightFactor = 1,   addZeroEnds = TRUE,   baseline = 0,   floorBaseline = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/breakDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate more detailed density of numeric values — breakDensity","text":"x numeric vector breaks numeric breaks described stats::density() except single integer value multiplied densityBreaksFactor. bw character name bandwidth function, NULL. width NULL numeric value indicating width breaks apply. densityBreaksFactor numeric factor adjust width density breaks, higher values result less detail. weightFactor optional vector weights length(x) apply density calculation. addZeroEnds logical indicating whether start end value always zero, can helpful creating polygon. baseline optional numeric value indicating expected baseline, typically zero, can set higher value indicate \"noise floor\". floorBaseline logical indicating whether apply noise floor output data. verbose logical indicating whether print verbose output. ... additional parameters sent stats::density().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/breakDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate more detailed density of numeric values — breakDensity","text":"list output equivalent stats::density(): x: n coordinates points density estimated. y: estimated density values, non-negative, can zero. bw: bandidth used. n: sample size elimination missing values. call: call produced result. data.name: deparsed name x argument. .na: logical compatibility, always FALSE.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/breakDensity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate more detailed density of numeric values — breakDensity","text":"function drop-replacement stats::density(), simply provide quick alternative defaults higher level detail. Detail can adjusted using densityBreaksFactor, higher values use wider step size, thus lowering detail output. Note density height scaled total number points, can adjusted weightFactor. See Examples scale y-axis range similar stats::density().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/breakDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate more detailed density of numeric values — breakDensity","text":"","code":"x <- c(stats::rnorm(15000),    stats::rnorm(5500)*0.25 + 1,    stats::rnorm(12500)*0.5 + 2.5) plot(stats::density(x))   plot(breakDensity(x))   plot(breakDensity(x, densityBreaksFactor=200))   # trim values to show abrupt transitions x2 <- x[x > 0 & x < 4] plot(stats::density(x2), lwd=2) lines(breakDensity(x2, weightFactor=1/length(x2)/10), col=\"red\") graphics::legend(\"topright\", c(\"stats::density()\", \"breakDensity()\"),    col=c(\"black\", \"red\"), lwd=c(2, 1))"},{"path":"https://jmw86069.github.io/jamba/reference/breaksByVector.html","id":null,"dir":"Reference","previous_headings":"","what":"break a vector into groups — breaksByVector","title":"break a vector into groups — breaksByVector","text":"breaks vector groups","code":""},{"path":"https://jmw86069.github.io/jamba/reference/breaksByVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"break a vector into groups — breaksByVector","text":"","code":"breaksByVector(x, labels = NULL, returnFractions = FALSE, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/breaksByVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"break a vector into groups — breaksByVector","text":"x character vector labels labels character vector custom labels represent items x returnFractions logical whether return fractional coordinates labels positioned two labels ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/breaksByVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"break a vector into groups — breaksByVector","text":"list following named elements: \"breakPoints\": mid-point coordinate break. midpoints good drawing dividing lines example. \"labelPoints\": ideal point place label represent group. \"newLabels\": vector labels length input data, except using blank values except label drawn. output good text display. \"useLabels\": unique set labels, without blanks, corresponding coordinates supplied labelPoints. \"breakLengths\": integer size set labels.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/breaksByVector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"break a vector into groups — breaksByVector","text":"function takes vector values, determines \"chunks\" identical values, defines breaks occur. assumes input vector ordered way displayed, labels duplicated consecutively. function defines breakpoints labels change, returns ideal position put single label represent duplicated consecutive set labels. can return fractional coordinates, example label represents two consecutive items, fractional coordinate can used place label two items. function useful things like adding labels imageDefault() color image map sample groupings, may ideal label unique elements contiguous set.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/breaksByVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"break a vector into groups — breaksByVector","text":"","code":"b <- rep(LETTERS[c(1:5, 1)], c(2,3,5,4,3,4)); bb <- breaksByVector(b); # Example showing how labels can be minimized inside a data.frame data.frame(b,    newLabels=bb$newLabels); #>    b newLabels #> 1  A         A #> 2  A           #> 3  B           #> 4  B         B #> 5  B           #> 6  C           #> 7  C           #> 8  C         C #> 9  C           #> 10 C           #> 11 D           #> 12 D         D #> 13 D           #> 14 D           #> 15 E           #> 16 E         E #> 17 E           #> 18 A           #> 19 A         A #> 20 A           #> 21 A            # Example showing how to reposition text labels # so duplicated labels are displayed in the middle # of each group bb2 <- breaksByVector(b, returnFractions=TRUE); ylabs <- c(\"minimal labels\", \"all labels\"); withr::with_par(adjustAxisLabelMargins(ylabs, 2), {    withr::local_par(adjustAxisLabelMargins(bb2$useLabels, 1))    nullPlot(xlim=range(seq_along(b)), ylim=c(0,3),       doBoxes=FALSE, doUsrBox=TRUE);    graphics::axis(2, las=2, at=c(1,2), ylabs);    graphics::text(y=2, x=seq_along(b), b);    graphics::text(y=1, x=bb2$labelPoints, bb2$useLabels);  ## Print axis labels in the center of each group graphics::axis(3,    las=2,    at=bb2$labelPoints,    labels=bb2$useLabels);  ## indicate each region for (i in seq_along(bb2$breakPoints)) {    graphics::axis(1,       at=c(c(0, bb2$breakPoints)[i]+0.8, bb2$breakPoints[i]+0.2),       labels=c(\"\", \"\")); } ## place the label centered in each region without adding tick marks graphics::axis(1,    las=2,    tick=FALSE,    at=bb2$labelPoints,    labels=bb2$useLabels); ## abline to indicate the boundaries, if needed graphics::abline(v=c(0, bb2$breakPoints) + 0.5,    lty=\"dashed\",    col=\"blue\");  })  # The same process is used by imageByColors()"},{"path":"https://jmw86069.github.io/jamba/reference/cPaste.html","id":null,"dir":"Reference","previous_headings":"","what":"paste a list into a delimited vector — cPaste","title":"paste a list into a delimited vector — cPaste","text":"Paste list vectors character vector, values delimited default comma.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/cPaste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"paste a list into a delimited vector — cPaste","text":"","code":"cPaste(   x,   sep = \",\",   doSort = FALSE,   makeUnique = FALSE,   na.rm = FALSE,   keepFactors = FALSE,   checkClass = TRUE,   useBioc = TRUE,   useLegacy = FALSE,   honorFactor = TRUE,   verbose = FALSE,   ... )  cPasteS(   x,   sep = \",\",   doSort = TRUE,   makeUnique = FALSE,   na.rm = FALSE,   keepFactors = FALSE,   checkClass = TRUE,   useBioc = TRUE,   ... )  cPasteSU(   x,   sep = \",\",   doSort = TRUE,   makeUnique = TRUE,   na.rm = FALSE,   keepFactors = FALSE,   checkClass = TRUE,   useBioc = TRUE,   ... )  cPasteUnique(   x,   sep = \",\",   doSort = FALSE,   makeUnique = TRUE,   na.rm = FALSE,   keepFactors = FALSE,   checkClass = TRUE,   useBioc = TRUE,   ... )  cPasteU(   x,   sep = \",\",   doSort = FALSE,   makeUnique = TRUE,   na.rm = FALSE,   keepFactors = FALSE,   checkClass = TRUE,   useBioc = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/cPaste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"paste a list into a delimited vector — cPaste","text":"x list vectors sep character delimiter used paste multiple values together doSort logical indicating whether sort vector using mixedOrder(). makeUnique logical indicating whether make vector input list unique pasting values together. na.rm logical indicating whether remove NA values vector input list. na.rm TRUE list element contains NA values, resulting string \"\". keepFactors logical used useLegacy=TRUE doSort=TRUE; indicating whether preserve factors, keeping factor level order. keepFactors=TRUE, list element factor, elements converted factors. Note step combines overall factor levels, non-factors ordered using base::order() instead jamba::mixedOrder() (now.) checkClass logical, default TRUE, whether check class vector input list. TRUE, confirms class element list processing, prevent conversion may otherwise lose information. cases known vector split list, checkClass=FALSE preferred since one class resulting list elements. approach faster especially large input lists, 10000 . checkClass=FALSE assumes entries can coerced character, fastest, preserve factor levels due R coersion methods used unlist(). useBioc logical indicating whether function try use S4Vectors::unstrsplit() Bioconductor package S4Vectors installed, otherwise use less efficient mapply() operation. useLegacy logical indicating whether enable previous legacy process used cPaste(). honorFactor logical passed mixedSorts(), whether factor vector sorted factor level order. honorFactor=FALSE even factor vectors sorted character vectors, ignoring factor levels. verbose logical indicating whether print verbose output. ... additional arguments passed mixedOrder() doSort=TRUE.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/cPaste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"paste a list into a delimited vector — cPaste","text":"character vector names order input list x.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/cPaste.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"paste a list into a delimited vector — cPaste","text":"cPaste() concatenates vector values using delimiter. cPasteS() sorts vector using mixedSort(). cPasteU() applies uniques() retain unique values per vector. cPasteSU() applies mixedSort() uniques(). function essentially wrapper S4Vectors::unstrsplit() except also optionally applies uniqueness vector list, sorts values vector using mixedOrder(). sorting uniqueness applied unlisted vector values, substantially faster apply family function equivalent. uniqueness performed uniques(), use S4Vectors::unique() available.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/cPaste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"paste a list into a delimited vector — cPaste","text":"","code":"L1 <- list(CA=LETTERS[c(1:4,2,7,4,6)], B=letters[c(7:11,9,3)]);  cPaste(L1); #>                CA                 B  #> \"A,B,C,D,B,G,D,F\"   \"g,h,i,j,k,i,c\"  #               CA                 B # \"A,B,C,D,B,G,D,F\"   \"g,h,i,j,k,i,c\"  cPaste(L1, doSort=TRUE); #>                CA                 B  #> \"A,B,B,C,D,D,F,G\"   \"c,g,h,i,i,j,k\"  #               CA                 B # \"A,B,B,C,D,D,F,G\"   \"c,g,h,i,i,j,k\"  ## The sort can be done with convenience function cPasteS() cPasteS(L1); #>                CA                 B  #> \"A,B,B,C,D,D,F,G\"   \"c,g,h,i,i,j,k\"  #               CA                 B # \"A,B,B,C,D,D,F,G\"   \"c,g,h,i,i,j,k\"  ## Similarly, makeUnique=TRUE and cPasteU() are the same cPaste(L1, makeUnique=TRUE); #>            CA             B  #> \"A,B,C,D,G,F\" \"g,h,i,j,k,c\"  cPasteU(L1); #>            CA             B  #> \"A,B,C,D,G,F\" \"g,h,i,j,k,c\"  #           CA             B # \"A,B,C,D,G,F\" \"g,h,i,j,k,c\"  ## Change the delimiter cPasteSU(L1, sep=\"; \") #>                 CA                  B  #> \"A; B; C; D; F; G\" \"c; g; h; i; j; k\"  #                CA                  B # \"A; B; C; D; F; G\" \"c; g; h; i; j; k\"  # test mix of factor and non-factor L2 <- c(    list(D=factor(letters[1:12],       levels=letters[12:1])),    L1); L2; #> $D #>  [1] a b c d e f g h i j k l #> Levels: l k j i h g f e d c b a #>  #> $CA #> [1] \"A\" \"B\" \"C\" \"D\" \"B\" \"G\" \"D\" \"F\" #>  #> $B #> [1] \"g\" \"h\" \"i\" \"j\" \"k\" \"i\" \"c\" #>  cPasteSU(L2, keepFactors=TRUE); #>                         D                        CA                         B  #> \"l,k,j,i,h,g,f,e,d,c,b,a\"             \"A,B,C,D,F,G\"             \"c,g,h,i,j,k\"   # tricky example with mix of character and factor # and factor levels are inconsistent # end result: factor levels are defined in order they appear L <- list(entryA=c(\"miR-112\", \"miR-12\", \"miR-112\"),    entryB=factor(c(\"A\",\"B\",\"A\",\"B\"),       levels=c(\"B\",\"A\")),    entryC=factor(c(\"C\",\"A\",\"B\",\"B\",\"C\"),       levels=c(\"A\",\"B\",\"C\")),    entryNULL=NULL) L; #> $entryA #> [1] \"miR-112\" \"miR-12\"  \"miR-112\" #>  #> $entryB #> [1] A B A B #> Levels: B A #>  #> $entryC #> [1] C A B B C #> Levels: A B C #>  #> $entryNULL #> NULL #>  cPaste(L); #>                   entryA                   entryB                   entryC  #> \"miR-112,miR-12,miR-112\"                \"A,B,A,B\"              \"C,A,B,B,C\"  #>                entryNULL  #>                       \"\"  cPasteU(L); #>           entryA           entryB           entryC        entryNULL  #> \"miR-112,miR-12\"            \"A,B\"          \"C,A,B\"               \"\"   # by default keepFactors=FALSE, which means factors are sorted as characters cPasteS(L); #>                   entryA                   entryB                   entryC  #> \"miR-12,miR-112,miR-112\"                \"B,B,A,A\"              \"B,B,A,C,C\"  #>                entryNULL  #>                       \"\"  cPasteSU(L); #>           entryA           entryB           entryC        entryNULL  #> \"miR-12,miR-112\"            \"B,A\"          \"B,A,C\"               \"\"  # keepFactors=TRUE will keep unique factor levels in the order they appear # this is the same behavior as unlist(L[c(2,3)]) on a list of factors cPasteSU(L, keepFactors=TRUE); #>           entryA           entryB           entryC        entryNULL  #> \"miR-12,miR-112\"            \"B,A\"          \"B,A,C\"               \"\"  levels(unlist(L[c(2,3)])) #> [1] \"B\" \"A\" \"C\""},{"path":"https://jmw86069.github.io/jamba/reference/call_fn_ellipsis.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely call a function using ellipsis — call_fn_ellipsis","title":"Safely call a function using ellipsis — call_fn_ellipsis","text":"Safely call function using ellipsis","code":""},{"path":"https://jmw86069.github.io/jamba/reference/call_fn_ellipsis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely call a function using ellipsis — call_fn_ellipsis","text":"","code":"call_fn_ellipsis(FUN, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/call_fn_ellipsis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely call a function using ellipsis — call_fn_ellipsis","text":"FUN function called arguments ... ... arguments passed FUN() safe manner.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/call_fn_ellipsis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely call a function using ellipsis — call_fn_ellipsis","text":"output FUN() called relevant named arguments ellipsis ...","code":""},{"path":"https://jmw86069.github.io/jamba/reference/call_fn_ellipsis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safely call a function using ellipsis — call_fn_ellipsis","text":"function wrapper function intended help pass ellipsis arguments ... parent function external function safe way. include arguments ... recognized external function. logic described follows: external function FUN arguments formals() include ellipsis ..., ellipsis ... passed -without change. way, arguments inside original ellipsis ... either match arguments FUN, ignored function ellipsis .... external function FUN arguments formals() include ellipsis ..., named arguments ... passed FUN arguments names recognized FUN. Note arguments therefore must named.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/call_fn_ellipsis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safely call a function using ellipsis — call_fn_ellipsis","text":"","code":"new_mean <- function(x, trim=0, na.rm=FALSE) {    mean(x, trim=trim, na.rm=na.rm) } x <- c(1, 3, 5, NA); new_mean(x, na.rm=TRUE); #> [1] 3 # throws an error as expected (below) tryCatch({    new_mean(x, na.rm=TRUE, color=\"red\") }, error=function(e){    print(\"Error is expected, shown below:\");    print(e) }) #> [1] \"Error is expected, shown below:\" #> <simpleError in new_mean(x, na.rm = TRUE, color = \"red\"): unused argument (color = \"red\")>  call_fn_ellipsis(new_mean, x=x, na.rm=TRUE, color=\"red\") #> [1] 3"},{"path":"https://jmw86069.github.io/jamba/reference/cell_fun_label.html","id":null,"dir":"Reference","previous_headings":"","what":"ComplexHeatmap cell function to label heatmap cells — cell_fun_label","title":"ComplexHeatmap cell function to label heatmap cells — cell_fun_label","text":"ComplexHeatmap cell function label heatmap cells","code":""},{"path":"https://jmw86069.github.io/jamba/reference/cell_fun_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ComplexHeatmap cell function to label heatmap cells — cell_fun_label","text":"","code":"cell_fun_label(   m,   prefix = \"\",   suffix = \"\",   cex = 1,   col_hm = NULL,   outline = FALSE,   abbrev = FALSE,   show = NULL,   rot = 0,   sep = \"\\n\",   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/cell_fun_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ComplexHeatmap cell function to label heatmap cells — cell_fun_label","text":"m numeric matrix list matrix objects. first matrix object must numeric compatible color function col_hm. prefix, suffix character vectors define prefix suffix value m cell. cex numeric adjustment fontsize used label, multiplied default fontsize=10 determine fontsize. col_hm function returned circlize::colorRamp2() function used create heatmap outline logical indicating whether draw outline around heatmap cell abbrev logical indicating whether numeric values abbreviated using jamba::asSize(..., kiloSize=1000) effectively reduces large numbers k thousands, M millions (M Mega), G billions (G Giga), etc. show integer used m supplied list matrices, case show used define values used cell labels. default, matrices used. rot numeric value used rotate cell label text, default 0 horizontal. sep character string, default \"\\n\" newline, used multiple labels per cell, also requires m list, show NULL multiple values. verbose logical indicating whether print verbose output, specifically printing label information position (1, 1). output seen rendering building Heatmap object. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/cell_fun_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ComplexHeatmap cell function to label heatmap cells — cell_fun_label","text":"function sufficient use input ComplexHeatmap::Heatmap() argument cell_fun.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/cell_fun_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ComplexHeatmap cell function to label heatmap cells — cell_fun_label","text":"function serves convenient method add text labels cell heatmap produced ComplexHeatmap::Heatmap(), via argument cell_fun. Note function requires re-using specific color function used heatmap call ComplexHeatmap::Heatmap(). function slightly unique allows multiple labels, m supplied list matrix objects. fact, matrix objects may contain character values custom labels. Cell labels colored based upon heatmap cell color, passed jamba::setTextContrastColor() determine whether use light dark text color optimum contrast. TODO: Option supply logical matrix define subset cells label, example labels meet filter criteria. Alternatively, matrix data supplied m can already filtered. TODO: Allow matrix values contain character data use gridtext custom markdown formatting. process requires slightly different method.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/cell_fun_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ComplexHeatmap cell function to label heatmap cells — cell_fun_label","text":"","code":"m <- matrix(stats::rnorm(16)*2, ncol=4) colnames(m) <- LETTERS[1:4] rownames(m) <- letters[1:4] col_hm <- circlize::colorRamp2(breaks=(-2:2) * 2,    colors=c(\"navy\", \"dodgerblue\", \"white\", \"tomato\", \"red4\"))  # the heatmap can be created in one step hm <- ComplexHeatmap::Heatmap(m,    col=col_hm,    heatmap_legend_param=list(       color_bar=\"discrete\",       border=TRUE,       at=-4:4),    cell_fun=cell_fun_label(m,       col_hm=col_hm)) ComplexHeatmap::draw(hm)   # the cell label function can be created first cell_fun <- cell_fun_label(m,    outline=TRUE,    cex=1.5,    col_hm=col_hm) hm2 <- ComplexHeatmap::Heatmap(m,    col=col_hm,    cell_fun=cell_fun) ComplexHeatmap::draw(hm2)"},{"path":"https://jmw86069.github.io/jamba/reference/checkLightMode.html","id":null,"dir":"Reference","previous_headings":"","what":"check lightMode for light background color — checkLightMode","title":"check lightMode for light background color — checkLightMode","text":"check lightMode light background color","code":""},{"path":"https://jmw86069.github.io/jamba/reference/checkLightMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check lightMode for light background color — checkLightMode","text":"","code":"checkLightMode(lightMode = NULL, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/checkLightMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check lightMode for light background color — checkLightMode","text":"lightMode logical NULL, indicating whether lightMode parameter defined function call. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/checkLightMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check lightMode for light background color — checkLightMode","text":"logical length=1, indicating whether lightMode defined","code":""},{"path":"https://jmw86069.github.io/jamba/reference/checkLightMode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"check lightMode for light background color — checkLightMode","text":"Check lightMode status function parameter, options, environment variable. function defines lightMode, used -. lightMode NULL, options(\"jam.lightMode\") used defined. Otherwise, tries detect whether R session running inside Rstudio using environmental variable \"RSTUDIO\", assumes lightMode==TRUE. set default lightMode, add options(\"jam.lightMode\"=TRUE) .Rprofile, relevant R script.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/checkLightMode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check lightMode for light background color — checkLightMode","text":"","code":"checkLightMode(TRUE); #> [1] TRUE checkLightMode(); #> [1] FALSE"},{"path":"https://jmw86069.github.io/jamba/reference/check_pkg_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Lightweight method to check if an R package is installed — check_pkg_installed","title":"Lightweight method to check if an R package is installed — check_pkg_installed","text":"Lightweight method check R package installed","code":""},{"path":"https://jmw86069.github.io/jamba/reference/check_pkg_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lightweight method to check if an R package is installed — check_pkg_installed","text":"","code":"check_pkg_installed(x, useMethod = c(\"packagedir\", \"requireNamespace\"), ...)"},{"path":"https://jmw86069.github.io/jamba/reference/check_pkg_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lightweight method to check if an R package is installed — check_pkg_installed","text":"x character string package packages test. useMethod character default \"packagedir\" method package confirmation. \"packagedir\" provides rapid test presence R package, without loading package namespace. tests whether system.file(package=x) returns  non-empty value, 'DESCRIPTION' file exists package directory. answers question: \"'x' package installed?\" answer: \"'x' package usable current R session?\" useMethod also includes \"requireNamespace\", FALSE result also perform secondary check well, confirm package loaded another mechanism. \"requireNamespace\" uses requireNamespace(x, quietly=TRUE), slight benefit accepts multiple values x, returns result without using invisible(). method loads package namespace, attach . method therefore takes time loading package, return providing accurate answer question: \"'x' package usable R session right now?\" ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/check_pkg_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lightweight method to check if an R package is installed — check_pkg_installed","text":"logical vector indicating whether value x represents installed R package. vector named packages provided x.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/check_pkg_installed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lightweight method to check if an R package is installed — check_pkg_installed","text":"many methods test installed package. approaches incur time resource penalty, check_pkg_installed() motivated rapid results without loading package namespace. function also accepts multiple values x convenience. two available methods defined useMethod: useMethod=\"packagedir\" confirms: function represents possibly gentle rapid approach. simply calls system.file(package=x), entry x, checks requirements: package directory exist via system.file(package=x) package directory contain file 'DESCRIPTION'? check whether package can loaded current R session. useMethod=\"requireNamespace\" confirms: requireNamespace(x, quietly=TRUE) returns TRUE therefore loads package namespace confirm, attach package current session. therefore may take time resources, despite altering R environment search path. default behavior first tests \"packagedir\", FALSE results also tests \"requireNamespace\".","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/check_pkg_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lightweight method to check if an R package is installed — check_pkg_installed","text":"","code":"check_pkg_installed(\"methods\") #> methods  #>    TRUE   check_pkg_installed(c(\"jamba\",    \"multienrichjam\",    \"venndir\",    \"methods\",    \"blah\")) #>          jamba multienrichjam        venndir        methods           blah  #>           TRUE           TRUE           TRUE           TRUE          FALSE"},{"path":"https://jmw86069.github.io/jamba/reference/col2alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"get R color alpha value — col2alpha","title":"get R color alpha value — col2alpha","text":"Return alpha transparency per R color","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get R color alpha value — col2alpha","text":"","code":"col2alpha(x, maxValue = 1, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/col2alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get R color alpha value — col2alpha","text":"x character R compatible color, either color name, hex value, mixture two. value compatible grDevices::col2rgb(). maxValue numeric maximum value return, useful downstream alpha range 255. default maxValue=1 returned. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get R color alpha value — col2alpha","text":"numeric vector alpha values","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/col2alpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get R color alpha value — col2alpha","text":"","code":"col2alpha(c(\"red\", \"#99004499\", \"beige\", \"transparent\", \"#FFFFFF00\")) #> [1] 1.0 0.6 1.0 0.0 0.0"},{"path":"https://jmw86069.github.io/jamba/reference/col2hcl.html","id":null,"dir":"Reference","previous_headings":"","what":"convert R color to HCL color matrix — col2hcl","title":"convert R color to HCL color matrix — col2hcl","text":"convert R color HCL color matrix","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hcl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert R color to HCL color matrix — col2hcl","text":"","code":"col2hcl(   x,   maxColorValue = 255,   model = getOption(\"jam.model\", c(\"hcl\", \"polarLUV\", \"polarLAB\")),   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/col2hcl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert R color to HCL color matrix — col2hcl","text":"x character R compatible color, either color name, hex value, mixture two. value compatible grDevices::col2rgb(). maxColorValue numeric maximum value return, useful downstream alpha range 255. default maxValue=1 returned. model character color model use \"hcl\" use farver HCL \"polarLUV\" standard R conventional HCL, \"polarLAB\" uses LAB-based HCL values. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hcl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert R color to HCL color matrix — col2hcl","text":"numeric matrix H, C, L values.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hcl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert R color to HCL color matrix — col2hcl","text":"function takes R color converts HCL matrix, using colorspace package, RGB polarLUV functions. also used maintain alpha transparency, enable interconversion via color manipulation functions well. model=\"hcl\" function uses farver::decode_colour() bypasses colorspace. future colorspace dependency likely removed favor using farver. event, model=\"hcl\" equivalent using model=\"polarLUV\" fixup=TRUE, except much faster.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/col2hcl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert R color to HCL color matrix — col2hcl","text":"","code":"col2hcl(\"#FF000044\") #>              [,1] #> H      12.1743993 #> C     179.0489832 #> L      53.2407941 #> alpha   0.2666667"},{"path":"https://jmw86069.github.io/jamba/reference/col2hsl.html","id":null,"dir":"Reference","previous_headings":"","what":"convert R color to HSL color matrix — col2hsl","title":"convert R color to HSL color matrix — col2hsl","text":"convert R color HSL color matrix","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert R color to HSL color matrix — col2hsl","text":"","code":"col2hsl(x, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/col2hsl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert R color to HSL color matrix — col2hsl","text":"x character vector R compatible colors. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hsl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert R color to HSL color matrix — col2hsl","text":"numeric matrix H, S, L color values.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hsl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert R color to HSL color matrix — col2hsl","text":"function takes R color converts HSL matrix, using farver package farver::decode_colour() colorspace package, RGB polarLUV functions. also used maintain alpha transparency, enable interconversion via color manipulation functions well. model=\"hsl\" function uses farver::decode_colour() bypasses colorspace. future colorspace dependency likely removed favor using farver. event, model=\"hsl\" equivalent using model=\"polarLUV\" fixup=TRUE, except much faster.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/col2hsl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert R color to HSL color matrix — col2hsl","text":"","code":"x <- c(\"#FF000044\", \"#FF0000\", \"firebrick\"); names(x) <- x; showColors(x)  xhsl <- col2hsl(x) xhsl #>         #FF000044 #FF0000 firebrick #> H       0.0000000       0   0.00000 #> S     100.0000000     100  67.92453 #> L      50.0000000      50  41.56863 #> alpha   0.2666667       1   1.00000  xhex <- hsl2col(xhsl) showColors(list(x=x,    xhex=xhex),    groupCellnotes=FALSE)   withr::with_par(list(\"mfrow\"=c(4, 4), \"mar\"=c(0.2, 1, 4, 1)), {  for (H in seq(from=0, to=360, length.out=17)[-17]) { S <- 75; Lseq <- seq(from=15, to=95, by=10); hsl_gradient <- hsl2col(    H=H,    S=85,    L=Lseq); hcl_gradient <- hcl2col(    H=H,    C=85,    L=Lseq); names(hsl_gradient) <- Lseq; names(hcl_gradient) <- Lseq; showColors(xaxt=\"n\",    list(       hsl=hsl_gradient,       hcl=hcl_gradient),    main=paste0(\"Hue: \", round(H),       \"\\nSat: \", S,       \"\\nLum: (as labeled)\"),    groupCellnotes=FALSE) } })"},{"path":"https://jmw86069.github.io/jamba/reference/col2hsv.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert R color to HSV matrix — col2hsv","title":"Convert R color to HSV matrix — col2hsv","text":"Convert R color HSV matrix","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hsv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert R color to HSV matrix — col2hsv","text":"","code":"col2hsv(x, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/col2hsv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert R color to HSV matrix — col2hsv","text":"x R color ... additional parameters ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hsv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert R color to HSV matrix — col2hsv","text":"matrix HSV colors","code":""},{"path":"https://jmw86069.github.io/jamba/reference/col2hsv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert R color to HSV matrix — col2hsv","text":"function takes valid R color converts HSV matrix. output can effectively returned R color hsv2col, usually manipulating HSV color matrix.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/col2hsv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert R color to HSV matrix — col2hsv","text":"","code":"# start with a color vector # red and blue with partial transparency colorV <- c(\"#FF000055\", \"#00339999\");  # confirm the hsv matrix maintains transparency col2hsv(colorV); #>            [,1]      [,2] #> h     0.0000000 0.6111111 #> s     1.0000000 1.0000000 #> v     1.0000000 0.6000000 #> alpha 0.3333333 0.6000000  # convert back to the original color hsv2col(col2hsv(colorV)); #> [1] \"#FF000055\" \"#00339999\""},{"path":"https://jmw86069.github.io/jamba/reference/colNum2excelName.html","id":null,"dir":"Reference","previous_headings":"","what":"convert column number to 'Excel' column name — colNum2excelName","title":"convert column number to 'Excel' column name — colNum2excelName","text":"convert column number 'Excel' column name","code":""},{"path":"https://jmw86069.github.io/jamba/reference/colNum2excelName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert column number to 'Excel' column name — colNum2excelName","text":"","code":"colNum2excelName(x, useLetters = LETTERS, zeroVal = \"a\", ...)"},{"path":"https://jmw86069.github.io/jamba/reference/colNum2excelName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert column number to 'Excel' column name — colNum2excelName","text":"x integer vector useLetters character vector single-digit characters use digits resulting column name. Note characters can almost length, content. zeroVal character single-digit used whenever x==0, prefix negative values. theory negative input values, basic mechanism used handle possibility. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/colNum2excelName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert column number to 'Excel' column name — colNum2excelName","text":"character vector length(x)","code":""},{"path":"https://jmw86069.github.io/jamba/reference/colNum2excelName.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert column number to 'Excel' column name — colNum2excelName","text":"purpose convert integer column number valid 'Excel' column name, using LETTERS starting . function implements arbitrary number digits, may may compatible version 'Excel'.  18,278 columns maximum three digits, \"\" \"ZZZ\". function useful referencing 'Excel' columns via another interface via openxlsx. also used makeNames() numberStyle=\"letters\", order provide letter suffix values. One can somewhat manipulate allowed column names via useLetters argument, default uses entire 26-letter Western alphabet.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/colNum2excelName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert column number to 'Excel' column name — colNum2excelName","text":"","code":"colNum2excelName(1:30) #>  [1] \"A\"  \"B\"  \"C\"  \"D\"  \"E\"  \"F\"  \"G\"  \"H\"  \"I\"  \"J\"  \"K\"  \"L\"  \"M\"  \"N\"  \"O\"  #> [16] \"P\"  \"Q\"  \"R\"  \"S\"  \"T\"  \"U\"  \"V\"  \"W\"  \"X\"  \"Y\"  \"Z\"  \"AA\" \"AB\" \"AC\" \"AD\""},{"path":"https://jmw86069.github.io/jamba/reference/color2gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a color gradient — color2gradient","title":"Make a color gradient — color2gradient","text":"Make color gradient","code":""},{"path":"https://jmw86069.github.io/jamba/reference/color2gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a color gradient — color2gradient","text":"","code":"color2gradient(   col,   n = NULL,   gradientWtFactor = NULL,   dex = 1,   reverseGradient = TRUE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/color2gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a color gradient — color2gradient","text":"col type recognized R color input : character vector one individual colors, color expanded gradient length n, n recycled number unique colors. value n applied order colors appear col. list color vectors vector contains one repeated color character vector repeated colors, n defined number color present. n integer vector length one , defines number colors return gradient. n=0 duplicated colors expanded gradient. gradientWtFactor numeric fraction representing amount expand color toward maximum brightness darkness. recommended use dex argument. gradientWtFactor=NULL value calculated based upon number colors requested, initial luminance HCL space starting color. gradientWtFactor defined, values recycled length(col), can independently applied color. dex numeric value apply dramatic dark expansion, : dex > 1 make gradient dramatic, values dex < 1 make gradient less dramatic, considered fractions 1/x. dex < 0 make gradient less dramatic, values internally converted fractions using 1/(2 + abs(dex)) reverseGradient logical whether return light--dark gradient (TRUE) dark--light gradient (FALSE). verbose logical whether print verbose output. ... parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/color2gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a color gradient — color2gradient","text":"character vector R colors.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/color2gradient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a color gradient — color2gradient","text":"function converts single color color gradient expanding initial color lighter darker colors around central color. amount gradient expansion controlled gradientWtFactor, weight factor scaled maximum available range bright dark colors. extension, function can take vector colors, expand color gradient, number colors. vector supplied contains repeated colors, colors expanded -place gradient, bypassing value n. list supplied, list returned length, vector inside list color gradient length specified n. input list contains multiple values, first color used define color gradient.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/color2gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a color gradient — color2gradient","text":"","code":"# given a list, it returns a list x <- color2gradient(list(Reds=c(\"red\"), Blues=c(\"blue\")), n=c(4,7)); showColors(x);   # given a vector, it returns a vector xv <- color2gradient(c(red=\"red\", blue=\"blue\"), n=c(4,7)); showColors(xv);   # Expand colors in place # This process is similar to color jittering colors1 <- c(\"red\",\"blue\")[c(1,1,2,2,1,2,1,1)]; names(colors1) <- colors1; colors2 <- color2gradient(colors1); showColors(list(`Input colors`=colors1, `Output colors`=colors2));   # You can do the same using a list intermediate colors1L <- split(colors1, colors1); showColors(colors1L);  colors2L <- color2gradient(colors1L); showColors(colors2L);   # comparison of fixed gradientWtFactor with dynamic gradientWtFactor showColors(list(    `dynamic\\ngradientWtFactor\\ndex=1`=color2gradient(       c(\"yellow\", \"navy\", \"firebrick\", \"orange\"),       n=3,       gradientWtFactor=NULL,       dex=1),    `dynamic\\ngradientWtFactor\\ndex=2`=color2gradient(       c(\"yellow\", \"navy\", \"firebrick\", \"orange\"),       n=3,       gradientWtFactor=NULL,       dex=2),    `fixed\\ngradientWtFactor=2/3`=color2gradient(       c(\"yellow\", \"navy\", \"firebrick\", \"orange\"),       n=3,       gradientWtFactor=2/3,       dex=1) ))"},{"path":"https://jmw86069.github.io/jamba/reference/color_dither.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dithered color pattern light-dark — color_dither","title":"Make dithered color pattern light-dark — color_dither","text":"Make dithered color pattern light-dark","code":""},{"path":"https://jmw86069.github.io/jamba/reference/color_dither.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dithered color pattern light-dark — color_dither","text":"","code":"color_dither(   x,   L_diff = 4,   L_max = 90,   L_min = 30,   min_contrast = 1.25,   direction = 1,   returnType = c(\"vector\", \"list\", \"matrix\"),   debug = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/color_dither.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dithered color pattern light-dark — color_dither","text":"x character vector R colors L_diff numeric value added subtracted L HSL color space color, contrast least min_contrast. L_max, L_min numeric values define permitted range L values HSL color space, ranges 0 100. min_contrast numeric minimum contrast defined colorspace::contrast_ratio() input potential output color. direction numeric defines initial direction, values >= 0 start making colors lighter, values < 0 make colors darker. returnType character string defines output function: vector: two colors every input color x matrix: two rows, input colors first row, output colors second row list: list two colors element, input output colors together vector. debug logical indicating whether plot color iterations using showColors(). ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/color_dither.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make dithered color pattern light-dark — color_dither","text":"format defined argument returnType: vector: two colors every input color x matrix: two rows, input colors first row, output colors second row list: list two colors element, input output colors together vector.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/color_dither.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make dithered color pattern light-dark — color_dither","text":"function serves simple purpose, mainly printDebug() use subtle alternating light/dark colors vector output. takes color returns two colors slightly lighter darker , minimum contrast defined colorspace::contrast_ratio().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/color_dither.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make dithered color pattern light-dark — color_dither","text":"","code":"x <- \"firebrick1\"; showColors(color_dither(x))   showColors(color_dither(x, direction=-1))   x <- vigrep(\"^green[0-9]\", grDevices::colors()) showColors(color_dither(x))  showColors(color_dither(x, direction=-1, returnType=\"list\"))   x <- c(\"green1\", \"cyan\", \"blue\", \"red\", \"gold\", \"yellow\", \"pink\") showColors(color_dither(x))   color_dither(x, debug=TRUE)  #>  [1] \"green1\"  \"#00D600\" \"cyan\"    \"#00D6D6\" \"blue\"    \"#3D3DFF\" \"red\"     #>  [8] \"#FF5252\" \"gold\"    \"#FFF4B8\" \"yellow\"  \"#D6D600\" \"pink\"    \"#FF97A9\""},{"path":"https://jmw86069.github.io/jamba/reference/coordPresets.html","id":null,"dir":"Reference","previous_headings":"","what":"Process coordinate adjustment presets — coordPresets","title":"Process coordinate adjustment presets — coordPresets","text":"Process coordinate adjustment presets","code":""},{"path":"https://jmw86069.github.io/jamba/reference/coordPresets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process coordinate adjustment presets — coordPresets","text":"","code":"coordPresets(   preset = \"default\",   x = 0,   y = 0,   adjPreset = \"default\",   adjX = 0.5,   adjY = 0.5,   adjOffsetX = 0,   adjOffsetY = 0,   preset_type = c(\"plot\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/coordPresets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process coordinate adjustment presets — coordPresets","text":"preset character vector coordinate positions, default \"default\" use x,y coordinates. Recognized terms: center, bottom, top, left, right, topleft, topright, bottomleft, bottomright. x, y numeric vectors indicating default coordinates x,y. adjPreset character vector text label positions, default \"default\" use preset, preset=\"default\" adjX,adjY values used. Recognized terms: center, bottom, top, left, right, topleft, topright, bottomleft, bottomright. adjX, adjY numeric vectors indicating default text adjustment values, described adj graphics::text(). adjOffsetX, adjOffsetY numeric vector used apply offset value adjX,adjY values, positive values place label farther away center. Note units relative text label size, used graphics::text(), larger labels adjusted smaller labels. preset_type character string indicating reference point preset boundaries: \"plot\" uses plot border. \"margin\" uses margin border. Note margin used inner margin around plot figure, outer margin may applied around multi-panel plot figures. verbose logical indicating whether print verbose output. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/coordPresets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process coordinate adjustment presets — coordPresets","text":"data.frame adjustment, number rows determined longest input argument, colnames: x y adjX adjY preset adjPreset","code":""},{"path":"https://jmw86069.github.io/jamba/reference/coordPresets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process coordinate adjustment presets — coordPresets","text":"function intended convenient way define coordinates using preset terms like \"topleft\", \"bottom\", \"center\". Similarly, intended help define corresponding text adjustments, using adj compatible graphics::text(), using preset terms like \"bottomright\", \"center\". preset \"default\", original x,y coordinates used. Otherwise x,y coordinates defined using plot region coordinates, \"left\" uses graphics::par(\"usr\")[1], \"top\" uses graphics::par(\"usr\")[4]. adjPreset \"default\" use preset define reciprocal text placement. example preset=\"topright\" text placement equivalent adjPreset=\"bottomleft\". adjPreset terms \"top\", \"bottom\", \"right\", \"left\", \"center\" refer text label placement relative x,y coordinate. preset=\"default\" adjPreset=\"default\" original adjX,adjY values returned. function vectorized, uses longest input argument, one can supply vector preset return coordinates adjustments length equal input preset vector. preset value takes priority supplied x,y coordinates.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/coordPresets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process coordinate adjustment presets — coordPresets","text":"","code":"# determine coordinates presetV <- c(\"top\",    \"bottom\",    \"left\",    \"right\",    \"topleft\"); cp1 <- coordPresets(preset=presetV); cp1; #>     x   y adjX adjY  preset adjPreset #> 1 0.5 1.0  0.5  1.0     top   default #> 2 0.5 0.0  0.5  0.0  bottom   default #> 3 0.0 0.5  0.0  0.5    left   default #> 4 1.0 0.5  1.0  0.5   right   default #> 5 0.0 1.0  0.0  1.0 topleft   default  # make sure to prepare the plot region first jamba::nullPlot(plotAreaTitle=\"\"); graphics::points(cp1$x, cp1$y, pch=20, cex=2, col=\"red\");  # unfortunately graphics::text() does not have vectorized adj # so it must iterate each row graphics::title(main=\"graphics::text() is not vectorized, text is adjacent to edges\") for (i in seq_along(presetV)) {    graphics::text(cp1$x[i], cp1$y[i],       labels=presetV[i],       adj=c(cp1$adjX[i], cp1$adjY[i])); }   # drawLabels() will be vectorized for unique adj subsets # and adds a small buffer around text jamba::nullPlot(plotAreaTitle=\"\"); graphics::title(main=\"drawLabels() is vectorized, includes small buffer\") drawLabels(txt=presetV,    preset=presetV)   jamba::nullPlot(plotAreaTitle=\"\"); graphics::title(main=\"drawLabels() can place labels outside plot edges\") drawLabels(txt=presetV,    preset=presetV,    adjPreset=presetV)   # drawLabels() is vectorized for example jamba::nullPlot(plotAreaTitle=\"\"); graphics::title(main=\"Use adjPreset to position labels at a center point\") presetV2 <- c(\"topleft\",    \"topright\",    \"bottomleft\",    \"bottomright\"); cp2 <- coordPresets(preset=\"center\",    adjPreset=presetV2,    adjOffsetX=0.1,    adjOffsetY=0.4); graphics::points(cp2$x,    cp2$y,    pch=20,    cex=2,    col=\"red\"); drawLabels(x=cp2$x,    y=cp2$y,    adjX=cp2$adjX,    adjY=cp2$adjY,    txt=presetV2,    boxCexAdjust=c(1.15,1.6),    labelCex=1.3,    lx=rep(1.5, 4),    ly=rep(1.5, 4))   # demonstrate margin coordinates withr::with_par(list(\"oma\"=c(1, 1, 1, 1)), { nullPlot(xlim=c(0, 1), ylim=c(1, 5)); cpxy <- coordPresets(rep(c(\"top\", \"bottom\", \"left\", \"right\"), each=2),    preset_type=rep(c(\"plot\", \"figure\"), 4)); drawLabels(preset=c(\"top\", \"top\"),    txt=c(\"top label relative to figure\",       \"top label relative to plot\"),    preset_type=c(\"figure\", \"plot\")) graphics::points(cpxy$x, cpxy$y, cex=2,    col=\"red4\", bg=\"red1\", xpd=NA,    pch=rep(c(21, 23), 4)) })"},{"path":"https://jmw86069.github.io/jamba/reference/dateToDaysOld.html","id":null,"dir":"Reference","previous_headings":"","what":"convert date to age in days — dateToDaysOld","title":"convert date to age in days — dateToDaysOld","text":"convert date age days","code":""},{"path":"https://jmw86069.github.io/jamba/reference/dateToDaysOld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert date to age in days — dateToDaysOld","text":"","code":"dateToDaysOld(testDate, nowDate = Sys.Date(), units = \"days\", ...)"},{"path":"https://jmw86069.github.io/jamba/reference/dateToDaysOld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert date to age in days — dateToDaysOld","text":"testDate character date recognized asDate(), representing test date. nowDate character date recognized asDate(), representing reference date, default current day. units character indicating units, used difftime(). ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/dateToDaysOld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert date to age in days — dateToDaysOld","text":"integer value number calendar days current date, nowDate supplied.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/dateToDaysOld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert date to age in days — dateToDaysOld","text":"","code":"dateToDaysOld(\"23aug2007\") #> [1] 6421"},{"path":"https://jmw86069.github.io/jamba/reference/decideMfrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Decide plot panel rows, columns for graphics::par(mfrow) — decideMfrow","title":"Decide plot panel rows, columns for graphics::par(mfrow) — decideMfrow","text":"Decide plot panel rows, columns graphics::par(mfrow)","code":""},{"path":"https://jmw86069.github.io/jamba/reference/decideMfrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decide plot panel rows, columns for graphics::par(mfrow) — decideMfrow","text":"","code":"decideMfrow(   n,   method = c(\"aspect\", \"wide\", \"tall\"),   doTest = FALSE,   xyratio = 1,   trimExtra = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/decideMfrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decide plot panel rows, columns for graphics::par(mfrow) — decideMfrow","text":"n integer number plot panels method character string indicating type layout favor. \"aspect\" uses device size aspect ratio plot try maintain roughly square plot panels. \"wide\" tries keep columns rows similar, erring side columns rows. \"tall\" tries keep columns rows similar, erring side rows columns. doTest logical whether provide visual test. Note n required number plot panels requested. xyratio numeric default 1, desired target x--y ratio. example, plots slightly wider (x width) tall (y height), use xyratio=1.3. observed device aspect ratio divided xyratio determine target aspect ratio plot panels. trimExtra logical default TRUE, whether trim blank rows columns expected layout entirely blank. example, n=4 may produce c(3, 2) output meet desired aspect ratio, however trimExtra=TRUE reduced c(2, 2) minimize unused whitespace. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/decideMfrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decide plot panel rows, columns for graphics::par(mfrow) — decideMfrow","text":"numeric vector length=2, recommended number plot rows columns, respectively. intended used directly form: graphics::par(\"mfrow\"=decideMfrow(n=5))","code":""},{"path":"https://jmw86069.github.io/jamba/reference/decideMfrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decide plot panel rows, columns for graphics::par(mfrow) — decideMfrow","text":"function returns recommended rows columns panels used graphics::par(\"mfrow\") R base plotting. attempts use device size plot aspect ratio keep panels roughly square. example, short-wide device columns panels rows; tall-thin device rows columns. doTest=TRUE argument create n number panels recommended layout, visual example. Note function calls getPlotAspect(), therefore plot device currently open, call graphics::par() open new graphics device.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/decideMfrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decide plot panel rows, columns for graphics::par(mfrow) — decideMfrow","text":"","code":"# display a test visualization showing 6 panels withr::with_par(list(\"mar\"=c(2, 2, 2, 2)), { decideMfrow(n=6, doTest=TRUE); })  #> [1] 3 2  # use a custom target xyratio of plot panels withr::with_par(list(\"mar\"=c(2, 2, 2, 2)), { decideMfrow(n=3, xyratio=3, doTest=TRUE); })  #> [1] 3 1  # a manual demonstration creating 6 panels n <- 6; withr::with_par(list(    \"mar\"=c(2, 2, 2, 2),    \"mfrow\"=decideMfrow(n)), { for(i in seq_len(n)){    nullPlot(plotAreaTitle=paste(\"Plot\", i)); } })"},{"path":"https://jmw86069.github.io/jamba/reference/deg2rad.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert degrees to radians — deg2rad","title":"Convert degrees to radians — deg2rad","text":"Convert degrees radians","code":""},{"path":"https://jmw86069.github.io/jamba/reference/deg2rad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert degrees to radians — deg2rad","text":"","code":"deg2rad(x, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/deg2rad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert degrees to radians — deg2rad","text":"x numeric vector, expected degree values zero 360. ... parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/deg2rad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert degrees to radians — deg2rad","text":"numeric vector coverting degrees radians.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/deg2rad.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert degrees to radians — deg2rad","text":"function simply converts degrees range 0 360, radians range zero pi*2.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/deg2rad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert degrees to radians — deg2rad","text":"","code":"deg2rad(rad2deg(c(pi*2, pi/2)))/pi; #> [1] 2.0 0.5"},{"path":"https://jmw86069.github.io/jamba/reference/drawLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw text labels on a base R plot — drawLabels","title":"Draw text labels on a base R plot — drawLabels","text":"Draw text labels base R plot","code":""},{"path":"https://jmw86069.github.io/jamba/reference/drawLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw text labels on a base R plot — drawLabels","text":"","code":"drawLabels(   txt = NULL,   newCoords = NULL,   x = NULL,   y = NULL,   lx = NULL,   ly = NULL,   segmentLwd = 1,   segmentCol = \"#00000088\",   drawSegments = TRUE,   boxBorderColor = \"#000000AA\",   boxColor = \"#FFEECC\",   boxLwd = 1,   drawBox = TRUE,   drawLabels = TRUE,   font = 1,   labelCex = 0.8,   boxCexAdjust = 1.9,   labelCol = alpha2col(alpha = 0.8, setTextContrastColor(boxColor)),   doPlot = TRUE,   xpd = NA,   preset = \"default\",   adjPreset = \"default\",   preset_type = \"plot\",   adjX = 0.5,   adjY = 0.5,   panelWidth = \"default\",   trimReturns = TRUE,   text_fn = getOption(\"jam.text_fn\", graphics::text),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/drawLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw text labels on a base R plot — drawLabels","text":"txt character vector labels, length equal x y. newCoords data.frame optional, typically result previous call drawLabels(). general, contain colnames equivalent function parameters drawLabels(). x, y numeric vector x- y- coordinates. lx, ly numeric optional vector segment endpoint coordinates, used draw line x,y coordinates segment lx,ly coordinate. segmentLwd, segmentCol numeric vector segment line widths, character colors, respectively. vector recycled length(txt) needed. drawSegments logical whether draw segments, applicable. boxBorderColor character vector colors used box border around label. boxColor character vector colors used box background behind label. boxLwd numeric vector box line widths, sent graphics::rect(), vector recycled length(txt). drawBox logical whether draw boxes behind text label. drawLabels logical whether draw text label. font integer vector font values described graphics::par(), 1=normal, 2=bold, 3=italics, 4=bold-italics. labelCex numeric vector cex values used text labels, recycled length(txt) needed. boxCexAdjust numeric vector length=2, used expand x-width y-height box around around text labels. labelCol character vector label colors, default calls jamba::setTextContrastColor() generate color contrast background box color. doPlot logical whether perform plot operations. Set FALSE calculate coordinates return data.frame label coordinates, can manipulated calling drawLabels() . xpd logical value compatible graphics::par(\"xpd\"), NA allows labels anywhere device region, TRUE retricts labels within figure region, FALSE restricts labels within plot region. preset character vector passed coordPresets() used position text labels relative x,y coordinate, \"topleft\" position label entire label box top-left point, therefore point bottom-right corner label box. preset anything \"none\" adjX adjY values ignored. preset_type, adjPreset character passed coordPresets() define orientation label relative x,y coordinate. adjX, adjY numeric text adjustment labels relative x,y coordinate. values recycled length(txt). panelWidth character string vector, recycled number labels displayed. argument indicates whether size label box relative plot panel width, intended label preset adjPreset set label inside plot panel, e.g. preset=\"top\", adjPreset=\"top\", preset=\"topleft\", adjPreset=\"topright\". Either centered, one \"right\" \"left\". cases, label box expanded full plot panel width, thus filling full visible x-axis range plot panel. Allowed values panelWidth: \"default\" size label boxes text dimensions \"force\" size label full plot panel width \"minimum\" size label least plot panel width, larger necessary fit text label \"maximum\" size label text label width, larger plot panel width trimReturns logical whether trim leading trailing return (newline) characters labels. text_fn function used render text, default checks getOption(\"jam.text_fn\", graphics::text) defaults graphics::text. argument specifically enable jamba::shadowText(), example text_fn=jamba::shadowText. Previous version 0.0.107.900, one assign text <- jamba::shadowText however option removed make jamba compliant recommended R code, ready CRAN. verbose logical whether print verbose output. ... additional arguments passed graphics::segments() segments drawn, graphics::rect() label boxes drawn, graphics::text() text labels drawn.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/drawLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw text labels on a base R plot — drawLabels","text":"invisible data.frame containing label coordinates used draw labels. data.frame can manipulated provided input drawLabels() subsequent customized label positioning.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/drawLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw text labels on a base R plot — drawLabels","text":"function takes vector coordinates text labels, draws labels colored rectangles around label plot. label can unique font, cex, color, drawn using vectorized operations. enable shadow text include argument: text_fn=jamba::shadowText TODO: future allow rotated text labels. useful within plot panel, sometimes useful draw outside plot, example axis labels.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/drawLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw text labels on a base R plot — drawLabels","text":"","code":"nullPlot(plotAreaTitle=\"\"); dl_topleft <- drawLabels(x=graphics::par(\"usr\")[1],    y=graphics::par(\"usr\")[4],    txt=\"Top-left\\nof plot\",    preset=\"topleft\",    boxColor=\"blue4\");  drawLabels(x=graphics::par(\"usr\")[2],    y=graphics::par(\"usr\")[3],    txt=\"Bottom-right\\nof plot\",    preset=\"bottomright\",    boxColor=\"green4\");  drawLabels(x=mean(graphics::par(\"usr\")[1:2]),    y=mean(graphics::par(\"usr\")[3:4]),    txt=\"Center\\nof plot\",    preset=\"center\",    boxColor=\"purple3\");  graphics::points(x=c(graphics::par(\"usr\")[1], graphics::par(\"usr\")[2],       mean(graphics::par(\"usr\")[1:2])),    y=c(graphics::par(\"usr\")[4], graphics::par(\"usr\")[3],       mean(graphics::par(\"usr\")[3:4])),    pch=20,    col=\"red\",    xpd=NA);   nullPlot(plotAreaTitle=\"\"); graphics::title(main=\"place label across the full top plot panel\", line=2.5) dl_top <- drawLabels(    txt=c(\"preset='topright', adjPreset='topright', \\npanelWidth='force'\",       \"preset='topright',\\nadjPreset='bottomleft'\",       \"preset='bottomleft', adjPreset='topright',\\npanelWidth='force'\"),    preset=c(\"topright\", \"topright\", \"bottomleft\"),    adjPreset=c(\"topleft\", \"bottomleft\", \"topright\"),    panelWidth=c(\"force\", \"none\", \"force\"),    boxColor=c(\"red4\",       \"blue4\",       \"purple3\")); graphics::box(lwd=2);   withr::with_par(list(\"mfrow\"=c(1, 3), \"xpd\"=TRUE), {  isub <- c(force=\"Always full panel width\",    minimum=\"At least full panel width or larger\",    maximum=\"No larger than panel width\"); for (i in c(\"force\", \"minimum\", \"maximum\")) { nullPlot(plotAreaTitle=\"\", doMargins=FALSE); graphics::title(main=paste0(\"panelWidth='\", i, \"'\\n\",    isub[i])); drawLabels(labelCex=1.2,    txt=c(\"Super-wide title across the top\\npanelWidth='force'\",    \"bottom label\"),    preset=c(\"top\", \"bottom\"),    panelWidth=i,    boxColor=\"red4\") } })"},{"path":"https://jmw86069.github.io/jamba/reference/exp2signed.html","id":null,"dir":"Reference","previous_headings":"","what":"exponentiate log2 values with directionality — exp2signed","title":"exponentiate log2 values with directionality — exp2signed","text":"exponentiate log2 values directionality","code":""},{"path":"https://jmw86069.github.io/jamba/reference/exp2signed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exponentiate log2 values with directionality — exp2signed","text":"","code":"exp2signed(x, offset = 1, base = 2, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/exp2signed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"exponentiate log2 values with directionality — exp2signed","text":"x numeric vector offset numeric subtracted exponentiated values prior multiplying sign(x). base numeric value indicating logarithmic base used. example base=2 indicates values transformed using log2(). ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/exp2signed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"exponentiate log2 values with directionality — exp2signed","text":"numeric vector exponentiated values.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/exp2signed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"exponentiate log2 values with directionality — exp2signed","text":"function reciprocal log2signed(). #' exponentiates absolute values x, subtracts offset, multiplies results sign(x). offset typically used maintain directionality values log transformation requiring absolute values 1 larger, thus default offset=1.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/exp2signed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exponentiate log2 values with directionality — exp2signed","text":"","code":"x <- c(-100:100)/10; z <- log2signed(x); #plot(x=x, y=z, xlab=\"x\", ylab=\"log2signed(x)\") plot(x=x, y=exp2signed(z), xlab=\"x\", ylab=\"exp2signed(log2signed(x))\")  plot(x=z, y=exp2signed(z), xlab=\"log2signed(x)\", ylab=\"exp2signed(log2signed(x))\")"},{"path":"https://jmw86069.github.io/jamba/reference/fillBlanks.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill blank entries in a vector — fillBlanks","title":"Fill blank entries in a vector — fillBlanks","text":"Fill blank entries vector","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fillBlanks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill blank entries in a vector — fillBlanks","text":"","code":"fillBlanks(x, blankGrep = c(\"[ \\t]*\"), first = \"\", ...)"},{"path":"https://jmw86069.github.io/jamba/reference/fillBlanks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill blank entries in a vector — fillBlanks","text":"x character vector blankGrep vector grep patterns, NA, indicating type entry considered blank. blankGrep pattern searched using jamba::proigrep(), default uses case-insensitive regular expression pattern matching. first options character string intended first entry x blank. default \"\" used. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fillBlanks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill blank entries in a vector — fillBlanks","text":"character vector blank entries filled recent non-blank value.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fillBlanks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill blank entries in a vector — fillBlanks","text":"function takes character vector fills blank (missing) entries last non-blank entry vector. intended situations like imported 'Excel' data, may one header value representing series cells. method used loop data, scale fairly well good efficiency even extremely large vectors.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/fillBlanks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill blank entries in a vector — fillBlanks","text":"","code":"x <- c(\"A\", \"\", \"\", \"\", \"B\", \"C\", \"\", \"\", NA,    \"D\", \"\", \"\", \"E\", \"F\", \"G\", \"\", \"\"); data.frame(x, fillBlanks(x)); #>       x fillBlanks.x. #> 1     A             A #> 2                   A #> 3                   A #> 4                   A #> 5     B             B #> 6     C             C #> 7                   C #> 8                   C #> 9  <NA>          <NA> #> 10    D             D #> 11                  D #> 12                  D #> 13    E             E #> 14    F             F #> 15    G             G #> 16                  G #> 17                  G"},{"path":"https://jmw86069.github.io/jamba/reference/fixYellow.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix yellow color — fixYellow","title":"Fix yellow color — fixYellow","text":"Fix yellow color less green default \"yellow\"","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fixYellow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix yellow color — fixYellow","text":"","code":"fixYellow(col, Hrange = c(70, 100), Hshift = -20, fixup = TRUE, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/fixYellow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix yellow color — fixYellow","text":"col R color, either hex color format using values grDevices::colors(). Hrange numeric vector whose range defines region hues adjusted. default hues 80 90 adjusted. NULL, HCL return unchanged. Hshift numeric value length one, used adjust hue colors within range Hrange. NULL, HCL return unchanged. fixup logical, default TRUE, whether apply fixup resulting color, passed hcl2col() ... additional arguments passed col2hcl(), hcl2col().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fixYellow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix yellow color — fixYellow","text":"returns vector R colors length input col. event col, Hrange, Hshift length 0, step conversion produces length 0, original col returned.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fixYellow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fix yellow color — fixYellow","text":"function \"fixes\" color yellow, default appears green especially darkened. effect function make yellows appear red, appears visibly yellow even color darkened. function intended tolerant missing values. example values col, Hrange, Hshift length 0, original col returned unchanged.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/fixYellow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix yellow color — fixYellow","text":"","code":"yellows <- vigrep(\"yellow\", grDevices::colors()); fixedYellows <- fixYellow(yellows); showColors(list(yellows=yellows,    fixedYellows=fixedYellows));"},{"path":"https://jmw86069.github.io/jamba/reference/fixYellowHue.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix yellow color hue — fixYellowHue","title":"Fix yellow color hue — fixYellowHue","text":"Fix yellow color hue less green default \"yellow\"","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fixYellowHue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix yellow color hue — fixYellowHue","text":"","code":"fixYellowHue(HCL, Hrange = c(80, 90), Hshift = -15, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/fixYellowHue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix yellow color hue — fixYellowHue","text":"HCL numeric matrix HCL color values, returned col2hcl(), requiring one rowname \"H\" representing color hue scale 0 360. input data contain numeric values rowname \"H\", HCL return unchanged. Hrange numeric vector whose range defines region hues adjusted. default hues 80 90 adjusted. NULL, HCL return unchanged. Hshift numeric value length one, used adjust hue colors within range Hrange. NULL, HCL return unchanged. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fixYellowHue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix yellow color hue — fixYellowHue","text":"returns input HCL data rowname \"H\" hue values adjusted accordingly. event HCL, Hrange, Hshift length 0, original HCL returned. input data meet expected format, input HCL returned unchanged.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/fixYellowHue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fix yellow color hue — fixYellowHue","text":"function \"fixes\" color yellow, default appears green especially darkened. effect function make yellows appear red, appears visibly yellow even color darkened. function intended tolerant missing values. example values HCL, Hrange, Hshift length 0, original HCL returned unchanged.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/fixYellowHue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix yellow color hue — fixYellowHue","text":"","code":"yellows <- vigrep(\"yellow\", grDevices::colors()); yellowsHCL <- col2hcl(yellows); fixedYellowsHCL <- fixYellowHue(yellowsHCL); fixedYellows <- hcl2col(fixedYellowsHCL); showColors(list(yellows=yellows,    fixedYellows=fixedYellows));"},{"path":"https://jmw86069.github.io/jamba/reference/formatInt.html","id":null,"dir":"Reference","previous_headings":"","what":"Format an integer as a string — formatInt","title":"Format an integer as a string — formatInt","text":"Format integer string","code":""},{"path":"https://jmw86069.github.io/jamba/reference/formatInt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format an integer as a string — formatInt","text":"","code":"formatInt(   x,   big.mark = \",\",   trim = TRUE,   forceInteger = TRUE,   scientific = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/formatInt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format an integer as a string — formatInt","text":"x numeric vector matrix big.mark, trim, scientific passed base::format() configured defaults intended integer values: big.mark=\",\" adds comma thousands. trim=TRUE trim excess whitespace. scientific=FALSE prevent exponential notation. forceInteger logical, default TRUE, whether round numeric integer prior calling base::format(). ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/formatInt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format an integer as a string — formatInt","text":"character vector x vector, x matrix matrix returned.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/formatInt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format an integer as a string — formatInt","text":"function quick wrapper function around base::format() display integer values text strings. also return matrix input matrix.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/formatInt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format an integer as a string — formatInt","text":"","code":"x <- c(1234, 1234.56, 1234567.89); ## By default, commas are used for big.mark, and decimal values are hidden formatInt(x); #> [1] \"1,234\"     \"1,235\"     \"1,234,568\"  ## By default, commas are used for big.mark formatInt(x, forceInteger=FALSE); #> [1] \"1,234.00\"     \"1,234.56\"     \"1,234,567.89\""},{"path":"https://jmw86069.github.io/jamba/reference/getAxisLabel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get axis label for minorLogTicks — getAxisLabel","title":"Get axis label for minorLogTicks — getAxisLabel","text":"Get axis label minorLogTicks","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getAxisLabel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get axis label for minorLogTicks — getAxisLabel","text":"","code":"getAxisLabel(   i,   asValues,   logAxisType = c(\"normal\", \"flip\", \"pvalue\"),   logBase,   base_limit = 2,   offset = 0,   symmetricZero = (offset > 0),   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/getAxisLabel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get axis label for minorLogTicks — getAxisLabel","text":"numeric axis value asValues logical indicating whether value evaluated. logAxisType character string type axis values: \"normal\": axis values -. \"flip\": inverted axis values, example negative values displayed negative log-transformed values. \"pvalue\": values transformed -log10(pvalue) logBase numeric logarithmic base base_limit numeric value indicating minimum value written exponential. offset numeric value offset used log transformation. symmetricZero logical indicating whether negative values displayed negative log-transformed values. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getAxisLabel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get axis label for minorLogTicks — getAxisLabel","text":"character expression axis label appropriate.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getAxisLabel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get axis label for minorLogTicks — getAxisLabel","text":"function intended called internally jamba::minorLogTicks().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/getAxisLabel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get axis label for minorLogTicks — getAxisLabel","text":"","code":"x <- log10(c(1, 2, 5, 10, 20, 50, 100, 200, 500)) getAxisLabel(x, asValues=TRUE, logBase=10) #> [1]   1   2   5  10  20  50 100 200 500  x1exp <- c(1, 2, 3, 4, 5) plot(1:6, main=\"exponential values\") for (i in seq_along(x1exp)) {    text(x=i, y=i + 0.2,       getAxisLabel(x1exp[i], asValues=FALSE, logBase=10)) }   x1exp <- c(-3:3) plot(-3:3, main=\"log2 fold change values\") for (i in seq_along(x1exp)) {    text(x=i, y=i + 0.3 - 4,       getAxisLabel(x1exp[i],          logAxisType=\"flip\",          asValues=TRUE, logBase=2)) }   x1exp <- c(1, 2, 3, 4, 5) plot(1:6, main=\"P-value style\") for (i in seq_along(x1exp)) {    text(x=i, y=i + 0.2,       getAxisLabel(x1exp[i],       logAxisType=\"pvalue\", asValues=FALSE, logBase=10)) }"},{"path":"https://jmw86069.github.io/jamba/reference/getColorRamp.html","id":null,"dir":"Reference","previous_headings":"","what":"get color ramp by name, color, or function — getColorRamp","title":"get color ramp by name, color, or function — getColorRamp","text":"get color ramp name, color, function","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getColorRamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get color ramp by name, color, or function — getColorRamp","text":"","code":"getColorRamp(   col,   n = 15,   trimRamp = c(0, 0),   gradientN = 15,   defaultBaseColor = \"grey99\",   reverseRamp = FALSE,   alpha = TRUE,   gradientWtFactor = NULL,   dex = 1,   lens = 0,   divergent = NULL,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/getColorRamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get color ramp by name, color, or function — getColorRamp","text":"col one following: character vector two R colors. color gradient defined using colors order colorRampPalette(). character vector length=1 one R color. color gradient defined defaultBaseColor col using color2gradient(). adjust range light dark luminance, use dex argument, higher values increase range, lower values decrease range. character vector length=1, one recognized color ramp name: color palette RColorBrewer, example rownames(RColorBrewer::brewer.pal.info()); color palette function name viridisLite. character vector length=1, one color function name, example col=\"rainbow_hcl\". Input equivalent supplying one color function, see . function whose first argument expects integer number colors return, example col=viridisLite::viridis defines function input. function derived circlize::colorRamp2(),  recognized attribute names \"breaks\" \"colors\". Note colors used individual color values, break points. n integer number output colors return, NULL output color function form function(n) returns n colors. trimRamp integer vector, expanded length=2 needed, defines number colors trim beginning end color vector, respectively. reverseRamp=TRUE, colors reversed trimming applied. two trimRamp values identical, symmetric divergent color scales longer symmetric. gradientN integer number colors expand gradient colors prior trimming colors. defaultBaseColor character vector indicating color begin color gradient, used col single color. reverseRamp logical indicating whether reverse resulting color ramp. value ignored single value supplied col, \"_r\" \"_rev\" detected substring end character value. alpha logical indicating whether honor alpha transparency whenever colorRampPalette called. colors contain alpha transparency, setting effect, otherwise alpha value applied grDevices::colorRampPalette() using linear gradient color. gradientWtFactor numeric value used expand single color input gradient, using color2gradient(), prior making full gradient defaultBaseColor. Note dex preferred method adjusting range light dark given color col. dex numeric darkness expansion factor, used input col single color, split color gradient using defaultBaseColor calling color2gradient(). dex factor adjusts range dark light colors, higher values dex increase range, making changes dramatic. lens, divergent arguments sent warpRamp() apply warp effect color ramp, compress expand color gradient: lens scales warp effect, positive values compressing colors toward baseline negative values expanding colors near baseline; divergent logical indicating whether middle color considered baseline. verbose logical whether print verbose output ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getColorRamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get color ramp by name, color, or function — getColorRamp","text":"character vector R colors, N NULL, function sufficient create R colors.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getColorRamp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get color ramp by name, color, or function — getColorRamp","text":"function accepts color ramp name, single color, vector colors, function names, returns simple vector colors appropriate length, suitable input number plotting functions. n NULL, function returns color function, wrapped grDevices::colorRampPalette(). colors used defined gradientN, grDevices::colorRampPalette() function actually uses starting palette gradientN number colors. n integer greater 0, function returns vector colors length n. col single color value, color gradient created appending defaultColorBase output color2gradient(..., n=3, gradientWtFactor=gradientWtFactor). 4 colors used internal palette applying grDevices::colorRampPalette() appropriate. case, gradientWtFactor used adjust strength color gradient. intended use : getColorRamp(\"red\", n=5). remove leading white color, use getColorRamp(\"red\", n=5, trimRamp=c(1,0)). col contains multiple color values, used define color ramp directly. col color value, compared known color palettes RColorBrewer::RColorBrewer viridisLite, use corresponding color function color palette. col refers color palette, suffix \"_r\" may used reverse colors. example, getColorRamp(col=\"RdBu_r\", n=9) recognize RColorBrewer color palette \"RdBu\", reverse colors return blue red, suitable heatmaps high values associated heat colored red, low values associated cold colored blue. argument reverseRamp=TRUE may used reverse returned colors. Color functions viridisLite recognized: \"viridis\", \"cividis\", \"inferno\", \"magma\", \"plasma\". argument trimRamp used trim colors beginning end color ramp, respectively. mechanism useful remove first last color colors may extreme. Note internally, colors expanded length gradientN, trimmed, corresponding n colors returned. trimRamp argument also useful returning color function, occurs n=NULL. case, colors expanded length gradientN, trimmed using values trimRamp, returned function can used create color ramp arbitrary length. Note reverseRamp=TRUE, colors reversed trimRamp applied. default, alpha transparency maintained supplied input color vector. color ramps transparency, case transparency can added fact using alpha2col().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/getColorRamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get color ramp by name, color, or function — getColorRamp","text":"","code":"# get a gradient using red4 red4 <- getColorRamp(\"red4\"); showColors(getColorRamp(red4));   # make a custom gradient BuOr <- getColorRamp(c(\"dodgerblue\",\"grey10\",\"orange\")); showColors(BuOr);  colorList <- list(red4=red4, BuOr=BuOr);  # From RColorBrewer use a brewer name RdBu <- getColorRamp(\"RdBu\"); RdBu_r <- getColorRamp(\"RdBu_r\"); colorList <- c(colorList, list(RdBu=RdBu, RdBu_r=RdBu_r)); showColors(RdBu);   if (requireNamespace(\"viridisLite\", quietly=TRUE)) {    viridisV <- getColorRamp(\"viridis\");    colorList <- c(colorList, list(viridis=viridisV)); }  # for fun, put a few color ramps onto one plot showColors(colorList, cexCellnote=0.7);   showColors(list(`white background\\ncolor='red'`=getColorRamp(\"red\"),    `black background\\ncolor='red'`=getColorRamp(\"red\", defaultBaseColor=\"black\"),    `white background\\ncolor='gold'`=getColorRamp(\"gold\"),    `black background\\ncolor='gold'`=getColorRamp(\"gold\", defaultBaseColor=\"black\")))"},{"path":"https://jmw86069.github.io/jamba/reference/getDate.html","id":null,"dir":"Reference","previous_headings":"","what":"get simple date string — getDate","title":"get simple date string — getDate","text":"get simple date string format DDmonYYYY 17jul2018.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get simple date string — getDate","text":"","code":"getDate(t = Sys.time(), trim = TRUE, dateFormat = \"%d%b%Y\", ...)"},{"path":"https://jmw86069.github.io/jamba/reference/getDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get simple date string — getDate","text":"t current time appropriate class \"POSIXct\" \"POSIXt\". default output Sys.time(). trim logical whether trim output format() event multiple values sent argument t. dateFormat character string representing recognized date format, default \"DDmmmYYYY\", recognizes \"23aug2007\". ... additional parameters sent format().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get simple date string — getDate","text":"character vector simplified date string","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getDate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get simple date string — getDate","text":"Gets current date simplified text string. Use asDate() convert back Date object.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/getDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get simple date string — getDate","text":"","code":"getDate(); #> [1] \"22mar2025\""},{"path":"https://jmw86069.github.io/jamba/reference/getPlotAspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Get aspect ratio for coordinates, plot, or device — getPlotAspect","title":"Get aspect ratio for coordinates, plot, or device — getPlotAspect","text":"Get aspect ratio coordinates, plot, device","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getPlotAspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get aspect ratio for coordinates, plot, or device — getPlotAspect","text":"","code":"getPlotAspect(   type = c(\"coords\", \"plot\", \"device\"),   parUsr = graphics::par(\"usr\"),   parPin = graphics::par(\"pin\"),   parDin = graphics::par(\"din\"),   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/getPlotAspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get aspect ratio for coordinates, plot, or device — getPlotAspect","text":"type character type aspect ratio calculate. \"coords\" calculates plot coordinate aspect ratio, helpful creating proper circular shapes, example, x-axis y-axis ranges different. Note calculation also correct margin sizes. \"plot\" calculates plot aspect ratio, based upon actual size plot, independent numeric coordinate range plot. aspect ratio reflects relative visual height width plot area, ignoring margins. \"device\" calculates plot aspect ratio, based upon complete graphical device, .e. full space including panels, margins, plot areas. parUsr, parPin, parDin numeric values equivalent respective graphics::par() output, graphics::par(\"usr\"), graphics::par(\"pin\"), graphics::par(\"din\"). Values can supplied directly, among things, prevents opening graphical device one already opened. call graphics::par() otherwise cause graphic device opened, may desired headless R server. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/getPlotAspect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get aspect ratio for coordinates, plot, or device — getPlotAspect","text":"numeric plot aspect ratio plot device, requested type, see type argument.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/getPlotAspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get aspect ratio for coordinates, plot, or device — getPlotAspect","text":"","code":"withr::with_par(list(\"mfrow\"=c(2, 4), \"mar\"=c(1, 1, 1, 1)), { for (i in 1:8) {    nullPlot(plotAreaTitle=paste(\"Plot\", i), xlim=c(1,100), ylim=c(1,10),       doMargins=FALSE);    graphics::axis(1, las=2);    graphics::axis(2, las=2); } # device aspect inside the 2x4 layout getPlotAspect(\"plot\"); })  #> [1] 0.4592089 # device aspect outside the 2x4 layout getPlotAspect(\"plot\"); #> [1] 1.116279"},{"path":"https://jmw86069.github.io/jamba/reference/grepls.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for objects in the environment — grepls","title":"Search for objects in the environment — grepls","text":"Search objects environment","code":""},{"path":"https://jmw86069.github.io/jamba/reference/grepls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for objects in the environment — grepls","text":"","code":"grepls(   x,   where = \"all\",   ignore.case = TRUE,   searchNames = TRUE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/grepls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for objects in the environment — grepls","text":"x character string used grep pattern character string compatible base::ls() installed, AnnotationDbi::ls(). special value \"\" search environments search path base::search() order. ignore.case logical indicating whether pattern match case-insensitive. searchNames logical indicating whether names also searched, relevant AnnDb objects, example org.Mm.egSYMBOL2EG org.Mm.eg.db Bioconductor package. verbose logical indicating whether print verbose output. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/grepls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for objects in the environment — grepls","text":"character vector matching object names, =\"\" returns named list whose names indicate search environment name, whose entries matching object names within environment.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/grepls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for objects in the environment — grepls","text":"function searches active R environment object name using vigrep() (value, case-insensitive grep). helpful trying find object using substring, example grepls(\"statshits\").","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/grepls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for objects in the environment — grepls","text":"","code":"# Find all objects named \"grep\", which should find # base grep() and jamba::vigrep() among other results. grepls(\"grep\"); #> $`package:jamba` #>  [1] \"grepls\"    \"igrep\"     \"igrepHas\"  \"igrepl\"    \"proigrep\"  \"provigrep\" #>  [7] \"unigrep\"   \"unvigrep\"  \"vgrep\"     \"vigrep\"    #>  #> $`package:base` #> [1] \"agrep\"   \"agrepl\"  \"grep\"    \"grepRaw\" \"grepl\"   #>   # Find objects in the local environment allStatsHits <- c(1:12); someStatsHits <- c(1:3); grepls(\"statshits\"); #> named list() # shortcut way to search only the .GlobalEnv, the active local environment grepls(\"statshits\", 1); #> character(0)  # return objects with \"raw\" in the name grepls(\"raw\"); #> $`package:jamba` #> [1] \"drawLabels\" #>  #> $`package:base` #>  [1] \"all.equal.raw\"      \"as.data.frame.raw\"  \"as.raw\"             #>  [4] \"charToRaw\"          \"grepRaw\"            \"is.raw\"             #>  [7] \"raw\"                \"rawConnection\"      \"rawConnectionValue\" #> [10] \"rawShift\"           \"rawToBits\"          \"rawToChar\"          #>   # Require \"Raw\" to be case-sensitive grepls(\"Raw\", ignore.case=FALSE) #> $`package:jamba` #> character(0) #>  #> $`package:base` #> [1] \"charToRaw\" \"grepRaw\"   #>"},{"path":"https://jmw86069.github.io/jamba/reference/groupedAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw grouped axis labels — groupedAxis","title":"Draw grouped axis labels — groupedAxis","text":"Draw grouped axis labels given character vector.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/groupedAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw grouped axis labels — groupedAxis","text":"","code":"groupedAxis(   side = 1,   x,   group_style = c(\"partial_grouped\", \"grouped\", \"centered\"),   las = 2,   returnFractions = TRUE,   nudge = 0.2,   do_abline = FALSE,   abline_lty = \"solid\",   abline_col = \"grey40\",   do_plot = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/groupedAxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw grouped axis labels — groupedAxis","text":"side integer indicating axis side, passed graphics::axis(). 1=bottom, 2=left, 3=top, 4=right. x character vector axis labels group_style character string indicating style label: \"partial_grouped\" - uses square bracket bound 2+ repeated entries, single line tick mark non-repeated entries. \"grouped\" - uses square bracket bound set repeated entries including non-repeated entries. \"centered\" - labels center group repeated entries bracket bounding entries. las integer indicating whether labels perpendicular, see graphics::par(\"las\"). returnFractions logical passed breaksByVector() calculate label positions. Set returnFractions=FALSE labels appear integer locations axis. nudge numeric adjustment labels away plot border. do_abline logical indicating whether draw graphics::abline() lines inside plot indicate exact breakpoints group labels. abline_lty line type compatible graphics::par(\"lty\"), used do_abline=TRUE. abline_col character color used do_abline=TRUE. do_plot logical whether plot resulting axis, option suppress output something else data.frame coordinates returned function. ... additional arguments passed breaksByVector(), /graphics::axis().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/groupedAxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw grouped axis labels — groupedAxis","text":"data.frame invisibly, contains relevant axis coordinates, labels, whether coordinate appear tick mark.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/groupedAxis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw grouped axis labels — groupedAxis","text":"function extends breaksByVector() specifically axis labels. intended character labels spaced integer steps, labels expected repeated.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/groupedAxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw grouped axis labels — groupedAxis","text":"","code":"withr::with_par(list(\"mar\"=c(4,4,6,6)), { b <- rep(LETTERS[1:5], c(2,3,5,4,3)); b2 <- c(b[1:2], makeNames(b[3:5]), b[6:16]); nullPlot(doBoxes=FALSE,    doUsrBox=TRUE,    xlim=c(0,18),    ylim=c(0,18));  groupedAxis(1, b); groupedAxis(2, b, group_style=\"grouped\"); groupedAxis(2, b, group_style=\"centered\"); groupedAxis(3, b2, do_abline=TRUE); groupedAxis(4, b2, group_style=\"grouped\"); graphics::mtext(side=1, \"group_style='partial_grouped'\", line=2, las=0); graphics::mtext(side=2, \"group_style='grouped'\", line=2, las=0); graphics::mtext(side=3, \"group_style='partial_grouped'\", line=2, las=0); graphics::mtext(side=4, \"group_style='grouped'\", line=2, las=0); })"},{"path":"https://jmw86069.github.io/jamba/reference/gsubOrdered.html","id":null,"dir":"Reference","previous_headings":"","what":"Global substitution into ordered factor — gsubOrdered","title":"Global substitution into ordered factor — gsubOrdered","text":"Global substitution ordered factor","code":""},{"path":"https://jmw86069.github.io/jamba/reference/gsubOrdered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global substitution into ordered factor — gsubOrdered","text":"","code":"gsubOrdered(   pattern,   replacement,   x,   ignore.case = FALSE,   perl = FALSE,   fixed = FALSE,   useBytes = FALSE,   sortFunc = mixedSort,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/gsubOrdered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global substitution into ordered factor — gsubOrdered","text":"pattern, replacement, x, ignore.case, perl, fixed, useBytes arguments sent base::gsub() sortFunc function used sort factor levels, performed input x factor. ... additional arguments passed sortFunc","code":""},{"path":"https://jmw86069.github.io/jamba/reference/gsubOrdered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global substitution into ordered factor — gsubOrdered","text":"factor whose levels based upon order input levels input x factor; input x factor, converted factor using provided sort function sortFunc.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/gsubOrdered.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global substitution into ordered factor — gsubOrdered","text":"function extension base::gsub() returns ordered factor output. input also factor, output factor levels retained order, applying string substitution. function useful making changes via base::gsub() factor ordered levels, retains order levels modification. Tips: convert character vector factor, whose levels sorted, use sortFunc=sort. convert character vector factor, whose levels order appear input x, use sortFunc=c. convert character vector factor, whose levels sorted alphanumerically, use sortFunc=mixedSort.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/gsubOrdered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global substitution into ordered factor — gsubOrdered","text":"","code":"x <- c(paste0(    rep(c(\"first\", \"second\", \"third\"), 2),    rep(c(\"Section\", \"Choice\"), each=3)),    \"Choice\"); f <- factor(x, levels=x); f; #> [1] firstSection  secondSection thirdSection  firstChoice   secondChoice  #> [6] thirdChoice   Choice        #> 7 Levels: firstSection secondSection thirdSection firstChoice ... Choice  # default gsub() will return a character vector gsub(\"(first|second|third)\", \"\", f) #> [1] \"Section\" \"Section\" \"Section\" \"Choice\"  \"Choice\"  \"Choice\"  \"Choice\"  # converting to factor resets the factor level order factor(gsub(\"(first|second|third)\", \"\", f)) #> [1] Section Section Section Choice  Choice  Choice  Choice  #> Levels: Choice Section  ## gsubOrdered() maintains the factor level order gsubOrdered(\"(first|third)\", \"\", f) #> [1] Section       secondSection Section       Choice        secondChoice  #> [6] Choice        Choice        #> Levels: Section secondSection Choice secondChoice gsubOrdered(\"(first)\", \"\", f) #> [1] Section       secondSection thirdSection  Choice        secondChoice  #> [6] thirdChoice   Choice        #> 6 Levels: Section secondSection thirdSection Choice ... thirdChoice  # to convert character vector to factor, levels in order they appear gsubOrdered(\"\", \"\", x, sortFunc=c) #> [1] firstSection  secondSection thirdSection  firstChoice   secondChoice  #> [6] thirdChoice   Choice        #> 7 Levels: firstSection secondSection thirdSection firstChoice ... Choice  # to convert character vector to factor, levels alphanumeric sorted gsubOrdered(\"\", \"\", x, sortFunc=mixedSort) #> [1] firstSection  secondSection thirdSection  firstChoice   secondChoice  #> [6] thirdChoice   Choice        #> 7 Levels: Choice firstChoice firstSection secondChoice ... thirdSection"},{"path":"https://jmw86069.github.io/jamba/reference/gsubs.html","id":null,"dir":"Reference","previous_headings":"","what":"Pattern replacement with multiple patterns — gsubs","title":"Pattern replacement with multiple patterns — gsubs","text":"Pattern replacement multiple patterns","code":""},{"path":"https://jmw86069.github.io/jamba/reference/gsubs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pattern replacement with multiple patterns — gsubs","text":"","code":"gsubs(   pattern,   replacement,   x,   ignore.case = TRUE,   replaceMultiple = rep(TRUE, length(pattern)),   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/gsubs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pattern replacement with multiple patterns — gsubs","text":"pattern character vector patterns replacement character vector replacements x character vector input data curated ignore.case logical indicating whether perform pattern matching case-insensitive manner, ignore.case=TRUE ignore uppercase/lowercase distinction. replaceMultiple logical vector indicating whether perform global substitution, replaceMultiple=FALSE replace first occurrence pattern, using base::sub(). Note vector can refer individual entries pattern. ... additional arguments passed base::gsub() base::sub().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/gsubs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pattern replacement with multiple patterns — gsubs","text":"character vector input x atomic vector, list input x list.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/gsubs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pattern replacement with multiple patterns — gsubs","text":"function simple wrapper around base::gsub() considering series pattern-replacement combinations. applies pattern match replacement order therefore vectorized. x input list vector list processed, somewhat differently processing one vector. list contains another list, length(x) < 100, value x iterated calling gsubs(). process slowest option, however noticeble x length 10,000. list contain another list values non-factor, values factor, unlisted, processed vector, relisted. process nearly speed processing one single vector, except time takes confirm list element classes. values contain mix non-factor factor values, separately unlisted, processed gsubs(), relisted combined afterward. , process slightly slower option 2 , given calls gsubs() twice, two vectors. Note factor values input replaced character values output, consistent gsub().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/gsubs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pattern replacement with multiple patterns — gsubs","text":"","code":"gsubs(c(\"one\", \"two\"), c(\"three\", \"four\"), \"one two five six\") #> [1] \"three four five six\" gsubs(c(\"one\", \"two\"), c(\"three\"), \"one two five six\") #> [1] \"three three five six\""},{"path":"https://jmw86069.github.io/jamba/reference/handleArgsText.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle function arguments as text — handleArgsText","title":"Handle function arguments as text — handleArgsText","text":"Handles list list lists, converting human-readable text format","code":""},{"path":"https://jmw86069.github.io/jamba/reference/handleArgsText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle function arguments as text — handleArgsText","text":"","code":"handleArgsText(   argTextA,   name = \"\",   col1 = \"mediumpurple2\",   col2 = \"mediumaquamarine\",   colT = \"dodgerblue3\",   colF = \"red1\",   colNULL = \"grey60\",   lightMode = NULL,   Crange = getOption(\"jam.Crange\"),   Lrange = getOption(\"jam.Lrange\"),   adjustRgb = getOption(\"jam.adjustRgb\"),   indent = \"\",   useCollapseList = \",\\n      \",   useCollapseBase = \", \",   level = 1,   debug = 0,   useColor = TRUE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/handleArgsText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle function arguments as text — handleArgsText","text":"argTextA object passed jargs() iteratively parsing function argument values. name character name argument. col1, col2, colT, colF, colNULL character colors used defaults first second arguments, TRUE, FALSE, NULL, respectively. lightMode logical NULL, indicating whether text background color light, thus imposing maximum brightness colors displayed. use lightMode defined function caller, otherwise use getOption(\"jam.lightMode\") defined, lastly attempt detect whether running inside Rstudio checking environment variable \"RSTUDIO\", assume lightMode==TRUE. Crange numeric range chroma values, ranging 0 100. NULL, default values assigned Crange setCLranges(). Lrange numeric range luminance values, ranging 0 100. NULL, default values assigned Lrange setCLranges(). adjustRgb numeric value adjustment used conversion RGB colors ANSI colors, inherently lossy. defined, uses default returned setCLranges() uses getOption(\"jam.adjustRgb\") default=0. order boost color contrast, alternate value -0.1 suggested. indent character string used prefix output help apply text indent. useCollapseList character string inserted multiple values split list entries across multiple lines. useCollapseBase character string used separate multiple values vector split across multiple lines. level integer indicating level depth iterative parsing. debug integer value, greater 0 cause debug-type verbose output, useful parameters hard! useColor logical whether display results color, crayon package available, terminal console capable. verbose logical whether print verbose output. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/handleArgsText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle function arguments as text — handleArgsText","text":"character vector including ANSI coloring available.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/handleArgsText.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle function arguments as text — handleArgsText","text":"function rare non-exported function intended called jargs(), separated order help isolate logical steps required.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/handleArgsText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle function arguments as text — handleArgsText","text":"","code":"cat(paste0(handleArgsText(formals(graphics::hist.default)), \"\\n\"), sep=\"\") #> x #> breaks=\"Sturges\" #> freq=NULL #> probability=!freq #> include.lowest=TRUE #> right=TRUE #> fuzz=1e-07 #> density=NULL #> angle=45 #> col=\"lightgray\" #> border=NULL #> main=paste(\"Histogram of\", xname) #> xlim=range(breaks) #> ylim=NULL #> xlab=xname #> ylab #> axes=TRUE #> plot=TRUE #> labels=FALSE #> nclass=NULL #> warn.unused=TRUE #> ..."},{"path":"https://jmw86069.github.io/jamba/reference/hcl2col.html","id":null,"dir":"Reference","previous_headings":"","what":"convert HCL to R color — hcl2col","title":"convert HCL to R color — hcl2col","text":"Convert HCL color matrix vector R hex colors","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hcl2col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert HCL to R color — hcl2col","text":"","code":"hcl2col(   x = NULL,   H = NULL,   C = NULL,   L = NULL,   ceiling = 255,   maxColorValue = 255,   alpha = NULL,   fixup = TRUE,   model = getOption(\"jam.model\", c(\"hcl\", \"polarLUV\", \"polarLAB\")),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/hcl2col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert HCL to R color — hcl2col","text":"x matrix colors, rownames \"H\", \"C\", \"L\", supplied looks vectors H, C, L accordingly. can alternatively supplied object class polarLUV. H, C, L numeric vectors supplied alternative x, ranges 0 360, 0 100, 0 100, respectively. ceiling numeric value indicating maximum values allowed R, G, B conversion colorspace::(x, \"RGB\"). ceiling applied maxColorValue used scale numeric values, intended correct occurrence values 255, outside typical color gamut allowed RGB colors used R. general, value modified. maxColorValue numeric value indicating maximum RGB values, typically scaling values range 0 255, default returned range 0 1. general, value modified. alpha optional vector alpha values. supplied, x supplied matrix rowname \"alpha\", values used x[\"alpha\",]. fixup boolean indicating whether use colorspace::hex(...,fixup=TRUE) conversion R hex colors, recommended since conversion applies unknown non-linear transformation colors outside color gamut. option comparison, specifically needed. model character string indicating color model use: hcl (default) uses farver polarLUV uses colorspace polarLUV polarLAB uses `colorspace polarLAB verbose logical whether print verbose output. ... arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hcl2col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert HCL to R color — hcl2col","text":"vector R colors, input NA, NA values returned order.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hcl2col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert HCL to R color — hcl2col","text":"function takes HCL matrix,converts R color using colorspace package colorspace::polarLUV() colorspace::hex(). model=\"hcl\" function uses farver::encode_colour() bypasses colorspace. future colorspace dependency likely removed favor using farver. event, model=\"hcl\" equivalent using model=\"polarLUV\" fixup=TRUE, except much faster.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/hcl2col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert HCL to R color — hcl2col","text":"","code":"# Prepare a basic HCL matrix hclM <- col2hcl(c(red=\"red\",    blue=\"blue\",    yellow=\"yellow\",    orange=\"#FFAA0066\")); hclM; #>             red      blue    yellow    orange #> H      12.17440 265.87459  85.86596  46.97366 #> C     179.04898 130.67920 107.07044 103.64939 #> L      53.24079  32.29701  97.13927  76.07836 #> alpha   1.00000   1.00000   1.00000   0.40000  # Now convert back to R hex colors colorV <- hcl2col(hclM); colorV; #>       red      blue    yellow    orange  #> \"#FF0000\" \"#0000FF\" \"#FFFF00\" \"#FFAA00\"   showColors(colorV);"},{"path":"https://jmw86069.github.io/jamba/reference/heads.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply head() across each element in a list of vectors — heads","title":"Apply head() across each element in a list of vectors — heads","text":"Apply head() across element list vectors","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply head() across each element in a list of vectors — heads","text":"","code":"heads(x, n = 6, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/heads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply head() across each element in a list of vectors — heads","text":"x list atomic vectors, assumed atomic type. n integer maximum number items include element list x. n contains multiple values, recycled length(x) applied list element order. ... additional arguments passed utils::head().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply head() across each element in a list of vectors — heads","text":"list n elements per vector.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply head() across each element in a list of vectors — heads","text":"Note function currently operates list vectors. function notably faster lapply(x, head, n) operates entire vector one step. Also input n can vector element list specific number items returned.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/heads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply head() across each element in a list of vectors — heads","text":"","code":"l <- list(a=1:10, b=2:5, c=NULL, d=1:100); heads(l, 1); #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> integer(0) #>  #> $d #> [1] 1 #>   heads(l, 2); #> $a #> [1] 1 2 #>  #> $b #> [1] 2 3 #>  #> $c #> integer(0) #>  #> $d #> [1] 1 2 #>   heads(l, n=c(2, 1, 3, 5)) #> $a #> [1] 1 2 #>  #> $b #> [1] 2 #>  #> $c #> integer(0) #>  #> $d #> [1] 1 2 3 4 5 #>"},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_column_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Heatmap column order from ComplexHeatmap heatmap object — heatmap_column_order","title":"Return Heatmap column order from ComplexHeatmap heatmap object — heatmap_column_order","text":"Return Heatmap column order ComplexHeatmap heatmap object","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_column_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Heatmap column order from ComplexHeatmap heatmap object — heatmap_column_order","text":"","code":"heatmap_column_order(hm, which_heatmap = NULL)"},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_column_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Heatmap column order from ComplexHeatmap heatmap object — heatmap_column_order","text":"hm Heatmap HeatmapList object defined Bioconductor package via ComplexHeatmap::Heatmap(). which_heatmap used specify specific heatmap hm provided HeatmapList. NULL (default) first heatmap hm@ht_list used. one value supplied, heatmap used. multiple values supplied, list returned. Input can either: numeric - indicating heatmap number hm@ht_list character - indicating heatmap name seen names(hm@ht_list)","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_column_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Heatmap column order from ComplexHeatmap heatmap object — heatmap_column_order","text":"output depends upon heatmap: heatmap columns grouped using column_split, data matrix contains colnames, returns character vector colnames order appear heatmap. colnames, integer column index values returned. heatmap column labels, returned vector names. columns grouped using column_split, returns list vectors described . list named using column_title labels equal number column labels.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_column_order.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return Heatmap column order from ComplexHeatmap heatmap object — heatmap_column_order","text":"function helpful utility return fully qualified list colnames ComplexHeatmap::Heatmap object. core intention output usable original data matrix used heatmap. Therefore, vector values colnames() present, integer column index values colnames(). heatmap column_labels defined, returned names(). Note names() assigned inside try() allow case column_labels, column_title labels coerced character values, example using gridtext markdown formatting.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_column_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Heatmap column order from ComplexHeatmap heatmap object — heatmap_column_order","text":"","code":"if (check_pkg_installed(\"ComplexHeatmap\")) {    set.seed(123);     mat <- matrix(stats::rnorm(18 * 24),       ncol=24);    rownames(mat) <- paste0(\"row\", seq_len(18))    colnames(mat) <- paste0(\"column\", seq_len(24))     # obtaining row order first causes a warning message    hm1 <- ComplexHeatmap::Heatmap(mat);     # best practice is to draw() and store output in an object    # to ensure the row orders are absolutely fixed    hm1_drawn <- ComplexHeatmap::draw(hm1);    print(heatmap_row_order(hm1_drawn))    print(heatmap_column_order(hm1_drawn))     # row and column split    hm1_split <- ComplexHeatmap::Heatmap(mat,       column_split=3, row_split=3, border=TRUE);    hm1_split_drawn <- ComplexHeatmap::draw(hm1_split);    print(heatmap_row_order(hm1_split_drawn))    print(heatmap_column_order(hm1_split_drawn))     # display two heatmaps side-by-side    mat2 <- mat + stats::rnorm(18*24);    hm2 <- ComplexHeatmap::Heatmap(mat2, border=TRUE, row_split=4);     hm1hm2_drawn <- ComplexHeatmap::draw(hm1_split + hm2,       ht_gap=grid::unit(1, \"cm\"));    print(heatmap_row_order(hm1hm2_drawn))    print(heatmap_row_order(hm1hm2_drawn, which_heatmap=2))    # by default the order uses the first heatmap    print(heatmap_column_order(hm1hm2_drawn))    # the second heatmap can be returned    print(heatmap_column_order(hm1hm2_drawn, which_heatmap=2))    # or a list of heatmap orders can be returned    print(heatmap_column_order(hm1hm2_drawn, which_heatmap=1:2))     # stacked vertical heatmaps    hm1hm2_drawn_tall <- ComplexHeatmap::draw(       ComplexHeatmap::`%v%`(hm1_split, hm2),       ht_gap=grid::unit(1, \"cm\"));    print(heatmap_row_order(hm1hm2_drawn))    print(heatmap_row_order(hm1hm2_drawn, which_heatmap=2))    print(heatmap_row_order(hm1hm2_drawn, which_heatmap=1:2))    print(heatmap_row_order(hm1hm2_drawn,       which_heatmap=names(hm1hm2_drawn@ht_list)))     # annotation heatmap    ha <- ComplexHeatmap::rowAnnotation(left=rownames(mat))    ha_drawn <- ComplexHeatmap::draw(ha + hm1)    print(sdim(ha_drawn@ht_list))    print(heatmap_row_order(ha_drawn))    print(heatmap_column_order(ha_drawn))     # stacked vertical heatmaps with top annotation    ta <- ComplexHeatmap::HeatmapAnnotation(top=colnames(mat))    hm1_ha <- ComplexHeatmap::Heatmap(mat,       left_annotation=ha,       column_split=3, row_split=3, border=TRUE);    hm1hm2_drawn_tall <- ComplexHeatmap::draw(       ComplexHeatmap::`%v%`(ta,          ComplexHeatmap::`%v%`(hm1_ha, hm2)),       ht_gap=grid::unit(1, \"cm\"));    print(sdim(hm1hm2_drawn_tall@ht_list))    print(heatmap_row_order(hm1hm2_drawn_tall))    print(heatmap_row_order(hm1hm2_drawn_tall, 2)) }  #>   row16    row2   row12    row7   row17    row9    row8    row1   row18    row5  #> \"row16\"  \"row2\" \"row12\"  \"row7\" \"row17\"  \"row9\"  \"row8\"  \"row1\" \"row18\"  \"row5\"  #>    row4    row3    row6   row11   row14   row15   row13   row10  #>  \"row4\"  \"row3\"  \"row6\" \"row11\" \"row14\" \"row15\" \"row13\" \"row10\"  #>   column15    column1   column17    column6    column9   column23   column14  #> \"column15\"  \"column1\" \"column17\"  \"column6\"  \"column9\" \"column23\" \"column14\"  #>   column10    column4   column11    column7   column18   column12   column21  #> \"column10\"  \"column4\" \"column11\"  \"column7\" \"column18\" \"column12\" \"column21\"  #>   column19   column24   column13    column8   column16    column5    column2  #> \"column19\" \"column24\" \"column13\"  \"column8\" \"column16\"  \"column5\"  \"column2\"  #>    column3   column22   column20  #>  \"column3\" \"column22\" \"column20\"   #> $`1` #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $`2` #>   row18  #> \"row18\"  #>  #> $`3` #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #> $`1` #>   column10    column4    column7   column11    column1   column15    column6  #> \"column10\"  \"column4\"  \"column7\" \"column11\"  \"column1\" \"column15\"  \"column6\"  #>   column17    column9   column14   column23  #> \"column17\"  \"column9\" \"column14\" \"column23\"  #>  #> $`2` #>    column2    column5   column16   column20    column3   column22  #>  \"column2\"  \"column5\" \"column16\" \"column20\"  \"column3\" \"column22\"  #>  #> $`3` #>    column8   column13   column24   column19   column21   column12   column18  #>  \"column8\" \"column13\" \"column24\" \"column19\" \"column21\" \"column12\" \"column18\"  #>   #> $`1` #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $`2` #>   row18  #> \"row18\"  #>  #> $`3` #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #> [[1]] #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> [[2]] #>   row18  #> \"row18\"  #>  #> [[3]] #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #> $`1` #>   column10    column4    column7   column11    column1   column15    column6  #> \"column10\"  \"column4\"  \"column7\" \"column11\"  \"column1\" \"column15\"  \"column6\"  #>   column17    column9   column14   column23  #> \"column17\"  \"column9\" \"column14\" \"column23\"  #>  #> $`2` #>    column2    column5   column16   column20    column3   column22  #>  \"column2\"  \"column5\" \"column16\" \"column20\"  \"column3\" \"column22\"  #>  #> $`3` #>    column8   column13   column24   column19   column21   column12   column18  #>  \"column8\" \"column13\" \"column24\" \"column19\" \"column21\" \"column12\" \"column18\"  #>  #>   column18   column21   column19    column2   column16    column5   column24  #> \"column18\" \"column21\" \"column19\"  \"column2\" \"column16\"  \"column5\" \"column24\"  #>   column13    column3    column7   column11   column20   column15   column17  #> \"column13\"  \"column3\"  \"column7\" \"column11\" \"column20\" \"column15\" \"column17\"  #>   column23   column12   column14   column22    column1    column6    column4  #> \"column23\" \"column12\" \"column14\" \"column22\"  \"column1\"  \"column6\"  \"column4\"  #>   column10    column8    column9  #> \"column10\"  \"column8\"  \"column9\"  #> $matrix_4 #> $matrix_4$`1` #>   column10    column4    column7   column11    column1   column15    column6  #> \"column10\"  \"column4\"  \"column7\" \"column11\"  \"column1\" \"column15\"  \"column6\"  #>   column17    column9   column14   column23  #> \"column17\"  \"column9\" \"column14\" \"column23\"  #>  #> $matrix_4$`2` #>    column2    column5   column16   column20    column3   column22  #>  \"column2\"  \"column5\" \"column16\" \"column20\"  \"column3\" \"column22\"  #>  #> $matrix_4$`3` #>    column8   column13   column24   column19   column21   column12   column18  #>  \"column8\" \"column13\" \"column24\" \"column19\" \"column21\" \"column12\" \"column18\"  #>  #>  #> $matrix_5 #>   column18   column21   column19    column2   column16    column5   column24  #> \"column18\" \"column21\" \"column19\"  \"column2\" \"column16\"  \"column5\" \"column24\"  #>   column13    column3    column7   column11   column20   column15   column17  #> \"column13\"  \"column3\"  \"column7\" \"column11\" \"column20\" \"column15\" \"column17\"  #>   column23   column12   column14   column22    column1    column6    column4  #> \"column23\" \"column12\" \"column14\" \"column22\"  \"column1\"  \"column6\"  \"column4\"  #>   column10    column8    column9  #> \"column10\"  \"column8\"  \"column9\"  #>   #> $`1` #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $`2` #>   row18  #> \"row18\"  #>  #> $`3` #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #> [[1]] #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> [[2]] #>   row18  #> \"row18\"  #>  #> [[3]] #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #> $matrix_4 #> $matrix_4$`1` #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $matrix_4$`2` #>   row18  #> \"row18\"  #>  #> $matrix_4$`3` #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #>  #> $matrix_5 #> $matrix_5[[1]] #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $matrix_5[[2]] #>   row18  #> \"row18\"  #>  #> $matrix_5[[3]] #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #>  #> $matrix_4 #> $matrix_4$`1` #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $matrix_4$`2` #>   row18  #> \"row18\"  #>  #> $matrix_4$`3` #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #>  #> $matrix_5 #> $matrix_5[[1]] #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $matrix_5[[2]] #>   row18  #> \"row18\"  #>  #> $matrix_5[[3]] #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #>   #>                      rows cols             class #> heatmap_annotation_0    1      HeatmapAnnotation #> matrix_3               18   24           Heatmap #>   row16    row2   row12    row7   row17    row9    row8    row1   row18    row5  #> \"row16\"  \"row2\" \"row12\"  \"row7\" \"row17\"  \"row9\"  \"row8\"  \"row1\" \"row18\"  \"row5\"  #>    row4    row3    row6   row11   row14   row15   row13   row10  #>  \"row4\"  \"row3\"  \"row6\" \"row11\" \"row14\" \"row15\" \"row13\" \"row10\"  #>   column15    column1   column17    column6    column9   column23   column14  #> \"column15\"  \"column1\" \"column17\"  \"column6\"  \"column9\" \"column23\" \"column14\"  #>   column10    column4   column11    column7   column18   column12   column21  #> \"column10\"  \"column4\" \"column11\"  \"column7\" \"column18\" \"column12\" \"column21\"  #>   column19   column24   column13    column8   column16    column5    column2  #> \"column19\" \"column24\" \"column13\"  \"column8\" \"column16\"  \"column5\"  \"column2\"  #>    column3   column22   column20  #>  \"column3\" \"column22\" \"column20\"   #>                      rows cols             class #> heatmap_annotation_1    1      HeatmapAnnotation #> matrix_6               18   24           Heatmap #> matrix_5               18   24           Heatmap #> $`1` #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $`2` #>   row18  #> \"row18\"  #>  #> $`3` #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>  #> $`1` #>    row2   row16   row12    row1    row8    row9    row7   row17  #>  \"row2\" \"row16\" \"row12\"  \"row1\"  \"row8\"  \"row9\"  \"row7\" \"row17\"  #>  #> $`2` #>   row18  #> \"row18\"  #>  #> $`3` #>   row10   row13   row15    row4    row5    row3    row6   row11   row14  #> \"row10\" \"row13\" \"row15\"  \"row4\"  \"row5\"  \"row3\"  \"row6\" \"row11\" \"row14\"  #>"},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_row_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Heatmap row order from ComplexHeatmap heatmap object — heatmap_row_order","title":"Return Heatmap row order from ComplexHeatmap heatmap object — heatmap_row_order","text":"Return Heatmap row order ComplexHeatmap heatmap object","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_row_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Heatmap row order from ComplexHeatmap heatmap object — heatmap_row_order","text":"","code":"heatmap_row_order(hm, which_heatmap = NULL)"},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_row_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Heatmap row order from ComplexHeatmap heatmap object — heatmap_row_order","text":"hm Heatmap HeatmapList object defined Bioconductor package via ComplexHeatmap::Heatmap(). which_heatmap integer, default NULL, used input HeatmapList multiple heatmaps.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_row_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Heatmap row order from ComplexHeatmap heatmap object — heatmap_row_order","text":"output depends upon heatmap: heatmap rows grouped using row_split, data matrix contains rownames, returns character vector rownames order appear heatmap. rownames, integer row index values returned. heatmap row labels, returned vector names. rows grouped using row_split, returns list vectors described . list named using row_title labels equal number row labels.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_row_order.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return Heatmap row order from ComplexHeatmap heatmap object — heatmap_row_order","text":"function helpful utility return fully qualified list rownames ComplexHeatmap::Heatmap object. core intention output usable original data matrix used heatmap. Therefore, vector values rownames() present, integer row index values rownames(). heatmap row_labels defined, returned names(). Note names() assigned inside try() allow case row_labels, row_title labels coerced character values, example using gridtext markdown formatting. Final note: best practice draw heatmap first ComplexHeatmap::draw() store output new object. step creates definitive clustering therefore row order absolutely final, subject potential randomness clustering.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/heatmap_row_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Heatmap row order from ComplexHeatmap heatmap object — heatmap_row_order","text":"","code":"# See heatmap_column_order() for examples"},{"path":"https://jmw86069.github.io/jamba/reference/hsl2col.html","id":null,"dir":"Reference","previous_headings":"","what":"convert HCL to R color — hsl2col","title":"convert HCL to R color — hsl2col","text":"Convert HCL color matrix vector R hex colors","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hsl2col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert HCL to R color — hsl2col","text":"","code":"hsl2col(   x = NULL,   H = NULL,   S = NULL,   L = NULL,   alpha = NULL,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/hsl2col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert HCL to R color — hsl2col","text":"x numeric matrix colors, rownames \"H\", \"S\", \"L\", supplied looks vectors H, S, L accordingly. H, S, L numeric vectors supplied alternative x, ranges 0 360, 0 100, 0 100, respectively. alpha numeric vector alpha values, default NULL. supplied, x supplied matrix rowname \"alpha\", values used x[\"alpha\",]. verbose logical indicating whether print verbose output. ... arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hsl2col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert HCL to R color — hsl2col","text":"vector R colors, input NA, NA values returned order.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hsl2col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert HCL to R color — hsl2col","text":"function takes HCL matrix,converts R color using colorspace package colorspace::polarLUV() colorspace::hex(). model=\"hcl\" function uses farver::encode_colour() bypasses colorspace. future colorspace dependency likely removed favor using farver. event, model=\"hcl\" equivalent using model=\"polarLUV\" fixup=TRUE, except much faster.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/hsl2col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert HCL to R color — hsl2col","text":"","code":"# See col2hcl() for more extensive examples  # Prepare a basic HSL matrix x_colors <- c(red=\"red\",    blue=\"blue\",    yellow=\"yellow\",    orange=\"#FFAA0066\"); hslM <- col2hsl(x_colors); hslM; #>       red blue yellow orange #> H       0  240     60   40.0 #> S     100  100    100  100.0 #> L      50   50     50   50.0 #> alpha   1    1      1    0.4  # Now convert back to R hex colors colorV <- hsl2col(hslM); colorV; #>         red        blue      yellow      orange  #>   \"#FF0000\"   \"#0000FF\"   \"#FFFF00\" \"#FFAA0066\"   showColors(list(x_colors=x_colors,    colorV=nameVector(colorV)));"},{"path":"https://jmw86069.github.io/jamba/reference/hsv2col.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert HSV matrix to R color — hsv2col","title":"Convert HSV matrix to R color — hsv2col","text":"Converts HSV color matrix R hex color","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hsv2col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert HSV matrix to R color — hsv2col","text":"","code":"hsv2col(hsvValue, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/hsv2col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert HSV matrix to R color — hsv2col","text":"hsvValue numeric HSV matrix, rownames c(\"h\",\"s\",\"v\") order, optionally \"alpha\" rowname alpha transparency. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hsv2col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert HSV matrix to R color — hsv2col","text":"character vector R colors.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/hsv2col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert HSV matrix to R color — hsv2col","text":"function augments grDevices::hsv() function handles output grDevices::rgb2hsv() col2hsv(), sufficient run series conversion functions, e.g. hsv2col(col2hsv(\"red\")). function also maintains alpha transparency, maintained grDevices::hsv() function.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/hsv2col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert HSV matrix to R color — hsv2col","text":"","code":"# start with a color vector # red and blue with partial transparency colorV <- c(\"#FF000055\", \"#00339999\");  # confirm the hsv matrix maintains transparency col2hsv(colorV); #>            [,1]      [,2] #> h     0.0000000 0.6111111 #> s     1.0000000 1.0000000 #> v     1.0000000 0.6000000 #> alpha 0.3333333 0.6000000  # convert back to the original color hsv2col(col2hsv(colorV)); #> [1] \"#FF000055\" \"#00339999\""},{"path":"https://jmw86069.github.io/jamba/reference/igrep.html","id":null,"dir":"Reference","previous_headings":"","what":"case-insensitive grep — igrep","title":"case-insensitive grep — igrep","text":"case-insensitive grep","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case-insensitive grep — igrep","text":"","code":"igrep(..., ignore.case = TRUE)"},{"path":"https://jmw86069.github.io/jamba/reference/igrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case-insensitive grep — igrep","text":"..., ignore.case parameters sent base::grep()","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"case-insensitive grep — igrep","text":"vector matching indices","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"case-insensitive grep — igrep","text":"function simple wrapper around base::grep() runs case-insensitive mode. mainly used save keystrokes, consistently named alongside vgrep vigrep.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/igrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"case-insensitive grep — igrep","text":"","code":"V <- paste0(LETTERS[1:5], LETTERS[4:8]); igrep(\"D\", V); #> [1] 1 4 igrep(\"d\", V); #> [1] 1 4 vigrep(\"d\", V); #> [1] \"AD\" \"DG\""},{"path":"https://jmw86069.github.io/jamba/reference/igrepHas.html","id":null,"dir":"Reference","previous_headings":"","what":"vector contains any case-insensitive grep match — igrepHas","title":"vector contains any case-insensitive grep match — igrepHas","text":"vector contains case-insensitive grep match","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrepHas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vector contains any case-insensitive grep match — igrepHas","text":"","code":"igrepHas(   pattern,   x = NULL,   ignore.case = TRUE,   minCount = 1,   naToBlank = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/igrepHas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vector contains any case-insensitive grep match — igrepHas","text":"pattern grep pattern use base::grep() x vector use grep ignore.case logical default TRUE, meaning grep performed case-insensitive mode. minCount integer minimum number matches required return TRUE. naToBlank logical whether convert NA blank, instead allowing grep handle NA values -. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrepHas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vector contains any case-insensitive grep match — igrepHas","text":"logical indicating whether grep match criteria met, TRUE indicates grep pattern present minCount number entries.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrepHas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vector contains any case-insensitive grep match — igrepHas","text":"function checks input vector elements matching grep pattern. grep performed case-insensitive (igrep). function particularly useful checking function arguments object class, class() might return multiple values, name class might slightly different expected, e.g. data.frame, data_frame, DataFrame.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/igrepHas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vector contains any case-insensitive grep match — igrepHas","text":"","code":"a <- c(\"data.frame\",\"data_frame\",\"tibble\",\"tbl\"); igrepHas(\"Data.*Frame\", a); #> [1] TRUE igrepHas(\"matrix\", a); #> [1] FALSE"},{"path":"https://jmw86069.github.io/jamba/reference/igrepl.html","id":null,"dir":"Reference","previous_headings":"","what":"case-insensitive logical grepl — igrepl","title":"case-insensitive logical grepl — igrepl","text":"case-insensitive logical grepl","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrepl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case-insensitive logical grepl — igrepl","text":"","code":"igrepl(..., ignore.case = TRUE)"},{"path":"https://jmw86069.github.io/jamba/reference/igrepl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case-insensitive logical grepl — igrepl","text":"..., ignore.case parameters sent base::grep()","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrepl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"case-insensitive logical grepl — igrepl","text":"logical vector indicating pattern match","code":""},{"path":"https://jmw86069.github.io/jamba/reference/igrepl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"case-insensitive logical grepl — igrepl","text":"function simple wrapper around base::grepl() runs case-insensitive mode simply adding default ignore.case=TRUE. mainly used convenience.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/igrepl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"case-insensitive logical grepl — igrepl","text":"","code":"V <- paste0(LETTERS[1:5], LETTERS[4:8]); ig1 <- grepl(\"D\", V); ig2 <- igrepl(\"D\", V); ig3 <- grepl(\"d\", V); ig4 <- igrepl(\"d\", V); data.frame(V,    grepl_D=ig1,    grepl_d=ig3,    igrepl_D=ig2,    igrepl_d=ig4); #>    V grepl_D grepl_d igrepl_D igrepl_d #> 1 AD    TRUE   FALSE     TRUE     TRUE #> 2 BE   FALSE   FALSE    FALSE    FALSE #> 3 CF   FALSE   FALSE    FALSE    FALSE #> 4 DG    TRUE   FALSE     TRUE     TRUE #> 5 EH   FALSE   FALSE    FALSE    FALSE"},{"path":"https://jmw86069.github.io/jamba/reference/imageByColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Display color raster image using a matrix of colors — imageByColors","title":"Display color raster image using a matrix of colors — imageByColors","text":"Display color raster image using matrix colors","code":""},{"path":"https://jmw86069.github.io/jamba/reference/imageByColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display color raster image using a matrix of colors — imageByColors","text":"","code":"imageByColors(   x,   useRaster = FALSE,   fixRasterRatio = TRUE,   maxRatioFix = 100,   xaxt = \"s\",   yaxt = \"s\",   doPlot = TRUE,   cellnote = NULL,   cexCellnote = 1,   srtCellnote = 0,   fontCellnote = 1,   groupCellnotes = TRUE,   groupBy = c(\"column\", \"row\"),   groupByColors = TRUE,   adjBy = c(\"column\", \"row\"),   adjustMargins = FALSE,   interpolate = getOption(\"interpolate\", TRUE),   verbose = FALSE,   xpd = NULL,   bty = graphics::par(\"bty\"),   flip = c(\"none\", \"y\", \"x\", \"xy\"),   keepTextAlpha = FALSE,   doTest = FALSE,   add = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/imageByColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display color raster image using a matrix of colors — imageByColors","text":"x matrix data.frame containing colors useRaster logical sent imageDefault enable raster rendering, opposed polygon rendering. parameter highly recommended matrix large (>50 columns rows). fixRasterRatio logical sent imageDefault. maxRatioFix numeric sent imageDefault. xaxt, yaxt character values compatible par determine whether x- y-axes plotted. Set \"n\" suppress display axes. doPlot logical whether create plot, simply return data used create plot. cellnote matrix data.frame labels displayed image. groupCellnotes==TRUE labels placed center consecutive cells label identical color. Currently, cell text colored using setTextContrastColor uses either white black depending upon brightness background color. cexCellnote, srtCellnote, fontCellnote numeric vectors, values applied cellnote text compatible graphics::par(\"cex\"), graphics::par(\"srt\"), graphics::par(\"font\"), respectively. supplied matrix data.frame used -expanded equivalent dimensions x. vector named colnames(x) applied column order, otherwise applied row, values recycled number columns rows, respectively. Note cexCellnote can also list, list elements applied individual cells order. list named colnames(x), list element applied values column, order. future parameter may also accept matrix cex values input. Final note: values applied cell, cell labels combined groupCellnotes==TRUE, value first matching cell used. Remember values placed coordinate, bottom--top y-axis, left--right x-axis. groupCellnotes logical whether group labels consecutive cells contain label identical cell colors, thus displaying one label center groups. groupBy character value indicating direction group cellnotes, groupCellnotes=TRUE: \"row\" group cellnote values row; \"column\" group cellnote values column. default, first group cellnotes \"row\" \"column\". groupByColors logical indicating whether cellnote grouping also include cell color. groupByColors=FALSE, cellnote values grouped together regardless whether underlying colors change, may preferred applying text label topographical data. adjBy character value indicating apply adjustments cexCellnote, srtCellnote, fontCellnote, described . adjustMargins logical indicating whether adjust axis label margins ensure enough room draw text rownames colnames. interpolate logical whether implement image interpolation, default TRUE useRaster=TRUE. verbose logical whether print verbose output. xpd NULL logical used graphics::par(\"xpd\") whether crop displayed output plot area. xpd=NULL graphics::par(\"xpd\") modified, otherwise graphics::par(\"xpd\"=xpd) defined adding cell notes, reverted previous value afterward. parameter mainly useful cellnote labels may overhang plot space, cropped visible graphics::par(\"xpd\"=TRUE). bty character used control box type, default graphics::par(\"bty\") flip character string, default \"none\", optional axis flip: none: perform axis flip x: flip x-axis orientation y: flip y-axis orientation xy: flip x- y-axis orientation keepTextAlpha logical defaulit FALSE, passed setTextContrastColor(), whether text label color inherit alpha transparency background color. TRUE fully transparent background colors visible label. doTest logical whether run test showing basic features. add logical, default FALSE, whether add existing device, otherwise creates new plot. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/imageByColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display color raster image using a matrix of colors — imageByColors","text":"list invisibly, elements sufficient create image plot. function called byproduct creating image visualization.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/imageByColors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display color raster image using a matrix of colors — imageByColors","text":"function similar image except takes matrix already colors defined cell. function calls imageDefault enables updated use useRaster functionality. Additionally, cellnote supplied, contains matrix labels image cells, labels also displayed. default, labels grouped, one label displayed whenever two labels appear consecutive cells. behavior can disabled groupCellnotes=FALSE. groupCellnotes behavior uses breaksByVector() determine place consecutive labels, applies logic starting rows, columns. Note labels grouped cell color cell label identical consecutive cells. general, large rectangular set cells contains label, cell colors, resulting label positioned center. However, square symmetric, label grouped consecutive columns contain groups consecutive rows given label. helpful rotate labels partially prevent overlaps, e.g. srtCellnote=10 srtCellnote=80. : Detect size area labeled determine whether rotate label sideways. Detect size label, compared bounding box, resize label fit available space. Optionally draw border around contiguous colored labeled polygons. Whether draw border based upon color, color label, just label... may get confusing. Label proper contiguous polygons based upon color label, especially color label present multiple rows columns, always columns per row.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/imageByColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display color raster image using a matrix of colors — imageByColors","text":"","code":"a1 <- c(\"red4\",\"blue\")[c(1,1,2)]; b1 <- c(\"yellow\",\"orange\")[c(1,2,2)]; c1 <- c(\"purple\",\"orange\")[c(1,2,2)]; d1 <- c(\"purple\",\"green4\")[c(1,2,2)]; df1 <- data.frame(a=a1, b=b1, c=c1, d=d1);  # default using polygons imageByColors(df1, cellnote=df1);   # using useRaster, edges are slightly blurred with small tables imageByColors(df1, cellnote=df1, useRaster=TRUE);   # some text features, rotation, font size, etc imageByColors(df1, cellnote=df1, useRaster=TRUE, adjBy=\"column\",    cexCellnote=list(c(1.5,1.5,1), c(1,1.5), c(1.6,1.2), c(1.6,1.5)),    srtCellnote=list(c(90,0,0), c(0,45), c(0,0,0), c(0,90,0)));"},{"path":"https://jmw86069.github.io/jamba/reference/imageDefault.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a color raster image — imageDefault","title":"Display a color raster image — imageDefault","text":"Display color raster image","code":""},{"path":"https://jmw86069.github.io/jamba/reference/imageDefault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a color raster image — imageDefault","text":"","code":"imageDefault(   x = seq_len(nrow(z) + 1) - 0.5,   y = seq_len(ncol(z) + 1) - 0.5,   z,   zlim = range(z[is.finite(z)]),   xlim = range(x),   ylim = range(y),   col = grDevices::hcl.colors(12, \"YlOrRd\", rev = TRUE),   add = FALSE,   xaxs = \"i\",   yaxs = \"i\",   xaxt = \"n\",   yaxt = \"n\",   xlab,   ylab,   breaks,   flip = c(\"none\", \"x\", \"y\", \"xy\"),   oldstyle = TRUE,   useRaster = NULL,   fixRasterRatio = TRUE,   maxRatioFix = 10,   minRasterMultiple = NULL,   rasterTarget = 200,   interpolate = getOption(\"interpolate\", TRUE),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/imageDefault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a color raster image — imageDefault","text":"x numeric location grid lines intervals z measured. y numeric location grid lines intervals z measured. z numeric logical matrix containing values plotted, NA values allowed. zlim numeric range allowed values z. xlim numeric range plot x-axis, default x range. ylim numeric range plot y-axis, default y range. col character vector colors mapped values z. add logical whether add existing active R plot, create new plot window. xaxs character value compatible graphics::par(xaxs), mainly useful suppressing x-axis, order produce custom x-axis range, useful restrict axis range expansion done R default. yaxs character value compatible graphics::par(yaxs), mainly useful suppressing y-axis, order produce custom y-axis range, useful restrict axis range expansion done R default. xaxt character value compatible graphics::par(xaxt), mainly useful suppressing x-axis, order produce custom x-axis mechanisms, e.g. log-scaled x-axis tick marks. yaxt character value compatible graphics::par(yaxt), mainly useful suppressing y-axis, order produce custom y-axis mechanisms, e.g. log-scaled y-axis tick marks. xlab character label x-axis ylab character label y-axis breaks numeric vector breakpoints colors. flip character string, default \"none\", optional axis flip: none: perform axis flip x: flip x-axis orientation y: flip y-axis orientation xy: flip x- y-axis orientation oldstyle logical whether delineate axis coordinates integer spacing column row. Note: allowed parameter TRUE, since useRaster=TRUE requires . Therefore, function consistency output format. useRaster logical whether force raster image scaling, especially useful large data matrices. case bitmap raster image created instead polygons, bitmap scaled fit plot space. Otherwise, individual polygons can obscured monitor screens, may result extremely large file size writing vector image format 'PDF' 'SVG'. fixRasterRatio logical whether implement simple workaround requirement square pixels, event x- y-axis dimensions roughly equal. maxRatioFix integer maximum number times axis may replicated create matrix roughly equal x- y-axis dimensions. minRasterMultiple integer minimum number times x- y-axis duplicated, mostly useful creating useRaster=TRUE small matrix sizes, otherwise result quite blurry. example, minRasterMultiple=10 duplicate axis 10 times. Values aplied rows columns. values automatically defined minRasterMultiple NULL rasterTarget NULL. rasterTarget integer number cells cells duplicated order maintain detail. default 200 defines minRasterMultiple=c(1,1) 200 rows 200 columns, minRasterMultiple=c(1,100) 200 rows 2 columns. interpolate logical whether implement image interpolation, default TRUE useRaster=TRUE. verbose logical whether enable verbose output, useful debugging. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/imageDefault.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a color raster image — imageDefault","text":"list composed elements suitable call graphics::image.default().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/imageDefault.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display a color raster image — imageDefault","text":"function augments image function, handles useRaster parameter non-symmetric data matrices, order minimize distortion image-smoothing pixels square. function also default creates image map using coordinates integer represents center point one column row data, known default image function oldstyle=TRUE. consistency, imageDefault accept oldstyle=TRUE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/imageDefault.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a color raster image — imageDefault","text":"","code":"ps <- plotSmoothScatter(doTest=TRUE)"},{"path":"https://jmw86069.github.io/jamba/reference/isColor.html","id":null,"dir":"Reference","previous_headings":"","what":"detect valid R color — isColor","title":"detect valid R color — isColor","text":"detect valid R color","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detect valid R color — isColor","text":"","code":"isColor(x, makeNamesFunc = c, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/isColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detect valid R color — isColor","text":"x character vector potential R colors makeNamesFunc function used make names resulting vector ... additional parameters ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isColor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detect valid R color — isColor","text":"logical vector length(x).","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isColor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"detect valid R color — isColor","text":"function determines whether element vector valid R color, based upon R color names, valid hex color format, word \"transparent\" valid R color.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/isColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detect valid R color — isColor","text":"","code":"isColor(c(\"red\", \"blue\", \"beige\", \"#99000099\", \"#aa00ff\", \"#AAE\", \"bleh\")) #>       red      blue     beige #99000099   #aa00ff      #AAE      bleh  #>      TRUE      TRUE      TRUE      TRUE      TRUE      TRUE     FALSE"},{"path":"https://jmw86069.github.io/jamba/reference/isFALSEV.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized isFALSE — isFALSEV","title":"Vectorized isFALSE — isFALSEV","text":"Vectorized isFALSE","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isFALSEV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized isFALSE — isFALSEV","text":"","code":"isFALSEV(x, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/isFALSEV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized isFALSE — isFALSEV","text":"x vector ... additional arguments ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isFALSEV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized isFALSE — isFALSEV","text":"logical vector length matching x.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isFALSEV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vectorized isFALSE — isFALSEV","text":"function applies three criteria input vector, determine entry vector FALSE: must class logical. must NA. must evaluate FALSE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/isFALSEV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized isFALSE — isFALSEV","text":"","code":"isFALSEV(c(TRUE, FALSE, NA, TRUE)) #> [1] FALSE  TRUE FALSE FALSE"},{"path":"https://jmw86069.github.io/jamba/reference/isTRUEV.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized isTRUE — isTRUEV","title":"Vectorized isTRUE — isTRUEV","text":"Vectorized isTRUE","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isTRUEV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized isTRUE — isTRUEV","text":"","code":"isTRUEV(x, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/isTRUEV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized isTRUE — isTRUEV","text":"x vector ... additional arguments ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isTRUEV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized isTRUE — isTRUEV","text":"logical vector length matching x.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/isTRUEV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vectorized isTRUE — isTRUEV","text":"function applies three criteria input vector, determine entry vector TRUE: must class logical. must NA. must evaluate TRUE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/isTRUEV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized isTRUE — isTRUEV","text":"","code":"isTRUEV(c(TRUE, FALSE, NA, TRUE)) #> [1]  TRUE FALSE FALSE  TRUE"},{"path":"https://jmw86069.github.io/jamba/reference/jamCalcDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate scatter plot point density — jamCalcDensity","title":"Calculate scatter plot point density — jamCalcDensity","text":"Calculate scatter plot point density","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamCalcDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate scatter plot point density — jamCalcDensity","text":"","code":"jamCalcDensity(x, nbin, bandwidth = NULL, range.x)"},{"path":"https://jmw86069.github.io/jamba/reference/jamCalcDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate scatter plot point density — jamCalcDensity","text":"x numeric matrix two columns representing x,y coordinates. nbin integer number bins subdivide scatterplot, expanded length 2 accommodate x y axis bins. bandwidth numeric NULL representing bandwidth used point density determination. range.x numeric vector length 2 representing range values consider point density.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamCalcDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate scatter plot point density — jamCalcDensity","text":"list elements used internally plotSmoothScatter(), : x1, x2, fhat, bandwidth.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamCalcDensity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate scatter plot point density — jamCalcDensity","text":"function called internally plotSmoothScatter(), equivalent replacement grDevices non-exported function .smoothScatterCalcDensity(), understandably requirement CRAN. package rely another package hidden function.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/jamCalcDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate scatter plot point density — jamCalcDensity","text":"","code":"sdim(jamCalcDensity(cbind(x=rnorm(1000) + 4, y=rnorm(1000) + 4), nbin=30)) #>           rows cols   class class_v2 #> x1          30      numeric     <NA> #> x2          30      numeric     <NA> #> fhat        30   30  matrix    array #> bandwidth    1    2  matrix    array"},{"path":"https://jmw86069.github.io/jamba/reference/jam_rapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Jam-specific recursive apply — jam_rapply","title":"Jam-specific recursive apply — jam_rapply","text":"Jam-specific recursive apply","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jam_rapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jam-specific recursive apply — jam_rapply","text":"","code":"jam_rapply(x, FUN, how = c(\"unlist\", \"list\"), ...)"},{"path":"https://jmw86069.github.io/jamba/reference/jam_rapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jam-specific recursive apply — jam_rapply","text":"x list FUN function called non-list elements x. character string indicating whether return list whether call unlist() result. ... additional arguments passed FUN.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jam_rapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jam-specific recursive apply — jam_rapply","text":"vector list based upon argument .","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jam_rapply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jam-specific recursive apply — jam_rapply","text":"function lightweight customization base::rapply(), specifically remove NULL entries.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/jam_rapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jam-specific recursive apply — jam_rapply","text":"","code":"L <- list(entryA=c(\"miR-112\", \"miR-12\", \"miR-112\"),    entryB=factor(c(\"A\",\"B\",\"A\",\"B\"),       levels=c(\"B\",\"A\")),    entryC=factor(c(\"C\",\"A\",\"B\",\"B\",\"C\"),       levels=c(\"A\",\"B\",\"C\")),    entryNULL=NULL) rapply(L, length) #> entryA entryB entryC  #>      3      4      5  jam_rapply(L, length) #>    entryA    entryB    entryC entryNULL  #>         3         4         5         0   L0 <- list(A=1:3, B=list(C=1:3, D=4:5, E=NULL)); rapply(L0, length) #>   A B.C B.D  #>   3   3   2  jam_rapply(L0, length) #>   A B.C B.D B.E  #>   3   3   2   0"},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":null,"dir":"Reference","previous_headings":"","what":"jamba: Jam Base Methods — jamba-package","title":"jamba: Jam Base Methods — jamba-package","text":"jamba package contains several jam base functions re-usable routine R analysis work, important dependencies Jam R packages.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"jamba: Jam Base Methods — jamba-package","text":"See function reference complete list functions. goal implement methods lightweight possible, inclusion analysis workflow incur noticeable burden.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":"plot-functions","dir":"Reference","previous_headings":"","what":"plot functions","title":"jamba: Jam Base Methods — jamba-package","text":"plotSmoothScatter() smoothScatter() enhanced visual detail imageDefault() enhanced rasterized image() fixed aspect ratio imageByColors() data.frame colors optional labels centered across repeated values. showColors() color display vector, list, color function, mixed formats. nullPlot() blank plot labels current margin sizes minorLogTicksAxis() log-scale axis ticks base R custom log base, optional offset, e.g. log2(1 + x) shadowText() base R text labels shadow outline , also shadowText_options(). getPlotAspect(), decideMfrow() convenience base R graphics.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":"string-functions","dir":"Reference","previous_headings":"","what":"string functions","title":"jamba: Jam Base Methods — jamba-package","text":"mixedSort(), mixedOrder(), mixedSortDF() - efficient alphanumeric \"version\" sort, options helpful gene symbols. vgrep(), vigrep(), igrep(), vigrep() fast grep wrappers value-return, case-insensitive search. provigrep(), proigrep() - progressive, ordered grep use pattern matching re-order vector. makeNames() create unique, versioned names custom format nameVector() apply names vector dynamically nameVectorN() vector named names useful lapply(). pasteByRow(), pasteByRowOrdered() paste data.frame matrix values row, skipping blanks, optional factor order. rbindList() convert list matrix data.frame. tcount() extends table() sort size optional minimum count filter.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":"color-functions","dir":"Reference","previous_headings":"","what":"color functions","title":"jamba: Jam Base Methods — jamba-package","text":"rgb2col(), col2hcl(), col2hcl(), col2hsv(), hsv2col() color interconversion setTextContrastColor() text contrast color per given background color getColorRamp() catch-get named gradients, expand one colors gradient. makeColorDarker(), color2gradient(), showColors() color manipulation display","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":"miscellaneous-helper-functions","dir":"Reference","previous_headings":"","what":"miscellaneous helper functions","title":"jamba: Jam Base Methods — jamba-package","text":"printDebug() colored text output console, 'Rmarkdown', HTML kable_coloring() colored kableExtra::kable() output 'Rmarkdown' setPrompt() colored R prompt deg2rad(), rad2deg() interconvert degrees radians. getDate(), asDate(), dateToDaysOld() human-readable, opinionated date formatting padString(), padInteger() pad character integer strings rmNA(), rmNULL(), rmInfinite() remove replace missing NA values defined alternatives","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":"export-and-import-functions","dir":"Reference","previous_headings":"","what":"export and import functions","title":"jamba: Jam Base Methods — jamba-package","text":"readOpenxlsx() import worksheets 'xlsx' 'Excel' files. writeOpenxlsx() export worksheets 'xlsx' 'Excel' files color, formatting, styling.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":"jam-options","dir":"Reference","previous_headings":"","what":"Jam options","title":"jamba: Jam Base Methods — jamba-package","text":"jamba package recognizes global options, limits options include non-analysis options. example, global option change numerical manipulation data. jam.lightMode - logical whether R console graphical background light dark, printDebug() limits luminance range maximize visual contrast. jam.Crange,jam.Lrange - numerical values used printDebug() maximize visual contrast, used jam.lightMode. jam.shadowColor,jam.shadow.r,jam.shadow.n,jam.alphaShadow, jam.outline,jam.alphaOutline customize details shadowText(), see shadowText_options() convenience.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/jamba-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jamba: Jam Base Methods — jamba-package","text":"Maintainer: James M. Ward jmw86069@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jargs.html","id":null,"dir":"Reference","previous_headings":"","what":"Show R function arguments jam-style — jargs","title":"Show R function arguments jam-style — jargs","text":"Show R function arguments jam-style","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jargs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show R function arguments jam-style — jargs","text":"","code":"jargs(   x,   grepString = NULL,   sortVars = FALSE,   useMessage = TRUE,   asList = TRUE,   useColor = TRUE,   lightMode = NULL,   Crange = getOption(\"jam.Crange\"),   Lrange = getOption(\"jam.Lrange\"),   adjustRgb = getOption(\"jam.adjustRgb\"),   useCollapseBase = \", \",   verbose = FALSE,   debug = 0,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/jargs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show R function arguments jam-style — jargs","text":"x function character name function. grepString NULL, logical, character grep regular expression pattern used filter function arguments name. useful search function arguments substring \"row\". logical, assumed sortVars, indicates whether sort parameter names. character subset function arguments name matching regular expression pattern. sortVars logical whether sort function parameter names. sortVars=FALSE returns arguments order appear function definition. sortVars=TRUE returns arguments sorted alphabetically. useMessage logical default TRUE, whether print output using message(), otherwise text returned invisibly displayed separately. asList logical default TRUE, display one entry per line display results data.frame. useColor logical whether display results color, crayon package available, terminal console capable. lightMode logical NULL, indicating whether text background color light, thus imposing maximum brightness colors displayed. use lightMode defined function caller, otherwise use getOption(\"jam.lightMode\") defined, lastly attempt detect whether running inside Rstudio checking environment variable \"RSTUDIO\", assume lightMode==TRUE. Crange numeric range chroma values, ranging 0 100. NULL, default values assigned Crange setCLranges(). Lrange numeric range luminance values, ranging 0 100. NULL, default values assigned Lrange setCLranges(). adjustRgb numeric value adjustment used conversion RGB colors ANSI colors, inherently lossy. defined, uses default returned setCLranges() uses getOption(\"jam.adjustRgb\") default=0. order boost color contrast, alternate value -0.1 suggested. useCollapseBase character string used combine multiple parameter values. verbose logical whether print verbose output. debug integer value, greater 0 cause debug-type verbose output, useful parameters hard! ... Additional arguments installed.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jargs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show R function arguments jam-style — jargs","text":"NULL function called byproduct printing output.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/jargs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show R function arguments jam-style — jargs","text":"function displays R function arguments, organized one argument per line, colorized using crayon package installed. Output nicely spaced help visual alignment argument names argument values. Output can filtered character pattern. example function ComplexHeatmap::Heatmap() amazing, offers numerous arguments. find arguments relevant dendrograms, use \"dend\": jargs(ComplexHeatmap::Heatmap, \"dend\") NOTE: function edge case issues displaying complex function argument values nested lists custom functions. case argument name printed usual, argument value displayed partial snippet default argument value. Generic functions often contain useful parameters, making difficult discover required parameters without reading function documentation proper dispatched function calling package. case, try using jargs(functionname.default) example compare: jargs(barplot) : jargs(barplot.default)","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/jargs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show R function arguments jam-style — jargs","text":"","code":"args(jargs) #> function (x, grepString = NULL, sortVars = FALSE, useMessage = TRUE,  #>     asList = TRUE, useColor = TRUE, lightMode = NULL, Crange = getOption(\"jam.Crange\"),  #>     Lrange = getOption(\"jam.Lrange\"), adjustRgb = getOption(\"jam.adjustRgb\"),  #>     useCollapseBase = \", \", verbose = FALSE, debug = 0, ...)  #> NULL jargs(jargs) #>               x = , #>      grepString = NULL, #>        sortVars = FALSE, #>      useMessage = TRUE, #>          asList = TRUE, #>        useColor = TRUE, #>       lightMode = NULL, #>          Crange = getOption(\"jam.Crange\"), #>          Lrange = getOption(\"jam.Lrange\"), #>       adjustRgb = getOption(\"jam.adjustRgb\"), #> useCollapseBase = \", \", #>         verbose = FALSE, #>           debug = 0, #>             ... =   # retrieve parameters involving notes from imageByColors jargs(imageByColors, \"note\") #>       cellnote = NULL, #>    cexCellnote = 1, #>    srtCellnote = 0, #>   fontCellnote = 1, #> groupCellnotes = TRUE"},{"path":"https://jmw86069.github.io/jamba/reference/kable_coloring.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend kableExtra colorization of 'Rmarkdown' tables — kable_coloring","title":"Extend kableExtra colorization of 'Rmarkdown' tables — kable_coloring","text":"Extend kableExtra colorization 'Rmarkdown' tables","code":""},{"path":"https://jmw86069.github.io/jamba/reference/kable_coloring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend kableExtra colorization of 'Rmarkdown' tables — kable_coloring","text":"","code":"kable_coloring(   df,   colorSub = NULL,   background_as_tile = TRUE,   color_cells = TRUE,   row_color_by = NULL,   sep = \"_\",   border_left = \"1px solid #DDDDDD\",   border_right = FALSE,   extra_css = \"white-space: nowrap;\",   format = \"html\",   format.args = list(trim = TRUE, big.mark = \",\"),   row.names = NA,   align = NULL,   return_type = c(\"kable\", \"data.frame\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/kable_coloring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend kableExtra colorization of 'Rmarkdown' tables — kable_coloring","text":"df data.frame input. Note kable input supported. colorSub one following inputs: character vector R colors, whose names match entries data.frame given assigned colors function takes column values input, returns character vector one color per value, using NA NULL indicate \"transparent\" list whose names match colnames(df), entry contains either character function option described . character vector named values expected column. function take column values input, return character vector length R colors. background_as_tile logical default TRUE, whether cell background color appear rounded tile (TRUE) rectangle (FALSE). Either way, color fill entire whitespace table cell, around text . color_cells logical indicating whether color individual cells, default TRUE. may FALSE also applying row_color_by, entire row colorized. row_color_by character vector one colnames, indicating colorize entire rows table. one column defined, colors colorSub used normal. multiple columns defined, values column concatenated using sep delimiter. resulting values compared colorSub. sep character delimiter used combine values multiple columns row_color_by supplied contains multiple colnames. delimited character strings compared colorSub assign colors. border_left, border_right, extra_css character values optionally passed kableExtra::column_spec() convenient way apply borders column (border_left, border_right) enable disable word-wrapping column. helpful examples: border_left=FALSE: disables left border border_left=\"1px solid #DDDDDD\": light gray 1 pixel left border border_right=FALSE: disables right border border_right=\"1px solid #DDDDDD\": light gray 1 pixel right border extra_css=NULL: disables word-wrap extra_css=\"whitespace: nowrap;\": enables text word-wrap options contain FALSE NULL, kableExtra::column_spec() applied. format character passed knitr::kable(), default \"html\" intended format scenarios. can set NULL enable auto-detection format. format.args list arguments passed base::format() intended mainly numeric columns. row.names logical indicating whether include rownames(df). row.names=NA default display rownames NULL equal 1:nrow(df). align character passed kableExtra::kable() define alignment column. return_type character string indicating type data return. return_type=\"kable\": (default) returns object class \"kableExtra\", \"knitr_kable\" suitable downstream processing. return_type=\"data.frame\": returns data.frame whose cells contain HTML markup corresponding colors defined. verbose boolean indicating whether print verbose output. ... additional arguments passed kableExtra::kable() allows usual customizations initial call.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/kable_coloring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend kableExtra colorization of 'Rmarkdown' tables — kable_coloring","text":"object class c(\"kableExtra\", \"knitr_kable\") default return_type=\"kable\", suitable render inside 'Rmarkdown' HTML context. returns data.frame return_type=\"data.frame\".","code":""},{"path":"https://jmw86069.github.io/jamba/reference/kable_coloring.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extend kableExtra colorization of 'Rmarkdown' tables — kable_coloring","text":"function extends kableExtra package, available use kableExtra package installed. intended allow specific color assignment elements data.frame, otherwise uses kableExtra functions apply colors. use case provide colorized HTML output 'Rmarkdown', tested format output. argument colorSub accepts: character vector input names match column values function accepts column values returns character vector colors equal length list input names match colnames(df), list element contain either character vector, function described .","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/kable_coloring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend kableExtra colorization of 'Rmarkdown' tables — kable_coloring","text":"","code":"expt_df <- data.frame(    Sample_ID=\"\",    Treatment=rep(c(\"Vehicle\", \"Dex\"), each=6),    Genotype=rep(c(\"Wildtype\", \"Knockout\"), each=3),    Rep=paste0(\"rep\", c(1:3))) expt_df$Sample_ID <- pasteByRow(expt_df[, 2:4])  # define colors colorSub <- c(Vehicle=\"palegoldenrod\",    Dex=\"navy\",    Wildtype=\"gold\",    Knockout=\"firebrick\",    nameVector(       color2gradient(\"grey48\", n=3, dex=10),       rep(\"rep\", 3),       suffix=\"\"),    nameVector(       color2gradient(n=3,          c(\"goldenrod1\", \"indianred3\", \"royalblue3\", \"darkorchid4\")),       expt_df$Sample_ID)) kbl <- kable_coloring(    expt_df,    caption=\"Experiment design table showing categorical color assignment.\",    colorSub) # Note that the HTML table is rendered in 'Rmarkdown', not pkgdown kbl #> <table class=\"table\" style=\"margin-left: auto; margin-right: auto;\"> #> <caption>Experiment design table showing categorical color assignment.<\/caption> #>  <thead> #>   <tr> #>    <th style=\"text-align:left;\"> Sample_ID <\/th> #>    <th style=\"text-align:left;\"> Treatment <\/th> #>    <th style=\"text-align:left;\"> Genotype <\/th> #>    <th style=\"text-align:left;\"> Rep <\/th> #>   <\/tr> #>  <\/thead> #> <tbody> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(255, 204, 76, 255) !important;\">Vehicle_Wildtype_rep1<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\">Vehicle<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\">Wildtype<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(192, 192, 192, 255) !important;\">rep1<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(232, 175, 34, 255) !important;\">Vehicle_Wildtype_rep2<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\">Vehicle<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\">Wildtype<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(122, 122, 122, 255) !important;\">rep2<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(208, 156, 24, 255) !important;\">Vehicle_Wildtype_rep3<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\">Vehicle<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\">Wildtype<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(71, 71, 71, 255) !important;\">rep3<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(218, 118, 118, 255) !important;\">Vehicle_Knockout_rep1<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\">Vehicle<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\">Knockout<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(192, 192, 192, 255) !important;\">rep1<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(205, 85, 85, 255) !important;\">Vehicle_Knockout_rep2<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\">Vehicle<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\">Knockout<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(122, 122, 122, 255) !important;\">rep2<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(158, 49, 49, 255) !important;\">Vehicle_Knockout_rep3<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\">Vehicle<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\">Knockout<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(71, 71, 71, 255) !important;\">rep3<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(100, 130, 219, 255) !important;\">Dex_Wildtype_rep1<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\">Dex<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\">Wildtype<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(192, 192, 192, 255) !important;\">rep1<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(58, 95, 205, 255) !important;\">Dex_Wildtype_rep2<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\">Dex<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\">Wildtype<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(122, 122, 122, 255) !important;\">rep2<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(31, 62, 154, 255) !important;\">Dex_Wildtype_rep3<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\">Dex<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\">Wildtype<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(71, 71, 71, 255) !important;\">rep3<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(145, 81, 177, 255) !important;\">Dex_Knockout_rep1<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\">Dex<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\">Knockout<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(192, 192, 192, 255) !important;\">rep1<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(104, 34, 139, 255) !important;\">Dex_Knockout_rep2<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\">Dex<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\">Knockout<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(122, 122, 122, 255) !important;\">rep2<\/span> <\/td> #>   <\/tr> #>   <tr> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(73, 17, 102, 255) !important;\">Dex_Knockout_rep3<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\">Dex<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\">Knockout<\/span> <\/td> #>    <td style=\"text-align:left;border-left:1px solid #DDDDDD;white-space: nowrap;\"> <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(71, 71, 71, 255) !important;\">rep3<\/span> <\/td> #>   <\/tr> #> <\/tbody> #> <\/table>  # return_type=\"data.frame\" is a data.frame with HTML contents kdf3 <- kable_coloring(    return_type=\"data.frame\",    df=expt_df,    colorSub=colorSub) kdf3; #>                                                                                                                                                                                                      Sample_ID #> 1       <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(255, 204, 76, 255) !important;\" >Vehicle_Wildtype_rep1<\/span> #> 2       <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(232, 175, 34, 255) !important;\" >Vehicle_Wildtype_rep2<\/span> #> 3       <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(208, 156, 24, 255) !important;\" >Vehicle_Wildtype_rep3<\/span> #> 4      <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(218, 118, 118, 255) !important;\" >Vehicle_Knockout_rep1<\/span> #> 5  <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(205, 85, 85, 255) !important;\" >Vehicle_Knockout_rep2<\/span> #> 6  <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(158, 49, 49, 255) !important;\" >Vehicle_Knockout_rep3<\/span> #> 7    <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(100, 130, 219, 255) !important;\" >Dex_Wildtype_rep1<\/span> #> 8      <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(58, 95, 205, 255) !important;\" >Dex_Wildtype_rep2<\/span> #> 9      <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(31, 62, 154, 255) !important;\" >Dex_Wildtype_rep3<\/span> #> 10    <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(145, 81, 177, 255) !important;\" >Dex_Knockout_rep1<\/span> #> 11    <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(104, 34, 139, 255) !important;\" >Dex_Knockout_rep2<\/span> #> 12     <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(73, 17, 102, 255) !important;\" >Dex_Knockout_rep3<\/span> #>                                                                                                                                                                         Treatment #> 1  <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\" >Vehicle<\/span> #> 2  <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\" >Vehicle<\/span> #> 3  <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\" >Vehicle<\/span> #> 4  <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\" >Vehicle<\/span> #> 5  <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\" >Vehicle<\/span> #> 6  <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: palegoldenrod !important;\" >Vehicle<\/span> #> 7         <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\" >Dex<\/span> #> 8         <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\" >Dex<\/span> #> 9         <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\" >Dex<\/span> #> 10        <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\" >Dex<\/span> #> 11        <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\" >Dex<\/span> #> 12        <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: navy !important;\" >Dex<\/span> #>                                                                                                                                                                             Genotype #> 1             <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\" >Wildtype<\/span> #> 2             <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\" >Wildtype<\/span> #> 3             <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\" >Wildtype<\/span> #> 4  <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\" >Knockout<\/span> #> 5  <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\" >Knockout<\/span> #> 6  <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\" >Knockout<\/span> #> 7             <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\" >Wildtype<\/span> #> 8             <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\" >Wildtype<\/span> #> 9             <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: gold !important;\" >Wildtype<\/span> #> 10 <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\" >Knockout<\/span> #> 11 <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\" >Knockout<\/span> #> 12 <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: firebrick !important;\" >Knockout<\/span> #>                                                                                                                                                                                             Rep #> 1        <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(192, 192, 192, 255) !important;\" >rep1<\/span> #> 2  <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(122, 122, 122, 255) !important;\" >rep2<\/span> #> 3     <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(71, 71, 71, 255) !important;\" >rep3<\/span> #> 4        <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(192, 192, 192, 255) !important;\" >rep1<\/span> #> 5  <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(122, 122, 122, 255) !important;\" >rep2<\/span> #> 6     <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(71, 71, 71, 255) !important;\" >rep3<\/span> #> 7        <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(192, 192, 192, 255) !important;\" >rep1<\/span> #> 8  <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(122, 122, 122, 255) !important;\" >rep2<\/span> #> 9     <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(71, 71, 71, 255) !important;\" >rep3<\/span> #> 10       <span style=\"     color: rgba(0, 0, 0, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(192, 192, 192, 255) !important;\" >rep1<\/span> #> 11 <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(122, 122, 122, 255) !important;\" >rep2<\/span> #> 12    <span style=\"     color: rgba(255, 255, 255, 255) !important;border-radius: 4px; padding-right: 4px; padding-left: 4px; background-color: rgba(71, 71, 71, 255) !important;\" >rep3<\/span>"},{"path":"https://jmw86069.github.io/jamba/reference/list2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list of vectors to data.frame with item, value, name — list2df","title":"Convert list of vectors to data.frame with item, value, name — list2df","text":"Convert list vectors data.frame item, value, name","code":""},{"path":"https://jmw86069.github.io/jamba/reference/list2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list of vectors to data.frame with item, value, name — list2df","text":"","code":"list2df(x, makeUnique = TRUE, useVectorNames = TRUE, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/list2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list of vectors to data.frame with item, value, name — list2df","text":"x list vectors makeUnique logical indicating whether data.frame contain unique rows. useVectorNames logical indicating whether vector names included data.frame, exist. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/list2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list of vectors to data.frame with item, value, name — list2df","text":"data.frame two columns, three columns useVectorNames=TRUE input x contains names.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/list2df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert list of vectors to data.frame with item, value, name — list2df","text":"function converts list vectors tall data.frame colnames item indicate list name, value indicate vector value, name indicate vector name useVectorNames=TRUE names exist.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/list2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert list of vectors to data.frame with item, value, name — list2df","text":"","code":"list2df(list(lower=head(letters, 5), UPPER=head(LETTERS, 10))) #>     item value #> 1  lower     a #> 2  lower     b #> 3  lower     c #> 4  lower     d #> 5  lower     e #> 6  UPPER     A #> 7  UPPER     B #> 8  UPPER     C #> 9  UPPER     D #> 10 UPPER     E #> 11 UPPER     F #> 12 UPPER     G #> 13 UPPER     H #> 14 UPPER     I #> 15 UPPER     J  list2df(list(lower=nameVector(head(letters, 5)),    UPPER=nameVector(head(LETTERS, 10)))) #>     item value name #> 1  lower     a    a #> 2  lower     b    b #> 3  lower     c    c #> 4  lower     d    d #> 5  lower     e    e #> 6  UPPER     A    A #> 7  UPPER     B    B #> 8  UPPER     C    C #> 9  UPPER     D    D #> 10 UPPER     E    E #> 11 UPPER     F    F #> 12 UPPER     G    G #> 13 UPPER     H    H #> 14 UPPER     I    I #> 15 UPPER     J    J  list2df(list(lower=nameVector(head(letters, 5)),    UPPER=nameVector(head(LETTERS, 10))),    useVectorNames=FALSE) #>     item value #> 1  lower     a #> 2  lower     b #> 3  lower     c #> 4  lower     d #> 5  lower     e #> 6  UPPER     A #> 7  UPPER     B #> 8  UPPER     C #> 9  UPPER     D #> 10 UPPER     E #> 11 UPPER     F #> 12 UPPER     G #> 13 UPPER     H #> 14 UPPER     I #> 15 UPPER     J"},{"path":"https://jmw86069.github.io/jamba/reference/lldf.html","id":null,"dir":"Reference","previous_headings":"","what":"Long listing of R session objects — lldf","title":"Long listing of R session objects — lldf","text":"Long listing R session objects","code":""},{"path":"https://jmw86069.github.io/jamba/reference/lldf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Long listing of R session objects — lldf","text":"","code":"lldf(   n = Inf,   envir = -1L,   items = NULL,   use_utils_objectsize = TRUE,   all.names = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/lldf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Long listing of R session objects — lldf","text":"n integer Inf indicating many objects include output data.frame. envir environment list objects obtained, default -1L searches environment caller, usually user workspace. recognized options: character string suitable .environment() recognizes search path returned search() integer numeric equivalent environment relative position used ls() argument pos. items character items include, default NULL. use_utils_objectsize logical, default TRUE, whether prefer utils::object.size(), otherwise attempt use pryr::object_size() package installed. .names logical passed base::ls() indicating whether include names, .names=TRUE include hidden objects whose name begin \".\" \".First\". ... additional arguments passed ls(), notably pattern can passed subset objects regular expression.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/lldf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Long listing of R session objects — lldf","text":"data.frame summary objects object sizes, sorted decreasing object size.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/lldf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Long listing of R session objects — lldf","text":"function expands base::ls() also determining object size, sorting display top n objects size, largest first. package call pryr::object_size available, otherwise falls back utils::object.size().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/lldf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Long listing of R session objects — lldf","text":"","code":"lldf(10); #> $size #> character(0) #>   # custom environment newenv <- new.env(); newenv$A <- 1:10; newenv$df <- data.frame(A=1:10, B=11:20); lldf(envir=newenv); #>    name      class bytes      size #> df   df data.frame   944 944 bytes #> A     A    integer    96  96 bytes rm(newenv);"},{"path":"https://jmw86069.github.io/jamba/reference/log2signed.html","id":null,"dir":"Reference","previous_headings":"","what":"log2 transformation with directionality — log2signed","title":"log2 transformation with directionality — log2signed","text":"log2 transformation directionality","code":""},{"path":"https://jmw86069.github.io/jamba/reference/log2signed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"log2 transformation with directionality — log2signed","text":"","code":"log2signed(x, offset = 1, base = 2, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/log2signed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"log2 transformation with directionality — log2signed","text":"x numeric vector offset numeric value added absolute values x prior applying log transformation. base numeric value indicating logarithmic base, default 2 order apply base::log2(). ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/log2signed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"log2 transformation with directionality — log2signed","text":"numeric vector log-transformed magnitudes.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/log2signed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"log2 transformation with directionality — log2signed","text":"function applies log2 transformation maintains sign input data, allowing log2 transformation negative values. method applies offset absolute value abs(x), order handle values zero 1, applies log2 transformation, multiplies original sign sign(x). argument offset used adjust values, example offset=1 apply log2 transformation log2(1 + x), except using absolute value x. method allows positive negative input data contain values 0 1, -1 0. function described applying log2 transformation \"magnitude\" values x, maintaining positive negative directionality. abs(x) less offset function raise error.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/log2signed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"log2 transformation with directionality — log2signed","text":"","code":"x <- c(-100:100)/10; log2signed(x); #>   [1] -3.4594316 -3.4462562 -3.4329594 -3.4195389 -3.4059924 -3.3923174 #>   [7] -3.3785116 -3.3645724 -3.3504972 -3.3362834 -3.3219281 -3.3074285 #>  [13] -3.2927817 -3.2779847 -3.2630344 -3.2479275 -3.2326608 -3.2172307 #>  [19] -3.2016339 -3.1858665 -3.1699250 -3.1538053 -3.1375035 -3.1210154 #>  [25] -3.1043367 -3.0874628 -3.0703893 -3.0531113 -3.0356239 -3.0179219 #>  [31] -3.0000000 -2.9818527 -2.9634741 -2.9448584 -2.9259994 -2.9068906 #>  [37] -2.8875253 -2.8678965 -2.8479969 -2.8278190 -2.8073549 -2.7865964 #>  [43] -2.7655347 -2.7441611 -2.7224660 -2.7004397 -2.6780719 -2.6553518 #>  [49] -2.6322682 -2.6088092 -2.5849625 -2.5607150 -2.5360529 -2.5109619 #>  [55] -2.4854268 -2.4594316 -2.4329594 -2.4059924 -2.3785116 -2.3504972 #>  [61] -2.3219281 -2.2927817 -2.2630344 -2.2326608 -2.2016339 -2.1699250 #>  [67] -2.1375035 -2.1043367 -2.0703893 -2.0356239 -2.0000000 -1.9634741 #>  [73] -1.9259994 -1.8875253 -1.8479969 -1.8073549 -1.7655347 -1.7224660 #>  [79] -1.6780719 -1.6322682 -1.5849625 -1.5360529 -1.4854268 -1.4329594 #>  [85] -1.3785116 -1.3219281 -1.2630344 -1.2016339 -1.1375035 -1.0703893 #>  [91] -1.0000000 -0.9259994 -0.8479969 -0.7655347 -0.6780719 -0.5849625 #>  [97] -0.4854268 -0.3785116 -0.2630344 -0.1375035  0.0000000  0.1375035 #> [103]  0.2630344  0.3785116  0.4854268  0.5849625  0.6780719  0.7655347 #> [109]  0.8479969  0.9259994  1.0000000  1.0703893  1.1375035  1.2016339 #> [115]  1.2630344  1.3219281  1.3785116  1.4329594  1.4854268  1.5360529 #> [121]  1.5849625  1.6322682  1.6780719  1.7224660  1.7655347  1.8073549 #> [127]  1.8479969  1.8875253  1.9259994  1.9634741  2.0000000  2.0356239 #> [133]  2.0703893  2.1043367  2.1375035  2.1699250  2.2016339  2.2326608 #> [139]  2.2630344  2.2927817  2.3219281  2.3504972  2.3785116  2.4059924 #> [145]  2.4329594  2.4594316  2.4854268  2.5109619  2.5360529  2.5607150 #> [151]  2.5849625  2.6088092  2.6322682  2.6553518  2.6780719  2.7004397 #> [157]  2.7224660  2.7441611  2.7655347  2.7865964  2.8073549  2.8278190 #> [163]  2.8479969  2.8678965  2.8875253  2.9068906  2.9259994  2.9448584 #> [169]  2.9634741  2.9818527  3.0000000  3.0179219  3.0356239  3.0531113 #> [175]  3.0703893  3.0874628  3.1043367  3.1210154  3.1375035  3.1538053 #> [181]  3.1699250  3.1858665  3.2016339  3.2172307  3.2326608  3.2479275 #> [187]  3.2630344  3.2779847  3.2927817  3.3074285  3.3219281  3.3362834 #> [193]  3.3504972  3.3645724  3.3785116  3.3923174  3.4059924  3.4195389 #> [199]  3.4329594  3.4462562  3.4594316 plot(x=x, y=log2signed(x), xlab=\"x\", ylab=\"log2signed(x)\")"},{"path":"https://jmw86069.github.io/jamba/reference/makeColorDarker.html","id":null,"dir":"Reference","previous_headings":"","what":"make R colors darker (or lighter) — makeColorDarker","title":"make R colors darker (or lighter) — makeColorDarker","text":"Makes R colors darker lighter based upon darkFactor","code":""},{"path":"https://jmw86069.github.io/jamba/reference/makeColorDarker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make R colors darker (or lighter) — makeColorDarker","text":"","code":"makeColorDarker(   hexColor,   darkFactor = 2,   sFactor = 1,   fixAlpha = NULL,   verbose = FALSE,   keepNA = FALSE,   useMethod = 1,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/makeColorDarker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make R colors darker (or lighter) — makeColorDarker","text":"hexColor character vector colors adjust darkFactor numeric value adjust darkness, values 1 make color darker, values 1 (0) make color brighter. sFactor numeric value adjust saturation, values 1 become saturated. fixAlpha numeric, default NULL, assign fixed alpha transparency value, 0 transparent 1 opaque. verbose logical indicating whether print verbose output. keepNA logical, default FALSE, whether keep NA values NA values output, otherwise NA values considered grey input. useMethod integer two alternate methods, 1 default. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/makeColorDarker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make R colors darker (or lighter) — makeColorDarker","text":"character vector R colors.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/makeColorDarker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"make R colors darker (or lighter) — makeColorDarker","text":"function originally intended create border colors, create slightly darker colors used labels. also useful making colors lighter, adjusting color saturation , applying alpha transparency step. Note colors brightened beyond value=1, saturation gradually reduced order produce visibly lighter color. saturation minimu set 0.2, maintain least amount color.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/makeColorDarker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make R colors darker (or lighter) — makeColorDarker","text":"","code":"colorV <- c(\"red\",\"orange\",\"purple\",\"blue\"); colorVdark2 <- makeColorDarker(colorV, darkFactor=2); colorVlite2 <- makeColorDarker(colorV, darkFactor=-2); showColors(cexCellnote=0.7,    list(    `darkFactor=2`=colorVdark2,    `original colors`=colorV,    `darkFactor=-2`=colorVlite2    ));   # these adjustments work really well inside a network diagram # when coloring nodes, and providing an outline of comparable # color. plot(x=c(1,2,1,2), y=c(1,2,2,1), pch=21,    xaxt=\"n\", yaxt=\"n\", xlab=\"\", ylab=\"\",    xlim=c(0.5,2.5), ylim=c(0.5,2.5),    bg=colorV, col=colorVdark2, cex=4, lwd=2); graphics::points(x=c(1,2,1,2), y=c(1,2,2,1), pch=20, cex=4,    col=colorVlite2);  # Making a color lighter can make it easier to add labels # The setTextContrastColor() function also helps. graphics::text(x=c(1,2,1,2), y=c(1,2,2,1), 1:4,    col=setTextContrastColor(colorVlite2));"},{"path":"https://jmw86069.github.io/jamba/reference/makeNames.html","id":null,"dir":"Reference","previous_headings":"","what":"make unique vector names — makeNames","title":"make unique vector names — makeNames","text":"make unique vector names","code":""},{"path":"https://jmw86069.github.io/jamba/reference/makeNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make unique vector names — makeNames","text":"","code":"makeNames(   x,   unique = TRUE,   suffix = \"_v\",   renameOnes = FALSE,   doPadInteger = FALSE,   startN = 1,   numberStyle = c(\"number\", \"letters\", \"LETTERS\"),   useNchar = NULL,   renameFirst = TRUE,   keepNA = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/makeNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make unique vector names — makeNames","text":"x character vector used defining names. vector types coerced character prior use. unique argument ignored, included compatibility base::make.names. results makeNames() unique. suffix character separator original entry version, necessary. renameOnes logical whether rename single, unduplicated, entries. doPadInteger logical whether pad integer values consistent number digits, based upon suffix values needed. output allows consistent sorting names. define fixed number digits, use useNchar parameter. startN integer number used numberStyle \"number\", integer used first entry renamed. can use value make zero-based suffix values, example. numberStyle character style version numbering \"number\" Use integer numbers represent duplicated entry. \"letters\" Use lowercase letters represent duplicated entry. 27th entry uses pattern \"aa\" represent two 26-base digits. doPadInteger=TRUE, zero still used pad resulting version numbers, allow easy sorting text values, also letter equivalent number zero. usually best change suffix \"_\" \"\" using \"letters\". \"LETTERS\" Use uppercase letters represent duplicated entry, rules applied \"letters\". useNchar integer NULL, number digits use padding integer values leading zero, relevant usePadInteger=TRUE. renameFirst logical whether rename first entry set duplicated entries. FALSE first entry set versioned, even renameOnes=TRUE. keepNA logical whether retain NA values using string \"NA\". keepNA FALSE, NA values remain NA, thus causing names become <NA>, can cause problems downstream functions assume names either NULL non-NA. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/makeNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make unique vector names — makeNames","text":"character vector unique names","code":""},{"path":"https://jmw86069.github.io/jamba/reference/makeNames.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"make unique vector names — makeNames","text":"function extends basic goal make.names intended make syntactically valid names character vector. makeNames function makes names unique, offers configurable methods handle duplicate names. default, duplicated entries receive suffix _v# # s running count entries observed, starting 1. make.names function, contrast, renames second observed entry starting .1, leaving original entry unchanged. Optionally, makeNames can rename entries numeric suffix, consistency. example: , , , B, B, C becomes: A_v1, A_v2, A_v3, B_v1, B_v2, C Also, makeNames always allows \"_\". makeNames function similar make.unique also converts vector unique vector adding suffix values, however make.unique function intends allow repeated operations recognize duplicated entries continually increment suffix number. makeNames function currently handle repeat operations. recommended approach workaround pre-existing versioned names remove suffix values prior running function. One small distinction make.unique makeNames version first entry set.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/makeNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make unique vector names — makeNames","text":"","code":"V <- rep(LETTERS[1:3], c(2,3,1)); makeNames(V); #> [1] \"A_v1\" \"A_v2\" \"B_v1\" \"B_v2\" \"B_v3\" \"C\"    makeNames(V, renameOnes=TRUE); #> [1] \"A_v1\" \"A_v2\" \"B_v1\" \"B_v2\" \"B_v3\" \"C_v1\" makeNames(V, renameFirst=FALSE); #> [1] \"A\"    \"A_v1\" \"B\"    \"B_v1\" \"B_v2\" \"C\"    exons <- makeNames(rep(\"exon\", 3), suffix=\"\"); makeNames(rep(exons, c(2,3,1)), numberStyle=\"letters\", suffix=\"\"); #> [1] \"exon1a\" \"exon1b\" \"exon2a\" \"exon2b\" \"exon2c\" \"exon3\""},{"path":"https://jmw86069.github.io/jamba/reference/make_html_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"vectorized make_styles for html span output — make_html_styles","title":"vectorized make_styles for html span output — make_html_styles","text":"vectorized make_styles html span output","code":""},{"path":"https://jmw86069.github.io/jamba/reference/make_html_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vectorized make_styles for html span output — make_html_styles","text":"","code":"make_html_styles(   style = NULL,   text,   bg = FALSE,   bg_style = NULL,   grey = FALSE,   Cgrey = getOption(\"jam.Cgrey\"),   lightMode = NULL,   Crange = getOption(\"jam.Crange\"),   Lrange = getOption(\"jam.Lrange\"),   adjustRgb = getOption(\"jam.adjustRgb\"),   adjustPower = 1.5,   fixYellow = TRUE,   alphaPower = 2,   setOptions = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/make_html_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vectorized make_styles for html span output — make_html_styles","text":"style character vector one styles. NULL NA, style applied, except bg_style supplied neither NA NULL, case entries bg_style style use setTextContrastColor() define contrasting style. text character vector (coerced character) one values,. bg logical indicating whether style applied background instead foreground. argument ignored bg_style supplied. bg_style NULL character vector one background styles. argument NULL, applies foreground style background bg_style together, therefore ignores Crange Lrange settings. grey logical, default FALSE, whether use greyscale. Cgrey numeric chroma (C) value, defines grey colors chroma. colors grey cutoff use ANSI greyscale coloring. disable, set Cgrey=-1. lightMode logical indicating whether background color light (TRUE bright), dark (FALSE dark.) default calls checkLightMode() queries getOption(\"lightMode\"). Crange numeric range chroma values, ranging 0 100. NULL, default values assigned Crange. supplied, range(Crange) used. Lrange numeric range luminance values, ranging 0 100. NULL, default values assigned Lrange. supplied, range(Lrange) used. adjustRgb numeric value adjustment used conversion RGB colors ANSI colors, inherently lossy. defined, uses default returned setCLranges() uses getOption(\"jam.adjustRgb\") default=0. order boost color contrast, alternate value -0.1 suggested. adjustPower numeric adjustment power factor fixYellow logical indicating whether \"fix\" darkening yellow, otherwise turns green. Instead, since JAM can, JAM make yellow slightly golden darkening. change affects color hues 80 90. argument passed applyCLrange(). alphaPower numeric value, used adjust RGB values alpha values less 255, raising ratio 1/alphaPower, takes ratio square roots.  alphaPower=100 minimal adjustment. setOptions character logical whether update Crange Lrange options subsequent call setCLranges(). default, \"ifnull\" update options previously NULL; \"FALSE\" prevents modifying global options; \"TRUE\" update options current values. verbose logical indicating whether print verbose output ... additional parameters ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/make_html_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vectorized make_styles for html span output — make_html_styles","text":"character vector length text input vector, entries surrounded relevant HTML consistent style defined input. short, character vector input, colorized HTML character vector output.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/make_html_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vectorized make_styles for html span output — make_html_styles","text":"Note function experimental.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/make_html_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vectorized make_styles for html span output — make_html_styles","text":"","code":"make_html_styles(style=c(\"red\", \"orange\"), text=c(\"one \", \"two\")) #> [1] \"<span style=\\\"color:#FF0000\\\">one <\/span>\" #> [2] \"<span style=\\\"color:#FFA500\\\">two<\/span>\""},{"path":"https://jmw86069.github.io/jamba/reference/make_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"vectorized make_styles for crayon output — make_styles","title":"vectorized make_styles for crayon output — make_styles","text":"vectorized make_styles crayon output","code":""},{"path":"https://jmw86069.github.io/jamba/reference/make_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vectorized make_styles for crayon output — make_styles","text":"","code":"make_styles(   style = NULL,   text,   bg = FALSE,   bg_style = NULL,   grey = FALSE,   colors = NULL,   Cgrey = getOption(\"jam.Cgrey\", 5),   lightMode = NULL,   Crange = getOption(\"jam.Crange\"),   Lrange = getOption(\"jam.Lrange\"),   adjustRgb = getOption(\"jam.adjustRgb\"),   adjustPower = 1.5,   fixYellow = TRUE,   colorTransparent = \"grey45\",   alphaPower = 2,   setOptions = c(\"ifnull\", \"FALSE\", \"TRUE\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/make_styles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vectorized make_styles for crayon output — make_styles","text":"style character vector one styles. NULL NA, style applied, except bg_style supplied neither NA NULL, case entries bg_style style use setTextContrastColor() define contrasting style. text character vector (coerced character) one values,. bg logical indicating whether style applied background instead foreground. argument ignored bg_style supplied. bg_style NULL character vector one background styles. argument NULL, applies foreground style background bg_style together, therefore ignores Crange Lrange settings. grey logical, default FALSE, whether use greyscale. colors integer, default NULL, number colors console output, NULL calls crayon::num_colors() detect console capabilities. Cgrey numeric chroma (C) value, defines grey colors chroma. colors grey cutoff use ANSI greyscale coloring. disable, set Cgrey=-1. lightMode logical indicating whether background color light (TRUE bright), dark (FALSE dark.) default calls checkLightMode() queries getOption(\"lightMode\"). Crange numeric range chroma values, ranging 0 100. NULL, default values assigned Crange. supplied, range(Crange) used. Lrange numeric range luminance values, ranging 0 100. NULL, default values assigned Lrange. supplied, range(Lrange) used. adjustRgb numeric value adjustment used conversion RGB colors ANSI colors, inherently lossy. defined, uses default returned setCLranges() uses getOption(\"jam.adjustRgb\") default=0. order boost color contrast, alternate value -0.1 suggested. adjustPower numeric adjustment power factor fixYellow logical indicating whether \"fix\" darkening yellow, otherwise turns green. Instead, since JAM can, JAM make yellow slightly golden darkening. change affects color hues 80 90. argument passed applyCLrange(). colorTransparent character color used substitute \"transparent\" valid R color, valid color crayon package. alphaPower numeric value, used adjust RGB values alpha values less 255, raising ratio 1/alphaPower, takes ratio square roots.  alphaPower=100 minimal adjustment. setOptions character logical whether update Crange Lrange options subsequent call setCLranges(). default, \"ifnull\" update options previously NULL; \"FALSE\" prevents modifying global options; \"TRUE\" update options current values. verbose logical indicating whether print verbose output ... additional parameters ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/make_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vectorized make_styles for crayon output — make_styles","text":"character vector length text input vector, entries surrounded relevant encoding consistent style defined input. short, character vector input, colorized character vector output.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/make_styles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vectorized make_styles for crayon output — make_styles","text":"function essentially vectorized version crayon::make_style() order style vector character strings vector foreground background styles.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/make_styles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vectorized make_styles for crayon output — make_styles","text":"","code":"cat(make_styles(style=c(\"red\", \"yellow\"), text=c(\"one \", \"two\")), \"\\n\") #> one  two"},{"path":"https://jmw86069.github.io/jamba/reference/match_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Match unique vector values against itself — match_unique","title":"Match unique vector values against itself — match_unique","text":"Match unique vector values full vector","code":""},{"path":"https://jmw86069.github.io/jamba/reference/match_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match unique vector values against itself — match_unique","text":"","code":"match_unique(x, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/match_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match unique vector values against itself — match_unique","text":"x vector ... additional arguments ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/match_unique.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match unique vector values against itself — match_unique","text":"function matches unique vector values full vector. step may commonly performed subset another R object example.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/mergeAllXY.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge list of data.frames retaining all rows — mergeAllXY","title":"Merge list of data.frames retaining all rows — mergeAllXY","text":"Merge list data.frames retaining rows","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mergeAllXY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge list of data.frames retaining all rows — mergeAllXY","text":"","code":"mergeAllXY(...)"},{"path":"https://jmw86069.github.io/jamba/reference/mergeAllXY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge list of data.frames retaining all rows — mergeAllXY","text":"... arguments handled described: named arguments passed base::merge.data.frame(), exception .x .y defined .x=TRUE .y=TRUE. arguments assumed data.frame equivalent, merged order appear arguments. order data.frame objects affect output content, affect row column order resulting data.frame.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mergeAllXY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge list of data.frames retaining all rows — mergeAllXY","text":"data.frame iterative calls base::merge.data.frame().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mergeAllXY.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Merge list of data.frames retaining all rows — mergeAllXY","text":"function wrapper around base::merge.data.frame() except allows two data.frame objects, applies default arguments .x=TRUE .y=TRUE merge operation ensure rows kept.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/mergeAllXY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge list of data.frames retaining all rows — mergeAllXY","text":"","code":"df1 <- data.frame(City=c(\"New York\", \"Los Angeles\", \"San Francisco\"),    State=c(\"New York\", \"California\", \"California\")) df2 <- data.frame(Team=c(\"Yankees\", \"Mets\", \"Giants\", \"Dodgers\"),    City=c(\"New York\", \"New York\", \"San Francisco\", \"Los Angeles\")) df3 <- data.frame(State=c(\"New York\", \"California\"),    `State Population`=c(39.24e9, 8.468e9),    check.names=FALSE) mergeAllXY(df1, df3, df2) #>            City      State State Population    Team #> 1   Los Angeles California        8.468e+09 Dodgers #> 2      New York   New York        3.924e+10 Yankees #> 3      New York   New York        3.924e+10    Mets #> 4 San Francisco California        8.468e+09  Giants  df4 <- data.frame(check.names=FALSE,    CellLine=rep(c(\"ul3\", \"dH1A\", \"dH1B\"), each=2),    Treatment=c(\"Vehicle\", \"Dex\")) df4$CellLine <- factor(df4$CellLine,    levels=c(\"ul3\", \"dH1A\", \"dH1B\")) df4$Treatment <- factor(df4$Treatment,    levels=c(\"Vehicle\", \"Dex\")) df5 <- data.frame(    Treatment=rep(c(\"Vehicle\", \"Dex\"), each=3),    Time=c(\"0h\", \"12h\", \"24h\")) df6 <- data.frame(check.names=FALSE,    CellLine=c(\"ul3\", \"dH1A\", \"dH1B\"),    Type=c(\"Control\", \"KO\", \"KO\")) mergeAllXY(df4, df5, df6) #>    CellLine Treatment Time    Type #> 1      dH1A       Dex  12h      KO #> 2      dH1A       Dex   0h      KO #> 3      dH1A   Vehicle   0h      KO #> 4      dH1A       Dex  24h      KO #> 5      dH1A   Vehicle  24h      KO #> 6      dH1A   Vehicle  12h      KO #> 7      dH1B       Dex  12h      KO #> 8      dH1B       Dex  24h      KO #> 9      dH1B       Dex   0h      KO #> 10     dH1B   Vehicle   0h      KO #> 11     dH1B   Vehicle  12h      KO #> 12     dH1B   Vehicle  24h      KO #> 13      ul3       Dex   0h Control #> 14      ul3       Dex  12h Control #> 15      ul3       Dex  24h Control #> 16      ul3   Vehicle  24h Control #> 17      ul3   Vehicle   0h Control #> 18      ul3   Vehicle  12h Control  # note the factor order is maintained mergeAllXY(df4, df5, df6)$CellLine #>  [1] dH1A dH1A dH1A dH1A dH1A dH1A dH1B dH1B dH1B dH1B dH1B dH1B ul3  ul3  ul3  #> [16] ul3  ul3  ul3  #> Levels: ul3 dH1A dH1B mergeAllXY(df4, df5)$Treatment #>  [1] Dex     Dex     Dex     Dex     Dex     Dex     Dex     Dex     Dex     #> [10] Vehicle Vehicle Vehicle Vehicle Vehicle Vehicle Vehicle Vehicle Vehicle #> Levels: Vehicle Dex  # merge \"all\" can append rows to a data.frame df4b <- data.frame(check.names=FALSE,    CellLine=rep(\"dH1C\", 2),    Treatment=c(\"Vehicle\", \"Dex\")) mergeAllXY(df4, df4b) #>   CellLine Treatment #> 1      ul3   Vehicle #> 2      ul3       Dex #> 3     dH1A   Vehicle #> 4     dH1A       Dex #> 5     dH1B   Vehicle #> 6     dH1B       Dex #> 7     dH1C   Vehicle #> 8     dH1C       Dex  # factor order is maintained, new levels are appended mergeAllXY(df4, df4b)$CellLine #> [1] ul3  ul3  dH1A dH1A dH1B dH1B dH1C dH1C #> Levels: ul3 dH1A dH1B dH1C  # merge proceeds except shows missing data mergeAllXY(df4, df4b, df5, df6) #>    CellLine Treatment Time    Type #> 1       ul3       Dex   0h Control #> 2       ul3   Vehicle   0h Control #> 3       ul3       Dex  12h Control #> 4       ul3       Dex  24h Control #> 5       ul3   Vehicle  12h Control #> 6       ul3   Vehicle  24h Control #> 7      dH1A       Dex  12h      KO #> 8      dH1A       Dex   0h      KO #> 9      dH1A   Vehicle  12h      KO #> 10     dH1A   Vehicle   0h      KO #> 11     dH1A       Dex  24h      KO #> 12     dH1A   Vehicle  24h      KO #> 13     dH1B       Dex  24h      KO #> 14     dH1B       Dex   0h      KO #> 15     dH1B       Dex  12h      KO #> 16     dH1B   Vehicle  24h      KO #> 17     dH1B   Vehicle   0h      KO #> 18     dH1B   Vehicle  12h      KO #> 19     dH1C       Dex   0h    <NA> #> 20     dH1C       Dex  12h    <NA> #> 21     dH1C       Dex  24h    <NA> #> 22     dH1C   Vehicle   0h    <NA> #> 23     dH1C   Vehicle  12h    <NA> #> 24     dH1C   Vehicle  24h    <NA>  # note that appending rows is tricky, the following is incorrect df6b <- data.frame(check.names=FALSE,    CellLine=\"dH1C\",    Type=\"KO\") mergeAllXY(df4, df4b, df5, df6, df6b) #>    CellLine    Type Treatment Time #> 1       ul3 Control       Dex   0h #> 2       ul3 Control   Vehicle   0h #> 3       ul3 Control       Dex  12h #> 4       ul3 Control       Dex  24h #> 5       ul3 Control   Vehicle  12h #> 6       ul3 Control   Vehicle  24h #> 7      dH1A      KO       Dex  12h #> 8      dH1A      KO       Dex   0h #> 9      dH1A      KO   Vehicle  12h #> 10     dH1A      KO   Vehicle   0h #> 11     dH1A      KO       Dex  24h #> 12     dH1A      KO   Vehicle  24h #> 13     dH1B      KO       Dex  24h #> 14     dH1B      KO       Dex   0h #> 15     dH1B      KO       Dex  12h #> 16     dH1B      KO   Vehicle  24h #> 17     dH1B      KO   Vehicle   0h #> 18     dH1B      KO   Vehicle  12h #> 19     dH1C      KO      <NA> <NA> #> 20     dH1C    <NA>       Dex   0h #> 21     dH1C    <NA>       Dex  12h #> 22     dH1C    <NA>       Dex  24h #> 23     dH1C    <NA>   Vehicle   0h #> 24     dH1C    <NA>   Vehicle  12h #> 25     dH1C    <NA>   Vehicle  24h  # but it can be resolved by merging df6 and df6b mergeAllXY(df4, df4b, df5, mergeAllXY(df6, df6b)) #>    CellLine Treatment Time    Type #> 1      dH1A       Dex   0h      KO #> 2      dH1A   Vehicle   0h      KO #> 3      dH1A       Dex  12h      KO #> 4      dH1A       Dex  24h      KO #> 5      dH1A   Vehicle  12h      KO #> 6      dH1A   Vehicle  24h      KO #> 7      dH1B       Dex   0h      KO #> 8      dH1B       Dex  12h      KO #> 9      dH1B   Vehicle   0h      KO #> 10     dH1B   Vehicle  12h      KO #> 11     dH1B       Dex  24h      KO #> 12     dH1B   Vehicle  24h      KO #> 13     dH1C       Dex   0h      KO #> 14     dH1C       Dex  12h      KO #> 15     dH1C       Dex  24h      KO #> 16     dH1C   Vehicle   0h      KO #> 17     dH1C   Vehicle  12h      KO #> 18     dH1C   Vehicle  24h      KO #> 19      ul3       Dex   0h Control #> 20      ul3       Dex  12h Control #> 21      ul3       Dex  24h Control #> 22      ul3   Vehicle   0h Control #> 23      ul3   Vehicle  12h Control #> 24      ul3   Vehicle  24h Control  # it may be easier to recognize by sorting with mixedSortDF() mixedSortDF(honorFactor=TRUE,    mergeAllXY(df4, df4b, df5, mergeAllXY(df6, df6b))) #>    CellLine Treatment Time    Type #> 22      ul3   Vehicle   0h Control #> 23      ul3   Vehicle  12h Control #> 24      ul3   Vehicle  24h Control #> 19      ul3       Dex   0h Control #> 20      ul3       Dex  12h Control #> 21      ul3       Dex  24h Control #> 2      dH1A   Vehicle   0h      KO #> 5      dH1A   Vehicle  12h      KO #> 6      dH1A   Vehicle  24h      KO #> 1      dH1A       Dex   0h      KO #> 3      dH1A       Dex  12h      KO #> 4      dH1A       Dex  24h      KO #> 9      dH1B   Vehicle   0h      KO #> 10     dH1B   Vehicle  12h      KO #> 12     dH1B   Vehicle  24h      KO #> 7      dH1B       Dex   0h      KO #> 8      dH1B       Dex  12h      KO #> 11     dH1B       Dex  24h      KO #> 16     dH1C   Vehicle   0h      KO #> 17     dH1C   Vehicle  12h      KO #> 18     dH1C   Vehicle  24h      KO #> 13     dH1C       Dex   0h      KO #> 14     dH1C       Dex  12h      KO #> 15     dH1C       Dex  24h      KO  # again, factor order is maintained mergeAllXY(df4, df4b, df5, sort=FALSE, mergeAllXY(df6, df6b))$CellLine #>  [1] ul3  ul3  ul3  ul3  ul3  ul3  dH1A dH1A dH1A dH1A dH1A dH1A dH1B dH1B dH1B #> [16] dH1B dH1B dH1B dH1C dH1C dH1C dH1C dH1C dH1C #> Levels: ul3 dH1A dH1B dH1C  # the result can be sorted properly mixedSortDF(honorFactor=TRUE,    mergeAllXY(df4, df4b, df5, mergeAllXY(df6, df6b))) #>    CellLine Treatment Time    Type #> 22      ul3   Vehicle   0h Control #> 23      ul3   Vehicle  12h Control #> 24      ul3   Vehicle  24h Control #> 19      ul3       Dex   0h Control #> 20      ul3       Dex  12h Control #> 21      ul3       Dex  24h Control #> 2      dH1A   Vehicle   0h      KO #> 5      dH1A   Vehicle  12h      KO #> 6      dH1A   Vehicle  24h      KO #> 1      dH1A       Dex   0h      KO #> 3      dH1A       Dex  12h      KO #> 4      dH1A       Dex  24h      KO #> 9      dH1B   Vehicle   0h      KO #> 10     dH1B   Vehicle  12h      KO #> 12     dH1B   Vehicle  24h      KO #> 7      dH1B       Dex   0h      KO #> 8      dH1B       Dex  12h      KO #> 11     dH1B       Dex  24h      KO #> 16     dH1C   Vehicle   0h      KO #> 17     dH1C   Vehicle  12h      KO #> 18     dH1C   Vehicle  24h      KO #> 13     dH1C       Dex   0h      KO #> 14     dH1C       Dex  12h      KO #> 15     dH1C       Dex  24h      KO"},{"path":"https://jmw86069.github.io/jamba/reference/middle.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the middle portion of data similar to head and tail — middle","title":"Return the middle portion of data similar to head and tail — middle","text":"Return middle portion data similar head tail","code":""},{"path":"https://jmw86069.github.io/jamba/reference/middle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the middle portion of data similar to head and tail — middle","text":"","code":"middle(x, n = 10, evenly = TRUE, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/middle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the middle portion of data similar to head and tail — middle","text":"x input data can subset n numeric number entries return evenly logical indicating whether return evenly spaced entries along full length x. evenly=FALSE middle n entries returned. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/middle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the middle portion of data similar to head and tail — middle","text":"object class equivalent x.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/middle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the middle portion of data similar to head and tail — middle","text":"function simple, intended mimic head() tail() inspect data without looking every value","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/middle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the middle portion of data similar to head and tail — middle","text":"","code":"x <- 1:101; middle(x); #>  [1]   1  12  23  34  45  57  68  79  90 101 middle(x, evenly=TRUE) #>  [1]   1  12  23  34  45  57  68  79  90 101  xdf <- data.frame(n=1:101,    excel_colname=jamba::colNum2excelName(1:101)); middle(xdf) #>       n excel_colname #> 1     1             A #> 12   12             L #> 23   23             W #> 34   34            AH #> 45   45            AS #> 57   57            BE #> 68   68            BP #> 79   79            CA #> 90   90            CL #> 101 101            CW middle(xdf, evenly=TRUE) #>       n excel_colname #> 1     1             A #> 12   12             L #> 23   23             W #> 34   34            AH #> 45   45            AS #> 57   57            BE #> 68   68            BP #> 79   79            CA #> 90   90            CL #> 101 101            CW"},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicks.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate major and minor tick marks for log-scale axis — minorLogTicks","title":"Calculate major and minor tick marks for log-scale axis — minorLogTicks","text":"Calculate major minor tick marks log-scale axis","code":""},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate major and minor tick marks for log-scale axis — minorLogTicks","text":"","code":"minorLogTicks(   side = NULL,   lims = NULL,   logBase = 2,   displayBase = 10,   logStep = 1,   minorWhich = c(2, 5),   asValues = TRUE,   offset = 0,   symmetricZero = (offset > 0),   col = \"black\",   col.ticks = col,   combine = FALSE,   logAxisType = c(\"normal\", \"flip\", \"pvalue\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate major and minor tick marks for log-scale axis — minorLogTicks","text":"side integer value indicating axis produce tick marks, 1=bottom, 2=left, 3=top, 4=right. lims numeric vector length=2, indicating specific numeric range use tick marks. logBase numeric value indicating logarithmic base, assumed applied numeric lims limits, axis range, previously. displayBase numeric value indicating base used position axis labels, typically displayBase=10 used draw labels typical positions. logStep integer value indicating number log steps major axis label positions. Typically logStep=1 draw label every log position based upon displayBase, example displayBase=10 logStep=1 use c(1,10,100,1000); displayBase=10 logStep=2 use c(1,100,10000). minorWhich integer vector values label, integer values 1 displayBase, example displayBase=10 may label c(2,5), implies minor tick labels c(2, 5, 20, 50, 200, 500). minor labels otherwise equal major tick position removed. default, displayBase=2, minorWhich=c(1.5) effect drawing one minor label two-fold major tick label. asValues logical indicating whether create exponentiated numeric labels. asValues=FALSE, creates expression objects include exponential value. Use asValues=FALSE logAxisType=\"pvalue\" draw P-value labels. offset numeric value added log transformation, typically form log(1 + x) offset=1. offset used determine accurate numeric label values 0 properly labeled original numeric value. symmetricZero logical indicating whether numeric values symmetric around zero. example, log fold changes use symmetricZero=TRUE ensures log2 value -2 labeled -4 indicate negative four fold change. symmetricZero=FALSE log2 value -2 labeled 0.0625. col, col.ticks character color used axis label, axis tick marks, respectively, default \"black\". combine logical, default FALSE, whether combine major minor ticks one continuous set major tick marks. logAxisType character string indicating type log axis: normal: typical axis style orientation flipped: used reverse orientation pvalue: used -log10(pvalue) orientation. verbose logical indicating whether print verbose output. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate major and minor tick marks for log-scale axis — minorLogTicks","text":"list axis tick positions, corresponding labels, major minor ticks. Note labels may numeric, character, expression. Specifically expression graphics::axis() must called per label. majorTicks: numeric position major tick mark minorTicks: numeric position minor tick mark allTicks: numeric position major tick mark majorLabels: label show tick mark minorLabels: label show tick mark minorSet: numeric steps requested minor ticks minorWhich: numeric steps requested minor labels allLabelsDF: data.frame tick marks labels, colname \"use\" indicating whether label displayed beside tick mark.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate major and minor tick marks for log-scale axis — minorLogTicks","text":"function called minorLogTicksAxis(), may better use function, logFoldAxis() pvalueAxis() better preset options. function calculates log units axis existing base R plot. calculates appropriate tick label positions : major steps, typically log steps; minor steps, typically subset steps one lower log order. example, log 10 steps : c(1, 10, 100, 1000), minor steps c(2, 5, 20, 50, 200, 500, 2000, 5000).","code":""},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicks.html","id":"motivation","dir":"Reference","previous_headings":"","what":"Motivation","title":"Calculate major and minor tick marks for log-scale axis — minorLogTicks","text":"function motivated fill difficult cases: Label axis ticks properly used together offset. example log2(1 + x) uses offset=1. offsets can used relevant. Create axis labels indicate negative fold change values, example -2 log2 fold change units labeled fold change -4, 0.0625. Use symmetric tick marks around x=0 applied log fold changes. Display actual P-values plotting log10(Pvalue), common volcano plots.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate major and minor tick marks for log-scale axis — minorLogTicks","text":"","code":"## This example shows how to draw axis labels manually, ## but the function minorLogTicksAxis() is easier to use. xlim <- c(0,4); nullPlot(xlim=xlim, doMargins=FALSE); mlt <- minorLogTicks(1,    logBase=10,    offset=1,    minTick=0); maj <- subset(mlt$allLabelsDF, type %in% \"major\"); graphics::axis(1, las=2,    at=maj$tick, label=maj$text); min <- subset(mlt$allLabelsDF, type %in% \"minor\"); graphics::axis(1, las=2, cex.axis=0.7,    at=min$tick, label=min$text,    col=\"blue\"); graphics::text(x=log10(1+c(0,5,50,1000)), y=rep(1.7, 4),    label=c(0,5,50,1000), srt=90);   nullPlot(xlim=c(-4,10), doMargins=FALSE); abline(v=0, lty=2) graphics::axis(3, las=2); minorLogTicksAxis(1, logBase=2, displayBase=10, symmetricZero=TRUE);   nullPlot(xlim=c(-4,10), doMargins=FALSE); graphics::axis(3, las=2); minorLogTicksAxis(1, logBase=2, displayBase=10, offset=1); x2 <- stats::rnorm(1000) * 40; d2 <- stats::density(log2(1+abs(x2)) * ifelse(x2<0, -1, 1)); lines(x=d2$x, y=normScale(d2$y)+1, col=\"green4\");   nullPlot(xlim=c(0,10), doMargins=FALSE); graphics::axis(3, las=2); minorLogTicksAxis(1, logBase=2, displayBase=10, offset=1); x1 <- c(0, 5, 15, 200); graphics::text(y=rep(1.0, 4), x=log2(1+x1), label=x1, srt=90, adj=c(0,0.5)); graphics::points(y=rep(0.95, 4), x=log2(1+x1), pch=20, cex=2, col=\"blue\");"},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicksAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Display major and minor tick marks for log-scale axis — minorLogTicksAxis","title":"Display major and minor tick marks for log-scale axis — minorLogTicksAxis","text":"Display major minor tick marks log-scale axis, optional offset proper labeling log2(1+x) numeric offset. Log fold axis","code":""},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicksAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display major and minor tick marks for log-scale axis — minorLogTicksAxis","text":"","code":"minorLogTicksAxis(   side = NULL,   lims = NULL,   logBase = 2,   displayBase = 10,   offset = 0,   symmetricZero = (offset > 0),   majorCex = 1,   minorCex = 0.65,   doMajor = TRUE,   doMinor = TRUE,   doLabels = TRUE,   doMinorLabels = TRUE,   asValues = TRUE,   logAxisType = c(\"normal\", \"flip\", \"pvalue\"),   padj = NULL,   doFormat = TRUE,   big.mark = \",\",   scipen = 10,   minorWhich = c(2, 5),   logStep = 1,   cex = 1,   las = 2,   col = \"black\",   col.ticks = col,   minorLogTicksData = NULL,   verbose = FALSE,   ... )  logFoldAxis(   side = NULL,   lims = NULL,   logBase = 2,   displayBase = 2,   offset = 0,   symmetricZero = TRUE,   asValues = TRUE,   minorWhich = NULL,   doMinor = TRUE,   doMinorLabels = NULL,   scipen = 1,   ... )  pvalueAxis(   side = 2,   lims = NULL,   displayBase = 10,   logBase = 10,   logAxisType = \"pvalue\",   asValues = FALSE,   doMinor = FALSE,   doMinorLabels = FALSE,   scipen = 1,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicksAxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display major and minor tick marks for log-scale axis — minorLogTicksAxis","text":"side integer indicating axis side, 1=bottom, 2=left, 3=top, 4=right. lims NULL numeric range axis tick marks determined. NULL corresponding graphics::par(\"usr\") used. logBase numeric value indicating log base units, used similar base used log(x, base). displayBase numeric value indicating log base units use determining numeric label position. example, data may log2 scaled, yet visually intuitive show log transformed axis units base 10 units. See examples. offset numeric offset used transforming numeric data displayed axis. example, common technique transform data using log2(1+x) adds 1 values prior log2 transformation. case, offset=1, ensures axis labels exactly match initial numeric value prior log2 transform. symmetricZero logical indicating whether numeric values symmetric around zero. example, log fold changes use symmetricZero=TRUE ensures log2 value -2 labeled -4 indicate negative four fold change. symmetricZero=FALSE log2 value -2 labeled 0.0625. majorCex, minorCex numeric base text size factors, relative cex=1 default text size. factors applied addition existing graphics::par(\"cex\") values, preserving global text size defined . doMajor, doMinor, doLabels, doMinorLabels logical, default TRUE, whether display type tick label. doMajor display major ticks, displayBase positions doMinor display minor ticks intermediate positions doLabels display labels doMinorLabels display minor labels asValues logical, default TRUE, whether print exponentiated value, otherwise FALSE print log value. logAxisType character string type axis values: \"normal\": axis values -. \"flip\": inverted axis values, example negative values displayed negative log-transformed values. \"pvalue\": values transformed -log10(pvalue) padj numeric vector length 2, used position axis labels minor major labels, respectively. example, padj=c(0,1) position minor labels just left tick marks, major labels just right tick marks. example helpful minor labels bunch right side section. doFormat logical indicating whether apply base::format() format numeric labels. big.mark, scipen arguments passed base::format() doFormat=TRUE. minorWhich integer vector indicating minor tick marks labeled. Labels generally numbered 2 displayBase-1. default, log 10 units add minor tick marks labels c(2,5) position. log2 units , second label defined 1.5, shows minor labels c(3, 6, 12), 1.5 * c(2, 4, 8). logStep integer number log units per \"step\", typically 1. cex, col, col.ticks, las parameters used axis label size, axis label colors, axis tick mark colors, label text orientation, respectively. minorLogTicksData list object created running jamba::minorLogTicks(), allows inspecting modifying content custom control. verbose logical indicating whether print verbose output. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicksAxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display major and minor tick marks for log-scale axis — minorLogTicksAxis","text":"list vectors: majorLabels: character vector major axis labels majorTicks: numeric vector major axis tick positions minorLabels: character vector minor axis labels minorTicks: numeric vector minor axis tick positions allLabelsDF: data.frame containing axis tick positions corresponding labels.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicksAxis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display major and minor tick marks for log-scale axis — minorLogTicksAxis","text":"function displays log units axis existing base R plot. calls jamba::minorLogTicks() calculates appropriate tick label positions. Note: function assumes axis values already log-transformed. Make sure adjust offset reflect method log-transformation, example: log2(1+x) require logBase=2 offset=1 order represent values properly near zero. log(0.5+x) require logBase=exp(1) offset=0.5. log10(x) require logBase=10 offset=0. defaults logBase=2 displayBase=10 assume data log2-transformed, displays tick marks using common base 10. display tick marks two-fold intervals, use displayBase=2. function motivated order label log-transformed data properly special cases, like using log2(1+x) resulting values shifted \"one\" using standard log-scaled axis tick marks labels. log fold changes, set symmetricZero=TRUE, create negative log scaled fold change values needed negative values. example, option label logBase=2 value -2 -4 0.25. Note default, whenever offset > 0 argument symmetricZero=TRUE also defined, since negative value scenario little meaning. behavior can turned setting symmetricZero=FALSE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/minorLogTicksAxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display major and minor tick marks for log-scale axis — minorLogTicksAxis","text":"","code":"plotPolygonDensity(0:100, breaks=100);   plotPolygonDensity(0:100, breaks=50, log=\"x\",    main=\"plotPolygonDensity() uses minorLogTicksAxis()\",    xlab=\"x (log-scaled)\");   plotPolygonDensity(log2(1+0:100), breaks=50,    main=\"manually called minorLogTicksAxis(logBase=2)\",    xaxt=\"n\",    xlab=\"x (log-scaled)\"); minorLogTicksAxis(1, offset=1, logBase=2);   plotPolygonDensity(log10(1+0:100), breaks=50,    main=\"manually called minorLogTicksAxis(logBase=10)\",    xaxt=\"n\",    xlab=\"x (log-scaled)\"); minorLogTicksAxis(1, offset=1, logBase=10);   # example with log fold axes k <- c(-5:5) plot(x=k, y=k, xaxt=\"n\", yaxt=\"n\",    xlab=\"log2 base, displaying tick marks with log10 intervals\",    ylab=\"log2 base, displaying tick marks with log2 intervals\") axis(3, las=2) axis(4, las=2) lfax <- logFoldAxis(side=1, logBase=2, displayBase=2) lfay <- logFoldAxis(side=2, logBase=2, displayBase=10) # optionally add x-axis ablines abline(v=lfax$allTicks, lty=\"dotted\", col=\"grey88\") abline(v=lfax$majorTicks, lty=\"dashed\", col=\"grey82\") # optionally add y-axis ablines abline(h=lfay$allTicks, lty=\"dotted\", col=\"grey88\") abline(h=lfay$majorTicks, lty=\"dashed\", col=\"grey82\")   # example showing volcano plot features set.seed(123); n <- 1000; vdf <- data.frame(lfc=rnorm(n) * 2) vdf$`-log10 (padj)` <- abs(vdf$lfc) * abs(rnorm(n)) plotSmoothScatter(vdf, xaxt=\"n\", yaxt=\"n\", xlab=\"Fold change\",    main=\"Volcano plot\\ndisplayBase=2\") logFoldAxis(1) pvalueAxis(2)   plotSmoothScatter(vdf, xaxt=\"n\", yaxt=\"n\", xlab=\"Fold change\",    main=\"Volcano plot\\ndisplayBase=10\") logFoldAxis(1, displayBase=10) pvalueAxis(2)"},{"path":"https://jmw86069.github.io/jamba/reference/mixedOrder.html","id":null,"dir":"Reference","previous_headings":"","what":"order alphanumeric values keeping numeric values in proper order — mixedOrder","title":"order alphanumeric values keeping numeric values in proper order — mixedOrder","text":"order alphanumeric values keeping numeric values proper order","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedOrder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"order alphanumeric values keeping numeric values in proper order — mixedOrder","text":"","code":"mixedOrder(   x,   ...,   blanksFirst = TRUE,   na.last = NAlast,   keepNegative = FALSE,   keepInfinite = FALSE,   keepDecimal = FALSE,   ignore.case = TRUE,   useCaseTiebreak = TRUE,   honorFactor = FALSE,   returnDebug = FALSE,   returnType = c(\"order\", \"rank\"),   NAlast = TRUE,   verbose = FALSE,   debug = FALSE )"},{"path":"https://jmw86069.github.io/jamba/reference/mixedOrder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"order alphanumeric values keeping numeric values in proper order — mixedOrder","text":"x input vector ... additional parameters sent mixedOrder(). blanksFirst logical whether order blank entries entries containing value. na.last logical whether move NA entries end sort. na.last=TRUE NA values always last, even following blanks infinite values. na.last=FALSE NA values always first, even blanks negative infinite values. keepNegative logical whether keep '-' associated adjacent numeric values, order sort negative values. Note keepNegative=TRUE also forces keepDecimal=TRUE, enables matching scientific notation -1.23e-10 numeric value. keepNegative=FALSE dash \"-\" treated common delimiter. keepInfinite logical whether allow \"Inf\" input x considered numeric infinite value. Note \"-Inf\" treated negative infinite value keepNegative=TRUE. Also note \"Inf\" recognized infinite appears non-character delimiters, part larger character string like \"Information\". careful keepInfinite=TRUE sorting gene symbols, gene symbols like \"Inf3\" sorted infinite. Lastly, infinite values sorted end, notably character values differs mixed sorting algorithms. keepDecimal logical whether keep decimal numbers, sorting true number version number. default keepDecimal=FALSE``, means \"v1.200\" ordered \"v1.30\", since considers \"1.200\"effectively as1and200, \"1.30\"effectively as1and30. keepDecimal=TRUE, numeric sort orders \"v1.200\"\"v1.30\"`. ignore.case logical whether ignore uppercase lowercase characters defining sort order. useCaseTiebreak logical indicating whether break ties ignore.case=TRUE, using mixed case tiebreaker. honorFactor logical indicating whether honor order levels input x factor. default honorFactor=FALSE maintain consistent legacy behavior. purpose function enable alphanumeric sorting, purpose sorting factor levels. returnDebug logical indicating whether include additional debug info attributes. returnType character string define return type: \"order\": returns integer order, equivalent order() \"rank\": returns integer rank, equivalent rank() NAlast logical DEPRECATED favor na.last consistency base R functions. verbose logical whether print verbose output. debug logical indicating whether return intermediate data useful debugging purposes.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedOrder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"order alphanumeric values keeping numeric values in proper order — mixedOrder","text":"integer vector orders derived x, returnType=\"rank\" integer vector ranks allowing ties. rank therefore valid use chains, multiple columns data.frame.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedOrder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"order alphanumeric values keeping numeric values in proper order — mixedOrder","text":"function refactor gtools mixedorder() source inspiration function, thanks Gregory R. Warnes! function designed improve efficiency large vectors, handle special cases slightly differently. driven need sort gene symbols, miRNA symbols numeric order, example: test set: miR-12,miR-1,miR-122,miR-1b,miR-1a,miR-2 sort: miR-1,miR-12,miR-122,miR-1a,miR-1b,miR-2 gtools::mixedsort: miR-122,miR-12,miR-2,miR-1,miR-1a,miR-1b mixedSort: miR-1,miR-1a,miR-1b,miR-2,miR-12,miR-122 function default consider negative numbers negative, instead treats '-' delimiter, unless keepNegative=TRUE. keepNegative=TRUE function also recognizes scientific notation, example \"1.23e-2\" treated numeric 0.0123. Note keepNegative=TRUE also forces keepDecimal=TRUE. keepDecimal=TRUE function maintains numeric values include one \".\". function core family mixedSort functions: mixedSort() Applies mixedOrder() input vector. mixedSorts() Applies mixedOrder() list vectors, returning list vector independently sorted. mixedSortDF() Applies mixedOrder() column data.frame comparable object, optionally specifying order columns used sort. Extra thanks Gregory R. Warnes gtools mixedorder() proved useful ultimately inspired function.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/mixedOrder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"order alphanumeric values keeping numeric values in proper order — mixedOrder","text":"","code":"x <- c(\"miR-12\",\"miR-1\",\"miR-122\",\"miR-1b\", \"miR-1a\",\"miR-2\"); mixedOrder(x); #> [1] 2 5 4 6 1 3 x[mixedOrder(x)]; #> [1] \"miR-1\"   \"miR-1a\"  \"miR-1b\"  \"miR-2\"   \"miR-12\"  \"miR-122\" mixedSort(x); #> [1] \"miR-1\"   \"miR-1a\"  \"miR-1b\"  \"miR-2\"   \"miR-12\"  \"miR-122\" order(x); #> [1] 2 1 3 5 4 6 x[order(x)]; #> [1] \"miR-1\"   \"miR-12\"  \"miR-122\" \"miR-1a\"  \"miR-1b\"  \"miR-2\"   sort(x); #> [1] \"miR-1\"   \"miR-12\"  \"miR-122\" \"miR-1a\"  \"miR-1b\"  \"miR-2\"    ## Complex example including NA, blanks, and infinite \"Inf\" x <- c(\"Inf\",    \"+Inf12\",    NA,    \"-Inf14\",    \"-\",    \"---\",    \"Jnf12\",    \"Hnf12\",    \"--\",    \"Information\"); ## By default, strings are sorted as-is, \"Hnf\" before \"Inf\" before \"Jnf\" ## blanks are first, NA values are last x[mixedOrder(x)]; #>  [1] \"-\"           \"--\"          \"---\"         \"Hnf12\"       \"+Inf12\"      #>  [6] \"-Inf14\"      \"Inf\"         \"Information\" \"Jnf12\"       NA             ## blanks are last, but before NA values which are also last x[mixedOrder(x, blanksFirst=FALSE)]; #>  [1] \"Hnf12\"       \"+Inf12\"      \"-Inf14\"      \"Inf\"         \"Information\" #>  [6] \"Jnf12\"       \"-\"           \"--\"          \"---\"         NA             ## Recognize infinite, but not the negative sign ## Now infinite values are at the end, ordered by the number that follows. x[mixedOrder(x, blanksFirst=FALSE, keepInfinite=TRUE)] #>  [1] \"Hnf12\"       \"Information\" \"Jnf12\"       \"+Inf12\"      \"-Inf14\"      #>  [6] \"Inf\"         \"-\"           \"--\"          \"---\"         NA             ## Now also recognize negative infinite values, ## which puts \"-Inf14\" at the very beginning. x[mixedOrder(x, blanksFirst=FALSE, keepInfinite=TRUE, keepNegative=TRUE)] #>  [1] \"-Inf14\"      \"Hnf12\"       \"Information\" \"Jnf12\"       \"+Inf12\"      #>  [6] \"Inf\"         \"-\"           \"--\"          \"---\"         NA             # test factor level order factor1 <- factor(c(\"Cnot9\", \"Cnot8\", \"Cnot10\")) sort(factor1) #> [1] Cnot10 Cnot8  Cnot9  #> Levels: Cnot10 Cnot8 Cnot9 mixedSort(factor1) #> [1] Cnot8  Cnot9  Cnot10 #> Levels: Cnot10 Cnot8 Cnot9 factor1[mixedOrder(factor1)] #> [1] Cnot8  Cnot9  Cnot10 #> Levels: Cnot10 Cnot8 Cnot9 factor1[mixedOrder(factor1, honorFactor=TRUE)] #> [1] Cnot10 Cnot8  Cnot9  #> Levels: Cnot10 Cnot8 Cnot9"},{"path":"https://jmw86069.github.io/jamba/reference/mixedSort.html","id":null,"dir":"Reference","previous_headings":"","what":"sort alphanumeric values keeping numeric values in proper order — mixedSort","title":"sort alphanumeric values keeping numeric values in proper order — mixedSort","text":"sort alphanumeric values keeping numeric values proper order","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sort alphanumeric values keeping numeric values in proper order — mixedSort","text":"","code":"mixedSort(   x,   blanksFirst = TRUE,   na.last = NAlast,   keepNegative = FALSE,   keepInfinite = FALSE,   keepDecimal = FALSE,   ignore.case = TRUE,   useCaseTiebreak = TRUE,   honorFactor = FALSE,   sortByName = FALSE,   verbose = FALSE,   NAlast = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/mixedSort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sort alphanumeric values keeping numeric values in proper order — mixedSort","text":"x vector blanksFirst logical whether order blank entries entries containing value. na.last logical indicating whether move NA entries end sort. keepNegative logical whether keep '-' associated adjacent numeric values, order sort negative values. keepInfinite logical whether allow \"Inf\" considered numeric infinite value. keepDecimal logical whether keep decimal numbers, sorting true number version number. default keepDecimal=FALSE, means \"v1.200\" ordered \"v1.30\". keepDecimal=TRUE, numeric sort considers \"1.2\" \"1.3\" sorts order. ignore.case logical whether ignore uppercase lowercase characters defining sort order. Note x factor factor levels converted using unique(toupper(levels(x))), therefore values x sorted factor level. useCaseTiebreak logical indicating whether break ties ignore.case=TRUE, using mixed case tiebreaker. honorFactor logical, default TRUE, indicating whether honor factor level order output, otherwise FALSE sorts character. sortByName logical whether sort vector x names(x) instead sorting x . verbose logical whether print verbose output. NAlast logical deprecated favor argument na.last consistency base::sort(). ... additional parameters sent mixedOrder.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sort alphanumeric values keeping numeric values in proper order — mixedSort","text":"vector values argument x, ordered mixedOrder(). output class match class(x).","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sort alphanumeric values keeping numeric values in proper order — mixedSort","text":"function refactor gtools mixedsort(), clever bit R coding gtools package. extended make slightly faster, handle special cases slightly differently. driven need sort gene symbols, miRNA symbols, chromosome names, proper numeric order, example: test set: miR-12,miR-1,miR-122,miR-1b,mir-1a gtools::mixedsort: miR-122,miR-12,miR-1,miR-1a,mir-1b mixedSort: miR-1,miR-1a,miR-1b,miR-12,miR-122 function default recognize negative numbers negative, instead treats '-' delimiter, unless keepNegative=TRUE. function also attempts maintain '.' part decimal number, can problematic sorting IP addresses, example. function really just wrapper function mixedOrder(), work defining appropriate order. sort logic roughly follows: Split term alternating chunks containing character numeric substrings, split across columns matrix. Apply appropriate ignore.case logic character substrings, effectively applying toupper() substrings Define rank order character substrings matrix column, maintaining ties resolved subsequent columns. Convert character numeric ranks via factor intermediate, defined higher highest numeric substring value. ignore.case=TRUE useCaseTiebreak=TRUE, additional tiebreaker column defined using character substring values without applying toupper(). final tiebreaker column input string , toupper() applied ignore.case=TRUE. Apply order across substring columns. Therefore, expected behaviors: ignore.case=TRUE useCaseTiebreak=TRUE (default ) input data ordered without regard case, tiebreaker applies case-specific sort criteria final product. logic close default sort() except handling internal numeric values inside string.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/mixedSort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sort alphanumeric values keeping numeric values in proper order — mixedSort","text":"","code":"x <- c(\"miR-12\",\"miR-1\",\"miR-122\",\"miR-1b\", \"miR-1a\", \"miR-2\"); sort(x); #> [1] \"miR-1\"   \"miR-12\"  \"miR-122\" \"miR-1a\"  \"miR-1b\"  \"miR-2\"   mixedSort(x); #> [1] \"miR-1\"   \"miR-1a\"  \"miR-1b\"  \"miR-2\"   \"miR-12\"  \"miR-122\"  # test honorFactor mixedSort(factor(c(\"Cnot9\", \"Cnot8\", \"Cnot10\"))) #> [1] Cnot8  Cnot9  Cnot10 #> Levels: Cnot10 Cnot8 Cnot9 mixedSort(factor(c(\"Cnot9\", \"Cnot8\", \"Cnot10\")), honorFactor=TRUE) #> [1] Cnot10 Cnot8  Cnot9  #> Levels: Cnot10 Cnot8 Cnot9  # test ignore.case mixedSort(factor(c(\"Cnot9\", \"Cnot8\", \"CNOT9\", \"Cnot10\"))) #> [1] Cnot8  CNOT9  Cnot9  Cnot10 #> Levels: CNOT9 Cnot10 Cnot8 Cnot9 mixedSort(factor(c(\"CNOT9\", \"Cnot8\", \"Cnot9\", \"Cnot10\"))) #> [1] Cnot8  CNOT9  Cnot9  Cnot10 #> Levels: CNOT9 Cnot10 Cnot8 Cnot9 mixedSort(factor(c(\"Cnot9\", \"Cnot8\", \"CNOT9\", \"Cnot10\")), ignore.case=FALSE) #> [1] CNOT9  Cnot8  Cnot9  Cnot10 #> Levels: CNOT9 Cnot10 Cnot8 Cnot9 mixedSort(factor(c(\"Cnot9\", \"Cnot8\", \"CNOT9\", \"Cnot10\")), ignore.case=TRUE) #> [1] Cnot8  CNOT9  Cnot9  Cnot10 #> Levels: CNOT9 Cnot10 Cnot8 Cnot9  mixedSort(factor(c(\"Cnot9\", \"Cnot8\", \"CNOT9\", \"Cnot10\")), useCaseTiebreak=TRUE) #> [1] Cnot8  CNOT9  Cnot9  Cnot10 #> Levels: CNOT9 Cnot10 Cnot8 Cnot9 mixedSort(factor(c(\"CNOT9\", \"Cnot8\", \"Cnot9\", \"Cnot10\")), useCaseTiebreak=FALSE) #> [1] Cnot8  CNOT9  Cnot9  Cnot10 #> Levels: CNOT9 Cnot10 Cnot8 Cnot9"},{"path":"https://jmw86069.github.io/jamba/reference/mixedSortDF.html","id":null,"dir":"Reference","previous_headings":"","what":"sort data.frame keeping numeric values in proper order — mixedSortDF","title":"sort data.frame keeping numeric values in proper order — mixedSortDF","text":"sort data.frame keeping numeric values proper order","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSortDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sort data.frame keeping numeric values in proper order — mixedSortDF","text":"","code":"mixedSortDF(   df,   byCols = seq_len(ncol(df)),   na.last = TRUE,   decreasing = NULL,   useRownames = FALSE,   verbose = FALSE,   blanksFirst = TRUE,   keepNegative = FALSE,   keepInfinite = FALSE,   keepDecimal = FALSE,   ignore.case = TRUE,   useCaseTiebreak = TRUE,   sortByName = FALSE,   honorFactor = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/mixedSortDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sort data.frame keeping numeric values in proper order — mixedSortDF","text":"df data.frame input byCols one two types input: integer vector referring order columns used mmixedOrder() order data.frame. Note negative values reverse sort order corresponding column number. sort rownames(df) use zero 0, reverse sorting rownames(x) use -0.1 negative sign reverse sort, -0.1 rounded 0. character vector values colnames(df), optionally including prefix \"-\" reverse sort. Note argument decreasing can also used specify columns reverse sort, either single value vector applied column byCols. sort rownames(df) use \"rownames\" \"row.names\". reverse sorting rownames(df) use \"-rownames\" \"-row.names\". na.last logical whether move NA entries end sort. na.last=TRUE NA values always last, even following blanks infinite values. na.last=FALSE NA values always first, even blanks negative infinite values. decreasing NULL logical vector indicating columns byCols sorted decreasing order. default, sign(byCols) used define sort order column, can explicitly overridden decreasing parameter. useRownames logical whether use rownames(df) last tiebreaker overall rank ordering. parameter primary effect assuring reproducible result, provided rownames consistently defined, rownames actually row numbers. useRownames=FALSE rows otherwise ties returned order provided df. verbose logical whether print verbose output. verbose=2 slightly verbose output. blanksFirst, keepNegative, keepInfinite, keepDecimal, ignore.case, useCaseTiebreak, sortByName arguments passed mmixedOrder(), except sortByName passed along. honorFactor logical, default TRUE, indicating whether honor factor level order output, otherwise FALSE sorts character. ... additional arguments passed mmixedOrder() custom sort options described mixedSort().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSortDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sort data.frame keeping numeric values in proper order — mixedSortDF","text":"data.frame whose rows ordered using mmixedOrder().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSortDF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sort data.frame keeping numeric values in proper order — mixedSortDF","text":"function wrapper around mmixedOrder() operates data.frame columns proper order, using logic similar used base::order() operating data.frame. sort order logic fully described mixedSort() mixedOrder(). Note byCols can either given integer column index values, character vector colnames(x). either case, using negative prefix - reverse sort order corresponding column. example byCols=c(2, -1) sort column 2 increasing, column 1 decreasing. Similarly, one can supply colnames(df), byCols=c(\"colname2\", \"-colname1\"). Values matched -colnames(df) first, values matched compared removing prefix - start character string. Therefore, colnames(df) contains \"-colname1\" matched -, \"--colname1\" matched removing first -, sort order reversed column. direct control sort order column defined byCols, can supply logical vector argument decreasing, vector recycled length(byCols). Finally, slight efficiency, unique columns defined byCols used determine row order, even column defined twice byCols, first instance passed mmixedOrder() determine row order.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/mixedSortDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sort data.frame keeping numeric values in proper order — mixedSortDF","text":"","code":"# start with a vector of miRNA names x <- c(\"miR-12\",\"miR-1\",\"miR-122\",\"miR-1b\", \"miR-1a\",\"miR-2\"); # add some arbitrary group information g <- rep(c(\"Air\", \"Treatment\", \"Control\"), 2); # create a data.frame df <- data.frame(group=g,    miRNA=x,    stringsAsFactors=FALSE);  # input data df; #>       group   miRNA #> 1       Air  miR-12 #> 2 Treatment   miR-1 #> 3   Control miR-122 #> 4       Air  miR-1b #> 5 Treatment  miR-1a #> 6   Control   miR-2  # output when using order() df[do.call(order, df), , drop=FALSE]; #>       group   miRNA #> 1       Air  miR-12 #> 4       Air  miR-1b #> 3   Control miR-122 #> 6   Control   miR-2 #> 2 Treatment   miR-1 #> 5 Treatment  miR-1a  # output with mixedSortDF() mixedSortDF(df); #>       group   miRNA #> 4       Air  miR-1b #> 1       Air  miR-12 #> 6   Control   miR-2 #> 3   Control miR-122 #> 2 Treatment   miR-1 #> 5 Treatment  miR-1a  # mixedSort respects factor order # reorder factor levels to demonstrate. # \"Control\" should come first gf <- factor(g, levels=c(\"Control\", \"Air\", \"Treatment\")); df2 <- data.frame(groupfactor=gf,    miRNA=x,    stringsAsFactors=FALSE);  # now the sort properly keeps the group factor levels in order, # which also sorting the miRNA names in their proper order. mixedSortDF(df2); #>   groupfactor   miRNA #> 6     Control   miR-2 #> 3     Control miR-122 #> 4         Air  miR-1b #> 1         Air  miR-12 #> 2   Treatment   miR-1 #> 5   Treatment  miR-1a   x <- data.frame(l1=letters[1:10],    l2=rep(letters[1:2+10], 5),    L1=LETTERS[1:10],    L2=rep(LETTERS[1:2+20], each=5)); set.seed(123); rownames(x) <- sample(seq_len(10)); x; #>    l1 l2 L1 L2 #> 3   a  k  A  U #> 10  b  l  B  U #> 2   c  k  C  U #> 8   d  l  D  U #> 6   e  k  E  U #> 9   f  l  F  V #> 1   g  k  G  V #> 7   h  l  H  V #> 5   i  k  I  V #> 4   j  l  J  V  # sort by including rownames mixedSortDF(x, byCols=c(\"rownames\")); #>    l1 l2 L1 L2 #> 1   g  k  G  V #> 2   c  k  C  U #> 3   a  k  A  U #> 4   j  l  J  V #> 5   i  k  I  V #> 6   e  k  E  U #> 7   h  l  H  V #> 8   d  l  D  U #> 9   f  l  F  V #> 10  b  l  B  U mixedSortDF(x, byCols=c(\"L2\", \"-rownames\")); #>    l1 l2 L1 L2 #> 10  b  l  B  U #> 8   d  l  D  U #> 6   e  k  E  U #> 3   a  k  A  U #> 2   c  k  C  U #> 9   f  l  F  V #> 7   h  l  H  V #> 5   i  k  I  V #> 4   j  l  J  V #> 1   g  k  G  V  # demonstrate sorting a matrix with no rownames m <- matrix(c(2, 1, 3, 4), ncol=2); mixedSortDF(m, byCols=-2) #>      [,1] [,2] #> [1,]    1    4 #> [2,]    2    3  # add rownames rownames(m) <- c(\"c\", \"a\"); mixedSortDF(m, byCols=0) #>   [,1] [,2] #> a    1    4 #> c    2    3 mixedSortDF(m, byCols=\"-rownames\") #>   [,1] [,2] #> c    2    3 #> a    1    4 mixedSortDF(m, byCols=\"rownames\") #>   [,1] [,2] #> a    1    4 #> c    2    3  mixedSortDF(data.frame(factor1=factor(c(\"Cnot9\", \"Cnot8\", \"Cnot10\"))), honorFactor=FALSE) #>   factor1 #> 2   Cnot8 #> 1   Cnot9 #> 3  Cnot10  # test date columns testfiles <- system.file(package=\"jamba\", c(\"TODO.md\", \"README.md\", \"NEWS.md\")) testinfo <- file.info(testfiles) testinfo #>                                                                                                              size #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 114269 #>                                                                                                            isdir #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md FALSE #>                                                                                                            mode #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md  644 #>                                                                                                                          mtime #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 2025-03-22 14:37:36 #>                                                                                                                          ctime #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 2025-03-22 14:37:39 #>                                                                                                                          atime #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 2025-03-22 14:37:36 #>                                                                                                            uid #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 505 #>                                                                                                            gid #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md  20 #>                                                                                                             uname #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md wardjm #>                                                                                                            grname #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md  staff mixedSortDF(testinfo, byCols=\"mtime\") #>                                                                                                              size #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 114269 #>                                                                                                            isdir #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md FALSE #>                                                                                                            mode #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md  644 #>                                                                                                                          mtime #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 2025-03-22 14:37:36 #>                                                                                                                          ctime #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 2025-03-22 14:37:39 #>                                                                                                                          atime #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 2025-03-22 14:37:36 #>                                                                                                            uid #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md 505 #>                                                                                                            gid #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md  20 #>                                                                                                             uname #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md wardjm #>                                                                                                            grname #> /private/var/folders/1v/hbvdjhy1293cvqlm7n6l_hxw0000gs/T/RtmpsRST6V/temp_libpath1cc116dd2838/jamba/NEWS.md  staff"},{"path":"https://jmw86069.github.io/jamba/reference/mixedSorts.html","id":null,"dir":"Reference","previous_headings":"","what":"sort alphanumeric values within a list format — mixedSorts","title":"sort alphanumeric values within a list format — mixedSorts","text":"sort alphanumeric values within list format","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sort alphanumeric values within a list format — mixedSorts","text":"","code":"mixedSorts(   x,   blanksFirst = TRUE,   na.last = NAlast,   keepNegative = FALSE,   keepInfinite = TRUE,   keepDecimal = FALSE,   ignore.case = TRUE,   useCaseTiebreak = TRUE,   sortByName = FALSE,   na.rm = FALSE,   verbose = FALSE,   NAlast = TRUE,   honorFactor = TRUE,   xclass = NULL,   indent = 0,   debug = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/mixedSorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sort alphanumeric values within a list format — mixedSorts","text":"x vector blanksFirst logical whether order blank entries entries containing value. na.last logical indicating whether move NA entries end sort. keepNegative logical whether keep '-' associated adjacent numeric values, order sort negative values. keepInfinite logical whether allow \"Inf\" considered numeric infinite value. keepDecimal logical whether keep decimal numbers, sorting true number version number. default keepDecimal=FALSE, means \"v1.200\" ordered \"v1.30\". keepDecimal=TRUE, numeric sort considers \"1.2\" \"1.3\" sorts order. ignore.case logical whether ignore uppercase lowercase characters defining sort order. Note x factor factor levels converted using unique(toupper(levels(x))), therefore values x sorted factor level. useCaseTiebreak logical indicating whether break ties ignore.case=TRUE, using mixed case tiebreaker. sortByName logical whether sort vector x names(x) instead sorting x . na.rm logical, default FALSE, indicating whether remove NA values. verbose logical whether print verbose output. NAlast logical deprecated favor argument na.last consistency base::sort(). honorFactor logical, default TRUE, used enforce factor level sort order, FALSE sorts character. xclass character vector classes x, used slight optimization re-use vector already defined x. NULL created within function. indent numeric used verbose=TRUE determine number spaces indented verbose output, passed printDebug(). debug logical, default FALSE, whether print detailed debug output. ... additional parameters sent mixedOrder.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sort alphanumeric values within a list format — mixedSorts","text":"list applying mixedSort() elements.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mixedSorts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sort alphanumeric values within a list format — mixedSorts","text":"function extension mixedSort() sort vector list. applies sort whole unlisted vector splits back list form. event input nested list lists, first level list structure maintained output data. information, see rlengths() calculates recursive nested list sizes. exception data contained x represents multiple classes, see . data x represents multiple classes, example character factor, mechanism slightly different well- optimized large length x. method uses rapply(x, =\"replace\", mixedSort) recursively, iteratively, calls mixedSort() vector, therefore returns data nested list structure provided x. data x represents one class, data unlist() one large vector, sorted mixedSort(), split back list structure representing x input.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/mixedSorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sort alphanumeric values within a list format — mixedSorts","text":"","code":"# set up an example list of mixed alpha-numeric strings set.seed(12); x <- paste0(sample(letters, replace=TRUE, 52), rep(1:30, length.out=52)); x; #>  [1] \"b1\"  \"z2\"  \"p3\"  \"w4\"  \"n5\"  \"e6\"  \"e7\"  \"b8\"  \"h9\"  \"r10\" \"r11\" \"y12\" #> [13] \"f13\" \"l14\" \"j15\" \"z16\" \"g17\" \"p18\" \"m19\" \"x20\" \"d21\" \"x22\" \"y23\" \"h24\" #> [25] \"z25\" \"k26\" \"n27\" \"g28\" \"l29\" \"e30\" \"y1\"  \"b2\"  \"g3\"  \"n4\"  \"g5\"  \"z6\"  #> [37] \"t7\"  \"t8\"  \"s9\"  \"t10\" \"d11\" \"m12\" \"m13\" \"p14\" \"e15\" \"w16\" \"p17\" \"o18\" #> [49] \"v19\" \"g20\" \"m21\" \"t22\" # split into a list as an example xL <- split(x, rep(letters[1:5], c(6,7,5,4,4))); xL; #> $a #>  [1] \"b1\"  \"z2\"  \"p3\"  \"w4\"  \"n5\"  \"e6\"  \"n27\" \"g28\" \"l29\" \"e30\" \"y1\"  \"b2\"  #>  #> $b #>  [1] \"e7\"  \"b8\"  \"h9\"  \"r10\" \"r11\" \"y12\" \"f13\" \"g3\"  \"n4\"  \"g5\"  \"z6\"  \"t7\"  #> [13] \"t8\"  \"s9\"  #>  #> $c #>  [1] \"l14\" \"j15\" \"z16\" \"g17\" \"p18\" \"t10\" \"d11\" \"m12\" \"m13\" \"p14\" #>  #> $d #> [1] \"m19\" \"x20\" \"d21\" \"x22\" \"e15\" \"w16\" \"p17\" \"o18\" #>  #> $e #> [1] \"y23\" \"h24\" \"z25\" \"k26\" \"v19\" \"g20\" \"m21\" \"t22\" #>   # now run mixedSorts(xL) # Notice \"e6\" is sorted before \"e30\" mixedSorts(xL) #> $a #>  [1] \"b1\"  \"b2\"  \"e6\"  \"e30\" \"g28\" \"l29\" \"n5\"  \"n27\" \"p3\"  \"w4\"  \"y1\"  \"z2\"  #>  #> $b #>  [1] \"b8\"  \"e7\"  \"f13\" \"g3\"  \"g5\"  \"h9\"  \"n4\"  \"r10\" \"r11\" \"s9\"  \"t7\"  \"t8\"  #> [13] \"y12\" \"z6\"  #>  #> $c #>  [1] \"d11\" \"g17\" \"j15\" \"l14\" \"m12\" \"m13\" \"p14\" \"p18\" \"t10\" \"z16\" #>  #> $d #> [1] \"d21\" \"e15\" \"m19\" \"o18\" \"p17\" \"w16\" \"x20\" \"x22\" #>  #> $e #> [1] \"g20\" \"h24\" \"k26\" \"m21\" \"t22\" \"v19\" \"y23\" \"z25\" #>   # for fun, compare to lapply(xL, sort) # Notice \"e6\" is sorted after \"e30\" lapply(xL, sort) #> $a #>  [1] \"b1\"  \"b2\"  \"e30\" \"e6\"  \"g28\" \"l29\" \"n27\" \"n5\"  \"p3\"  \"w4\"  \"y1\"  \"z2\"  #>  #> $b #>  [1] \"b8\"  \"e7\"  \"f13\" \"g3\"  \"g5\"  \"h9\"  \"n4\"  \"r10\" \"r11\" \"s9\"  \"t7\"  \"t8\"  #> [13] \"y12\" \"z6\"  #>  #> $c #>  [1] \"d11\" \"g17\" \"j15\" \"l14\" \"m12\" \"m13\" \"p14\" \"p18\" \"t10\" \"z16\" #>  #> $d #> [1] \"d21\" \"e15\" \"m19\" \"o18\" \"p17\" \"w16\" \"x20\" \"x22\" #>  #> $e #> [1] \"g20\" \"h24\" \"k26\" \"m21\" \"t22\" \"v19\" \"y23\" \"z25\" #>   # test super-long list xL10k <- rep(xL, length.out=10000); names(xL10k) <- as.character(seq_along(xL10k)); print(head(mixedSorts(xL10k), 10)) #> $`1` #>  [1] \"b1\"  \"b2\"  \"e6\"  \"e30\" \"g28\" \"l29\" \"n5\"  \"n27\" \"p3\"  \"w4\"  \"y1\"  \"z2\"  #>  #> $`2` #>  [1] \"b8\"  \"e7\"  \"f13\" \"g3\"  \"g5\"  \"h9\"  \"n4\"  \"r10\" \"r11\" \"s9\"  \"t7\"  \"t8\"  #> [13] \"y12\" \"z6\"  #>  #> $`3` #>  [1] \"d11\" \"g17\" \"j15\" \"l14\" \"m12\" \"m13\" \"p14\" \"p18\" \"t10\" \"z16\" #>  #> $`4` #> [1] \"d21\" \"e15\" \"m19\" \"o18\" \"p17\" \"w16\" \"x20\" \"x22\" #>  #> $`5` #> [1] \"g20\" \"h24\" \"k26\" \"m21\" \"t22\" \"v19\" \"y23\" \"z25\" #>  #> $`6` #>  [1] \"b1\"  \"b2\"  \"e6\"  \"e30\" \"g28\" \"l29\" \"n5\"  \"n27\" \"p3\"  \"w4\"  \"y1\"  \"z2\"  #>  #> $`7` #>  [1] \"b8\"  \"e7\"  \"f13\" \"g3\"  \"g5\"  \"h9\"  \"n4\"  \"r10\" \"r11\" \"s9\"  \"t7\"  \"t8\"  #> [13] \"y12\" \"z6\"  #>  #> $`8` #>  [1] \"d11\" \"g17\" \"j15\" \"l14\" \"m12\" \"m13\" \"p14\" \"p18\" \"t10\" \"z16\" #>  #> $`9` #> [1] \"d21\" \"e15\" \"m19\" \"o18\" \"p17\" \"w16\" \"x20\" \"x22\" #>  #> $`10` #> [1] \"g20\" \"h24\" \"k26\" \"m21\" \"t22\" \"v19\" \"y23\" \"z25\" #>   # Now make some list vectors into factors xF <- xL; xF$c <- factor(xL$c) # for fun, reverse the levels xF$c <- factor(xF$c,    levels=rev(levels(xF$c))) xF #> $a #>  [1] \"b1\"  \"z2\"  \"p3\"  \"w4\"  \"n5\"  \"e6\"  \"n27\" \"g28\" \"l29\" \"e30\" \"y1\"  \"b2\"  #>  #> $b #>  [1] \"e7\"  \"b8\"  \"h9\"  \"r10\" \"r11\" \"y12\" \"f13\" \"g3\"  \"n4\"  \"g5\"  \"z6\"  \"t7\"  #> [13] \"t8\"  \"s9\"  #>  #> $c #>  [1] l14 j15 z16 g17 p18 t10 d11 m12 m13 p14 #> Levels: z16 t10 p18 p14 m13 m12 l14 j15 g17 d11 #>  #> $d #> [1] \"m19\" \"x20\" \"d21\" \"x22\" \"e15\" \"w16\" \"p17\" \"o18\" #>  #> $e #> [1] \"y23\" \"h24\" \"z25\" \"k26\" \"v19\" \"g20\" \"m21\" \"t22\" #>  mixedSorts(xF) #> $a #>  [1] \"b1\"  \"b2\"  \"e6\"  \"e30\" \"g28\" \"l29\" \"n5\"  \"n27\" \"p3\"  \"w4\"  \"y1\"  \"z2\"  #>  #> $b #>  [1] \"b8\"  \"e7\"  \"f13\" \"g3\"  \"g5\"  \"h9\"  \"n4\"  \"r10\" \"r11\" \"s9\"  \"t7\"  \"t8\"  #> [13] \"y12\" \"z6\"  #>  #> $c #>  [1] z16 t10 p18 p14 m13 m12 l14 j15 g17 d11 #> Levels: z16 t10 p18 p14 m13 m12 l14 j15 g17 d11 #>  #> $d #> [1] \"d21\" \"e15\" \"m19\" \"o18\" \"p17\" \"w16\" \"x20\" \"x22\" #>  #> $e #> [1] \"g20\" \"h24\" \"k26\" \"m21\" \"t22\" \"v19\" \"y23\" \"z25\" #>   # test super-long list xF10k <- rep(xF, length.out=10000); names(xF10k) <- as.character(seq_along(xF10k)); print(head(mixedSorts(xF10k), 10)) #> $`1` #>  [1] \"b1\"  \"b2\"  \"e6\"  \"e30\" \"g28\" \"l29\" \"n5\"  \"n27\" \"p3\"  \"w4\"  \"y1\"  \"z2\"  #>  #> $`2` #>  [1] \"b8\"  \"e7\"  \"f13\" \"g3\"  \"g5\"  \"h9\"  \"n4\"  \"r10\" \"r11\" \"s9\"  \"t7\"  \"t8\"  #> [13] \"y12\" \"z6\"  #>  #> $`3` #>  [1] z16 t10 p18 p14 m13 m12 l14 j15 g17 d11 #> Levels: z16 t10 p18 p14 m13 m12 l14 j15 g17 d11 #>  #> $`4` #> [1] \"d21\" \"e15\" \"m19\" \"o18\" \"p17\" \"w16\" \"x20\" \"x22\" #>  #> $`5` #> [1] \"g20\" \"h24\" \"k26\" \"m21\" \"t22\" \"v19\" \"y23\" \"z25\" #>  #> $`6` #>  [1] \"b1\"  \"b2\"  \"e6\"  \"e30\" \"g28\" \"l29\" \"n5\"  \"n27\" \"p3\"  \"w4\"  \"y1\"  \"z2\"  #>  #> $`7` #>  [1] \"b8\"  \"e7\"  \"f13\" \"g3\"  \"g5\"  \"h9\"  \"n4\"  \"r10\" \"r11\" \"s9\"  \"t7\"  \"t8\"  #> [13] \"y12\" \"z6\"  #>  #> $`8` #>  [1] z16 t10 p18 p14 m13 m12 l14 j15 g17 d11 #> Levels: z16 t10 p18 p14 m13 m12 l14 j15 g17 d11 #>  #> $`9` #> [1] \"d21\" \"e15\" \"m19\" \"o18\" \"p17\" \"w16\" \"x20\" \"x22\" #>  #> $`10` #> [1] \"g20\" \"h24\" \"k26\" \"m21\" \"t22\" \"v19\" \"y23\" \"z25\" #>   # Make a nested list set.seed(1); l1 <- list(    A=sample(nameVector(11:13, rev(letters[11:13]))),    B=list(       C=sample(nameVector(4:8, rev(LETTERS[4:8]))),       D=sample(nameVector(LETTERS[2:5], rev(LETTERS[2:5])))    ) ) l1; #> $A #>  m  l  k  #> 11 12 13  #>  #> $B #> $B$C #> H G D F E  #> 4 5 8 6 7  #>  #> $B$D #>   D   B   E   C  #> \"C\" \"E\" \"B\" \"D\"  #>  #>  # The output is a nested list with the same structure mixedSorts(l1); #> $A #>  m  l  k  #> 11 12 13  #>  #> $B #> $B$C #> H G F E D  #> 4 5 6 7 8  #>  #> $B$D #>   E   D   C   B  #> \"B\" \"C\" \"D\" \"E\"  #>  #>  mixedSorts(l1, sortByName=TRUE); #> $A #>  k  l  m  #> 13 12 11  #>  #> $B #> $B$C #> D E F G H  #> 8 7 6 5 4  #>  #> $B$D #>   B   C   D   E  #> \"E\" \"D\" \"C\" \"B\"  #>  #>   # Make a nested list with two sub-lists set.seed(1); l2 <- list(    A=list(       E=sample(nameVector(11:13, rev(letters[11:13])))    ),    B=list(       C=sample(nameVector(4:8, rev(LETTERS[4:8]))),       D=sample(nameVector(LETTERS[2:5], rev(LETTERS[2:5])))    ) ) l2; #> $A #> $A$E #>  m  l  k  #> 11 12 13  #>  #>  #> $B #> $B$C #> H G D F E  #> 4 5 8 6 7  #>  #> $B$D #>   D   B   E   C  #> \"C\" \"E\" \"B\" \"D\"  #>  #>  # The output is a nested list with the same structure mixedSorts(l2); #> $A #> $A$E #>  m  l  k  #> 11 12 13  #>  #>  #> $B #> $B$C #> H G F E D  #> 4 5 6 7 8  #>  #> $B$D #>   E   D   C   B  #> \"B\" \"C\" \"D\" \"E\"  #>  #>  mixedSorts(l2, sortByName=TRUE); #> $A #> $A$E #>  k  l  m  #> 13 12 11  #>  #>  #> $B #> $B$C #> D E F G H  #> 8 7 6 5 4  #>  #> $B$D #>   B   C   D   E  #> \"E\" \"D\" \"C\" \"B\"  #>  #>   # when one entry is missing L0 <- list(A=3:1,    B=list(C=c(1:3,NA,0),    D=LETTERS[c(4,5,2)],    E=NULL)); L0 #> $A #> [1] 3 2 1 #>  #> $B #> $B$C #> [1]  1  2  3 NA  0 #>  #> $B$D #> [1] \"D\" \"E\" \"B\" #>  #> $B$E #> NULL #>  #>  mixedSorts(L0) #> $A #> [1] 1 2 3 #>  #> $B #> $B$C #> [1]  0  1  2  3 NA #>  #> $B$D #> [1] \"B\" \"D\" \"E\" #>  #> $B$E #> NULL #>  #>  mixedSorts(L0, na.rm=TRUE) #> $A #> [1] 1 2 3 #>  #> $B #> $B$C #> [1]  0  1  2  3 NA #>  #> $B$D #> [1] \"B\" \"D\" \"E\" #>  #> $B$E #> NULL #>  #>"},{"path":"https://jmw86069.github.io/jamba/reference/mmixedOrder.html","id":null,"dir":"Reference","previous_headings":"","what":"order alphanumeric values from a list — mmixedOrder","title":"order alphanumeric values from a list — mmixedOrder","text":"order alphanumeric values list","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mmixedOrder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"order alphanumeric values from a list — mmixedOrder","text":"","code":"mmixedOrder(   ...,   decreasing = FALSE,   blanksFirst = TRUE,   na.last = NAlast,   keepNegative = FALSE,   keepInfinite = FALSE,   keepDecimal = FALSE,   ignore.case = TRUE,   useCaseTiebreak = TRUE,   sortByName = FALSE,   NAlast = TRUE,   honorFactor = TRUE,   verbose = FALSE,   matrixAsDF = TRUE )"},{"path":"https://jmw86069.github.io/jamba/reference/mmixedOrder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"order alphanumeric values from a list — mmixedOrder","text":"... arguments treated list vectors ordered proper order, based upon mechanism base::order(), data.frame equivalent list. decreasing logical, default FALSE, used reverse sort order. blanksFirst, na.last, keepNegative, keepInfinite, keepDecimal, ignore.case, useCaseTiebreak, sortByName arguments passed mixedOrder(), except sortByName passed along. NAlast logical deprecated favor argument na.last consistency base::sort(). honorFactor logical, default TRUE, used enforce factor level sort order, FALSE sorts character. verbose logical indicating whether print verbose output, passed verbose - 1 mixedOrder(). matrixAsDF logical ... supplies one matrix object, matrixAsDF=TRUE cause converted data.frame, coerce list processing. default, event one matrix object supplied, conversion performed, order define sort order based upon column order, consistent behavior data.frame input.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mmixedOrder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"order alphanumeric values from a list — mmixedOrder","text":"integer vector row orders","code":""},{"path":"https://jmw86069.github.io/jamba/reference/mmixedOrder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"order alphanumeric values from a list — mmixedOrder","text":"function minor extension mixedOrder(), \"multiple mixedOrder()\", accepts list input, similar base::order() operates. function mainly useful sorting something like data.frame, ties column 1 maintained broken non-equal values column 2, . function essentially converts non-numeric column factor, whose levels sorted using mixedOrder(). factor converted numeric value, multiplied -1 decreasing=TRUE. Finally list numeric vectors passed base::order(). fact, mixedSortDF() calls mmixedOrder() function, order sort data.frame properly column. See mixedOrder() mixedSort() better description sort order logic operates.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/mmixedOrder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"order alphanumeric values from a list — mmixedOrder","text":"","code":"# test factor level order factor1 <- factor(c(\"Cnot9\", \"Cnot8\", \"Cnot10\")) sort(factor1) #> [1] Cnot10 Cnot8  Cnot9  #> Levels: Cnot10 Cnot8 Cnot9 mixedSort(factor1) #> [1] Cnot8  Cnot9  Cnot10 #> Levels: Cnot10 Cnot8 Cnot9 factor1[mixedOrder(factor1)] #> [1] Cnot8  Cnot9  Cnot10 #> Levels: Cnot10 Cnot8 Cnot9 factor1[mixedOrder(factor1, honorFactor=FALSE)] #> [1] Cnot8  Cnot9  Cnot10 #> Levels: Cnot10 Cnot8 Cnot9 factor1[mixedOrder(factor1, honorFactor=TRUE)] #> [1] Cnot10 Cnot8  Cnot9  #> Levels: Cnot10 Cnot8 Cnot9  factor1[mmixedOrder(list(factor1))] #> [1] Cnot10 Cnot8  Cnot9  #> Levels: Cnot10 Cnot8 Cnot9 factor1[mmixedOrder(list(factor1), honorFactor=FALSE)] #> [1] Cnot8  Cnot9  Cnot10 #> Levels: Cnot10 Cnot8 Cnot9 factor1[mmixedOrder(list(factor1), honorFactor=TRUE)] #> [1] Cnot10 Cnot8  Cnot9  #> Levels: Cnot10 Cnot8 Cnot9"},{"path":"https://jmw86069.github.io/jamba/reference/nameVector.html","id":null,"dir":"Reference","previous_headings":"","what":"assign unique names for a vector — nameVector","title":"assign unique names for a vector — nameVector","text":"assign unique names vector","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nameVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assign unique names for a vector — nameVector","text":"","code":"nameVector(x, y = NULL, makeNamesFunc = makeNames, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/nameVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"assign unique names for a vector — nameVector","text":"x character vector, data.frame equivalent (matrix, tibble) two columns, second column used name values first column. y character NULL, names. NULL x used. Note y recycled length x, prior sent makeNamesFunc. fringe cases, y can matrix, data.frame, tibble, case pasteByRow() used create character string used vector names. Note case activated x two column matrix, data.frame, tibble. makeNamesFunc function make names unique, default makeNames() ensures names unique. ... passed makeNamesFunc, pasteByRow() y two column data.frame, matrix, tibble. Thus, sep can defined delimiter column values.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nameVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"assign unique names for a vector — nameVector","text":"vector names defined","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nameVector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"assign unique names for a vector — nameVector","text":"function assigns unique names vector, necessary runs makeNames create unique names. differs setNames ensures names unique, names supplied, uses vector define names. helpful run function inside lapply function call, default maintains names, assign names input data already . used data.frame, particularly convenient pull named vector values. example, log2 fold changes gene, gene symbols name vector. nameVector(genedata[,c(\"Gene\",\"log2FC\")])","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/nameVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"assign unique names for a vector — nameVector","text":"","code":"# it generally just creates names from the vector values nameVector(LETTERS[1:5]); #>   A   B   C   D   E  #> \"A\" \"B\" \"C\" \"D\" \"E\"   # if values are replicated, the makeNames() function makes them unique V <- rep(LETTERS[1:5], each=3); nameVector(V); #> A_v1 A_v2 A_v3 B_v1 B_v2 B_v3 C_v1 C_v2 C_v3 D_v1 D_v2 D_v3 E_v1 E_v2 E_v3  #>  \"A\"  \"A\"  \"A\"  \"B\"  \"B\"  \"B\"  \"C\"  \"C\"  \"C\"  \"D\"  \"D\"  \"D\"  \"E\"  \"E\"  \"E\"   # for a two-column data.frame, it creates a named vector using # the values in the first column, and names in the second column. df <- data.frame(seq_along(V), V); df; #>    seq_along.V. V #> 1             1 A #> 2             2 A #> 3             3 A #> 4             4 B #> 5             5 B #> 6             6 B #> 7             7 C #> 8             8 C #> 9             9 C #> 10           10 D #> 11           11 D #> 12           12 D #> 13           13 E #> 14           14 E #> 15           15 E nameVector(df); #> A_v1 A_v2 A_v3 B_v1 B_v2 B_v3 C_v1 C_v2 C_v3 D_v1 D_v2 D_v3 E_v1 E_v2 E_v3  #>    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   # Lastly, admittedly a fringe case, it can take a multi-column data.frame # to generate labels: nameVector(V, df); #>  1_A  2_A  3_A  4_B  5_B  6_B  7_C  8_C  9_C 10_D 11_D 12_D 13_E 14_E 15_E  #>  \"A\"  \"A\"  \"A\"  \"B\"  \"B\"  \"B\"  \"C\"  \"C\"  \"C\"  \"D\"  \"D\"  \"D\"  \"E\"  \"E\"  \"E\""},{"path":"https://jmw86069.github.io/jamba/reference/nameVectorN.html","id":null,"dir":"Reference","previous_headings":"","what":"define a named vector using vector names — nameVectorN","title":"define a named vector using vector names — nameVectorN","text":"define named vector using vector names","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nameVectorN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"define a named vector using vector names — nameVectorN","text":"","code":"nameVectorN(x, makeNamesFunc = makeNames, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/nameVectorN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"define a named vector using vector names — nameVectorN","text":"x character vector object names available names(x). makeNamesFunc function used create unique names, event names(x) unique. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nameVectorN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"define a named vector using vector names — nameVectorN","text":"vector names, whose names uniquely assigned using makeNames using values vector.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nameVectorN.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"define a named vector using vector names — nameVectorN","text":"function creates vector names input vector, assigns names. utility mainly lapply functions maintain name vector output. reason run lapply using names lapply function operating name data references, can convenient name element useful known inside function body. reason name names, list object returned lapply also named consistent names. Consider list data.frames, represents stats results contrast fold change. data.frame may indicate name contrast, list may named contrast. One lapply(nameVectorN(listDF), function(iName)iName) allows internal function access name list element. example added data.frame.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/nameVectorN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"define a named vector using vector names — nameVectorN","text":"","code":"# a simple integer vector with character names L <- nameVector(1:5, LETTERS[1:5]); L; #> A B C D E  #> 1 2 3 4 5   # we can make a vector of names, retaining the names nameVectorN(L); #>   A   B   C   D   E  #> \"A\" \"B\" \"C\" \"D\" \"E\"   # Now consider a named list, where the name is important # to keep for downstream work. K <- list(A=(1:3)^3, B=7:10, C=(1:4)^2); K; #> $A #> [1]  1  8 27 #>  #> $B #> [1]  7  8  9 10 #>  #> $C #> [1]  1  4  9 16 #>  # Typical lapply-style work does not operate on the name, # making it difficult to use the name inside the function. # Here, we just add the name to the colnames, but anything # could be useful. lapply(K, function(i){     data.frame(mean=mean(i), median=stats::median(i));  }); #> $A #>   mean median #> 1   12      8 #>  #> $B #>   mean median #> 1  8.5    8.5 #>  #> $C #>   mean median #> 1  7.5    6.5 #>   # So the next step is to run lapply() on the names lapply(names(K), function(i){    iDF <- data.frame(mean=mean(K[[i]]), median=stats::median(K[[i]]));    colnames(iDF) <- paste(c(\"mean\", \"median\"), i);    iDF; }) #> [[1]] #>   mean A median A #> 1     12        8 #>  #> [[2]] #>   mean B median B #> 1    8.5      8.5 #>  #> [[3]] #>   mean C median C #> 1    7.5      6.5 #>  # The result is good, but the list is no longer named. # The nameVectorN() function is helpful for maintaining the names.  # So we run lapply() on the named-names, which keeps the names in # the resulting list, and sends it into the function. lapply(nameVectorN(K), function(i){    iDF <- data.frame(mean=mean(K[[i]]), median=stats::median(K[[i]]));    colnames(iDF) <- paste(c(\"mean\", \"median\"), i);    iDF; }); #> $A #>   mean A median A #> 1     12        8 #>  #> $B #>   mean B median B #> 1    8.5      8.5 #>  #> $C #>   mean C median C #> 1    7.5      6.5 #>"},{"path":"https://jmw86069.github.io/jamba/reference/newestFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the newest file from a vector of files — newestFile","title":"Return the newest file from a vector of files — newestFile","text":"Return newest file vector files","code":""},{"path":"https://jmw86069.github.io/jamba/reference/newestFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the newest file from a vector of files — newestFile","text":"","code":"newestFile(x, timecol = \"mtime\", n = 1, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/newestFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the newest file from a vector of files — newestFile","text":"x character vector files, specifying file path required. timecol character value output base::file.info() indicating time column used order files. default \"mtime\" refers time file last modified. n integer number files return, order recent least recent. default n=1 returns one newest file. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/newestFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the newest file from a vector of files — newestFile","text":"character vector length=1 recently modified file input vector x. Note files found removed, using base::file.exists(), means invalid symlinks ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/newestFile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return the newest file from a vector of files — newestFile","text":"function returns newest file, defined recently modified time obtained base::file.info().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/newestFile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the newest file from a vector of files — newestFile","text":"","code":"newestFile(list.files()); #> [1] \"nameVectorN.html\""},{"path":"https://jmw86069.github.io/jamba/reference/noiseFloor.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply noise floor and ceiling to numeric vector — noiseFloor","title":"Apply noise floor and ceiling to numeric vector — noiseFloor","text":"Apply noise floor ceiling numeric vector","code":""},{"path":"https://jmw86069.github.io/jamba/reference/noiseFloor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply noise floor and ceiling to numeric vector — noiseFloor","text":"","code":"noiseFloor(   x,   minimum = 0,   newValue = minimum,   adjustNA = FALSE,   ceiling = NULL,   newCeiling = ceiling,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/noiseFloor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply noise floor and ceiling to numeric vector — noiseFloor","text":"x numeric vector matrix minimum numeric floor value newValue numeric, default floor value. Sometimes can useful define different value, one example define values NA, another distinct number away floor. adjustNA logical whether change NA values newValue. ceiling numeric value, optionally ceiling. defined, values ceiling value set newCeiling. newCeiling numeric value ceiling defined, values ceiling set numeric value. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/noiseFloor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply noise floor and ceiling to numeric vector — noiseFloor","text":"numeric vector matrix, matching input type x numeric values fixed minimum ceiling values defined newValue newCeiling, respectively.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/noiseFloor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply noise floor and ceiling to numeric vector — noiseFloor","text":"noise floor useful detected numeric values sometimes clear noise threshold, downstream ratio may calculated using values. Applying noise floor ensures ratios artificially higher, especially cases values involved least reliable. procedure expected produce conservative appropriate ratios scenario. ceiling similar, values ceiling set ceiling, practical values certain threshold conceptually similar threshold. One clear example plotting -log10(Pvalue) range P-values might approach 1e-1000. case, setting ceiling 50 conceptually equates P-values 1e-50, also restricting axis range plot. ability set values floor different value, using newValue different minimum, intended allow separation numeric values floor illustrative purposes.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/noiseFloor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply noise floor and ceiling to numeric vector — noiseFloor","text":"","code":"# start with some random data n <- 2000; x1 <- stats::rnorm(n); y1 <- stats::rnorm(n);  # apply noise floor and ceiling x2 <- noiseFloor(x1, minimum=-2, ceiling=2); y2 <- noiseFloor(y1, minimum=-2, ceiling=2);  # apply noise floor and ceiling with custom replacement values xm <- cbind(x=x1, y=y1); xm3 <- noiseFloor(xm,    minimum=-2, newValue=-3,    ceiling=2, newCeiling=3);  withr::with_par(list(\"mfrow\"=c(2,2)), { plotSmoothScatter(x1, y1); plotSmoothScatter(x2, y2); plotSmoothScatter(xm3); })"},{"path":"https://jmw86069.github.io/jamba/reference/normScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale a numeric vector from 0 to 1 — normScale","title":"Scale a numeric vector from 0 to 1 — normScale","text":"Scale numeric vector 0 1","code":""},{"path":"https://jmw86069.github.io/jamba/reference/normScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale a numeric vector from 0 to 1 — normScale","text":"","code":"normScale(   x,   from = 0,   to = 1,   low = min(x, na.rm = TRUE),   high = max(x, na.rm = TRUE),   naValue = NA,   singletMethod = c(\"mean\", \"min\", \"max\"),   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/normScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale a numeric vector from 0 to 1 — normScale","text":"x numeric vector. minimum numeric value re-scale input numeric vector. maximum numeric value re-scale input numeric vector. low numeric value defining low end input numeric range, intended input values might contain entire numeric range re-scaled. high numeric value defining high end input numeric range, intended input values might contain entire numeric range re-scaled. naValue optional numeric value used replace NA, usually replacing NA zero. singletMethod character value describing handle singlet input values, example scale number 5 . \"mean\" uses average , \"min\" uses value, \"max\" uses value. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/normScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale a numeric vector from 0 to 1 — normScale","text":"numeric vector applying transformations.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/normScale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Scale a numeric vector from 0 to 1 — normScale","text":"function intended quick way scale numeric values 0 1, however ranges can defined needed. NA values ignored remain NA output. handle NA values, use rmNA() function, can optionally replace NA fixed numeric value. parameters low high used optionally provide fixed range values expected x, useful consistent scaling x. Specifically, x may vector numeric values ranging 0 100, define low=0 high=100 x consistently scaled regardless actual range represented x. Note x contains one value, low high defined, x scaled based upon argument singletMethod. example, provide x=2 want scale x values 0 10... x can either mean value 5; minimum value 0; maximum value 10. However, low high defined, x scaled relative range.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/normScale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale a numeric vector from 0 to 1 — normScale","text":"","code":"# Notice the first value 1 is re-scaled to 0 normScale(1:11); #>  [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0  # Scale values from 0 to 10 normScale(1:11, from=0, to=10); #>  [1]  0  1  2  3  4  5  6  7  8  9 10  # Here the low value is defined as 0 normScale(1:10, low=0); #>  [1] 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0  normScale(c(10,20,40,30), from=50, to=65); #> [1] 50 55 65 60"},{"path":"https://jmw86069.github.io/jamba/reference/nullPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a blank plot with optional labels — nullPlot","title":"Create a blank plot with optional labels — nullPlot","text":"Create blank plot optional labels margins","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nullPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a blank plot with optional labels — nullPlot","text":"","code":"nullPlot(   xaxt = \"n\",   yaxt = \"n\",   xlab = \"\",   ylab = \"\",   col = \"transparent\",   xlim = c(1, 2),   ylim = c(1, 2),   las = graphics::par(\"las\"),   doBoxes = TRUE,   doUsrBox = doBoxes,   fill = \"#FFFF9966\",   doAxes = FALSE,   doMargins = TRUE,   marginUnit = c(\"lines\", \"inches\"),   plotAreaTitle = \"Plot Area\",   plotSrt = 0,   plotNumPrefix = \"\",   bty = \"n\",   showMarginsOnly = FALSE,   add = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/nullPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a blank plot with optional labels — nullPlot","text":"xaxt character value compatible withoptions(\"xaxt\") yaxt character value compatible options(\"xaxt\") xlab character x-axis label ylab character y-axis label col character colors passed plot() xlim numeric x-axis range ylim numeric y-axis range las integer value indicating whether axis labels parallel (1) perpendicular (2) axis line. doBoxes logical whether draw annotated boxes around plot inner outer margins. doUsrBox logical whether draw colored bow indicating exact plot space, using function usrBox(). fill character R color used fill background plot used usrBox(). doAxes logical whether draw default x- y-axes. doMargins logical whether label margins, active doBoxes=TRUE. marginUnit character indicating units used margin labels. plotAreaTitle character label printed center plot area. plotSrt numeric angle plotAreaTitle, good labeling plot vertical text displaying plot panel inside grid layout, plot taller wide. plotNumPrefix character integer label appended suffix margin labels, useful annotating multiple plots grid layout, labels sometimes quite close together. label simple attempt sidestep real problem fitting labels inside visual component. bty character passed plot(), default \"n\" suppresses default box, can optionally drawn based upon doBoxes parameter. showMarginsOnly logical whether create new plot annotate existing active plot. add logical whether add existing active R plot, create new plot window. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nullPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a blank plot with optional labels — nullPlot","text":"output, function called byproduct creating blank plot, optionally annotating margins.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/nullPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a blank plot with optional labels — nullPlot","text":"function creates empty plot space, using current graphics::par() settings margins, text size, etc. default displays box around plot window, labels margins plot area review. can useful visual display various base graphics settings, create empty plot window pre-defined axis ranges. Lastly, one can use function create \"blank\" plot uses defined background color, can useful precursor drawing image density may cover whole plot space.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/nullPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a blank plot with optional labels — nullPlot","text":"","code":"nullPlot()   nullPlot(doBoxes=FALSE)"},{"path":"https://jmw86069.github.io/jamba/reference/padInteger.html","id":null,"dir":"Reference","previous_headings":"","what":"prefix integers with leading zeros — padInteger","title":"prefix integers with leading zeros — padInteger","text":"prefix integers leading zeros","code":""},{"path":"https://jmw86069.github.io/jamba/reference/padInteger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prefix integers with leading zeros — padInteger","text":"","code":"padInteger(x, padCharacter = \"0\", useNchar = NULL, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/padInteger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prefix integers with leading zeros — padInteger","text":"x integer, numeric, character vector. reality, nchar(x) required determine padding. padCharacter character nchar(padCharacter)==1, used pad digit prefix. useNchar NULL integer number digits used, maximum nchar(x) higher, number digits used. Note useNchar mostly useful numbers less 10, desired output fixed number digits 2 higher. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/padInteger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prefix integers with leading zeros — padInteger","text":"character vector length(x).","code":""},{"path":"https://jmw86069.github.io/jamba/reference/padInteger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"prefix integers with leading zeros — padInteger","text":"purpose function pad integer numbers contain consistent number digits, helpful sorting values character strings.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/padInteger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prefix integers with leading zeros — padInteger","text":"","code":"padInteger(c(1, 10, 20, 300, 5000)) #> [1] \"0001\" \"0010\" \"0020\" \"0300\" \"5000\""},{"path":"https://jmw86069.github.io/jamba/reference/padString.html","id":null,"dir":"Reference","previous_headings":"","what":"pad a character string to a fixed length — padString","title":"pad a character string to a fixed length — padString","text":"pad character string fixed length","code":""},{"path":"https://jmw86069.github.io/jamba/reference/padString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pad a character string to a fixed length — padString","text":"","code":"padString(   x,   stringLength = max(nchar(x)),   padCharacter = \" \",   justify = \"left\",   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/padString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pad a character string to a fixed length — padString","text":"x character vector stringLength integer length resulting character strings x. default, strings padded length longest entry, however stringLength can defined impose strict number characters entries. padCharacter character string nchar=1 used padding. justify character string \"left\", \"right\", \"center\" indicate alignment resulting text string. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/padString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pad a character string to a fixed length — padString","text":"character vector length(x)","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/padString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pad a character string to a fixed length — padString","text":"","code":"padString(c(\"one\",\"two\",\"three\")); #>     one     two   three  #> \"one  \" \"two  \" \"three\"  padString(c(\"one\",\"two\",\"three\",\"four\"), padCharacter=\"_\", justify=\"center\"); #>     one     two   three    four  #> \"_one_\" \"_two_\" \"three\" \"_four\""},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRow.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste data.frame rows into character vector — pasteByRow","title":"Paste data.frame rows into character vector — pasteByRow","text":"Paste data.frame rows character vector, optionally removing empty fields order avoid delimiters duplicated.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste data.frame rows into character vector — pasteByRow","text":"","code":"pasteByRow(   x,   sep = \"_\",   na.rm = TRUE,   condenseBlanks = TRUE,   includeNames = FALSE,   sepName = \":\",   blankGrep = \"^[ ]*$\",   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste data.frame rows into character vector — pasteByRow","text":"x data.frame comparable object matrix tibble. sep character string separator use columns. na.rm logical whether remove NA values, include \"NA\" strings. condenseBlanks logical whether condense blank empty values without including extra delimiter columns. includeNames logical whether include colname delimited prior value, using sepName delimiter. sepName character string relevant includeNames=TRUE, value becomes delimiter name:value. blankGrep character string used regular expression pattern grep() recognize blank entries; default field containing text, whitespace, considered blank entry. verbose logical whether print verbose output. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste data.frame rows into character vector — pasteByRow","text":"character vector length nrow(x).","code":""},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Paste data.frame rows into character vector — pasteByRow","text":"function intended paste data.frame (matrix, tibble) values row data. differs using apply(x, 2, paste): handles factors without converting integer factor level numbers. also default removes blank empty fields, preventing delimiter included multiple times, per condenseBlanks argument. notably faster apply, means running paste() column data, making output vectorized, scaling rather well large data.frame objects. output can also include name:value pairs, can make output data self-describing circumstances. said, basic usefulness function create row labels.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste data.frame rows into character vector — pasteByRow","text":"","code":"# create an example data.frame a1 <- c(\"red\",\"blue\")[c(1,1,2)]; b1 <- c(\"yellow\",\"orange\")[c(1,2,2)]; d1 <- c(\"purple\",\"green\")[c(1,2,2)]; df2 <- data.frame(a=a1, b=b1, d=d1); df2; #>      a      b      d #> 1  red yellow purple #> 2  red orange  green #> 3 blue orange  green  # the basic output pasteByRow(df2); #>                   1                   2                   3  #> \"red_yellow_purple\"  \"red_orange_green\" \"blue_orange_green\"   # Now remove an entry to show the empty field is skipped df2[3,3] <- \"\"; pasteByRow(df2); #>                   1                   2                   3  #> \"red_yellow_purple\"  \"red_orange_green\"       \"blue_orange\"   # the output tends to make good rownames rownames(df2) <- pasteByRow(df2);  # since the data.frame contains colors, we display using # imageByColors() withr::with_par(list(\"mar\"=c(5,10,4,2)), { imageByColors(df2, cellnote=df2); })"},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRowOrdered.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste data.frame rows into an ordered factor — pasteByRowOrdered","title":"Paste data.frame rows into an ordered factor — pasteByRowOrdered","text":"Paste data.frame rows ordered factor","code":""},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRowOrdered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste data.frame rows into an ordered factor — pasteByRowOrdered","text":"","code":"pasteByRowOrdered(   x,   sep = \"_\",   na.rm = TRUE,   condenseBlanks = TRUE,   includeNames = FALSE,   keepOrder = FALSE,   byCols = seq_len(ncol(x)),   na.last = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRowOrdered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste data.frame rows into an ordered factor — pasteByRowOrdered","text":"x data.frame sep character separator use columns na.rm logical whether remove NA values, include \"NA\" condenseBlanks logical whether condense blank empty values without including extra delimiter columns. includeNames logical whether include colname delimited prior value, using sepName delimiter. keepOrder logical indicating whether non-factor columns order factor levels based upon existing order unique items. option intended data.frame whose columns already sorted proper order, columns factor appropriate factor levels. Note even keepOrder=TRUE existing factor columns honor order factor levels already present columns. byCols integer character passed mixedSortDF(). argument defines order columns sorted mixedSortDF(), affect order columns pasted. Columns always pasted order appear x. argument byCols previously passed via ... added make connection direct. na.last logical passed base::factor() determine whether NA values first last factor level order. ... additional arguments passed jamba::pasteByRow(), jamba::mixedSortDF().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRowOrdered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paste data.frame rows into an ordered factor — pasteByRowOrdered","text":"factor vector whose levels defined existing factor levels, sorted values.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRowOrdered.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Paste data.frame rows into an ordered factor — pasteByRowOrdered","text":"function extension jamba::pasteByRow() pastes rows data.frame character vector. function defines factor levels running jamba::mixedSortDF(unique(x)) calling jamba::pasteByRow() result. Therefore original order input x maintained factor levels based upon appropriate column-based sort. Note ... additional arguments passed jamba::mixedSortDF() customize column-based sort order, used define factor levels. good way test order factors run jamba::mixedSortDF(unique(x)) appropriate arguments, confirm rows ordered expected. Note also jamba::mixedSortDF() uses jamba::mixedSort() performs alphanumeric sort order keep values proper numeric order possible.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/pasteByRowOrdered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paste data.frame rows into an ordered factor — pasteByRowOrdered","text":"","code":"f <- LETTERS; df <- data.frame(A=f[rep(1:3, each=2)],    B=c(NA, f[3]),    C=c(NA, NA, f[2])) df #>   A    B    C #> 1 A <NA> <NA> #> 2 A    C <NA> #> 3 B <NA>    B #> 4 B    C <NA> #> 5 C <NA> <NA> #> 6 C    C    B  # note that output is consistent with mixedSortDF() jamba::mixedSortDF(df) #>   A    B    C #> 2 A    C <NA> #> 1 A <NA> <NA> #> 4 B    C <NA> #> 3 B <NA>    B #> 6 C    C    B #> 5 C <NA> <NA> jamba::pasteByRowOrdered(df) #>     1     2     3     4     5     6  #>     A   A_C   B_B   B_C     C C_C_B  #> Levels: A_C A B_C B_B C_C_B C  jamba::mixedSortDF(df, na.last=FALSE) #>   A    B    C #> 1 A <NA> <NA> #> 2 A    C <NA> #> 3 B <NA>    B #> 4 B    C <NA> #> 5 C <NA> <NA> #> 6 C    C    B jamba::pasteByRowOrdered(df, na.last=FALSE) #>     1     2     3     4     5     6  #>     A   A_C   B_B   B_C     C C_C_B  #> Levels: A A_C B_B B_C C C_C_B  jamba::mixedSortDF(df, byCols=c(3, 2, 1)) #>   A    B    C #> 6 C    C    B #> 3 B <NA>    B #> 2 A    C <NA> #> 4 B    C <NA> #> 1 A <NA> <NA> #> 5 C <NA> <NA> jamba::pasteByRowOrdered(df, byCols=c(3, 2, 1)) #>     1     2     3     4     5     6  #>     A   A_C   B_B   B_C     C C_C_B  #> Levels: C_C_B B_B A_C B_C A C  df1 <- data.frame(group=rep(c(\"Control\", \"ABC1\"), each=6),    time=rep(c(\"Hour2\", \"Hour10\"), each=3),    rep=paste0(\"Rep\", 1:3)) # default will sort each column alphanumerically pasteByRowOrdered(df1) #>                   1                   2                   3                   4  #>  Control_Hour2_Rep1  Control_Hour2_Rep2  Control_Hour2_Rep3 Control_Hour10_Rep1  #>                   5                   6                   7                   8  #> Control_Hour10_Rep2 Control_Hour10_Rep3     ABC1_Hour2_Rep1     ABC1_Hour2_Rep2  #>                   9                  10                  11                  12  #>     ABC1_Hour2_Rep3    ABC1_Hour10_Rep1    ABC1_Hour10_Rep2    ABC1_Hour10_Rep3  #> 12 Levels: ABC1_Hour2_Rep1 ABC1_Hour2_Rep2 ABC1_Hour2_Rep3 ... Control_Hour10_Rep3  # keepOrder=TRUE will honor existing order of character columns pasteByRowOrdered(df1, keepOrder=TRUE) #>                   1                   2                   3                   4  #>  Control_Hour2_Rep1  Control_Hour2_Rep2  Control_Hour2_Rep3 Control_Hour10_Rep1  #>                   5                   6                   7                   8  #> Control_Hour10_Rep2 Control_Hour10_Rep3     ABC1_Hour2_Rep1     ABC1_Hour2_Rep2  #>                   9                  10                  11                  12  #>     ABC1_Hour2_Rep3    ABC1_Hour10_Rep1    ABC1_Hour10_Rep2    ABC1_Hour10_Rep3  #> 12 Levels: Control_Hour2_Rep1 Control_Hour2_Rep2 ... ABC1_Hour10_Rep3"},{"path":"https://jmw86069.github.io/jamba/reference/plotPolygonDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution and histogram overlay — plotPolygonDensity","title":"Plot distribution and histogram overlay — plotPolygonDensity","text":"Plot distribution histogram overlay","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotPolygonDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution and histogram overlay — plotPolygonDensity","text":"","code":"plotPolygonDensity(   x,   doHistogram = TRUE,   doPolygon = TRUE,   col = NULL,   barCol = \"#00337799\",   polyCol = \"#00449977\",   polyBorder = makeColorDarker(polyCol),   histBorder = makeColorDarker(barCol, darkFactor = 1.5),   colAlphas = c(0.8, 0.6, 0.9),   darkFactors = c(-1.3, 1, 3),   lwd = 2,   las = 2,   u5.bias = 0,   pretty.n = 10,   bw = NULL,   breaks = 100,   width = NULL,   densityBreaksFactor = 3,   axisFunc = graphics::axis,   bty = \"l\",   cex.axis = 1.5,   doPar = TRUE,   heightFactor = 0.95,   weightFactor = NULL,   main = \"Histogram distribution\",   xaxs = \"i\",   yaxs = \"i\",   xaxt = \"s\",   yaxt = \"s\",   xlab = \"\",   ylab = \"\",   log = NULL,   xScale = c(\"default\", \"log10\", \"sqrt\"),   usePanels = TRUE,   useOnePanel = FALSE,   ablineV = NULL,   ablineH = NULL,   ablineVcol = \"#44444499\",   ablineHcol = \"#44444499\",   ablineVlty = \"solid\",   ablineHlty = \"solid\",   removeNA = TRUE,   add = FALSE,   ylimQuantile = 0.99,   ylim = NULL,   xlim = NULL,   highlightPoints = NULL,   highlightCol = \"gold\",   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/plotPolygonDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution and histogram overlay — plotPolygonDensity","text":"x numeric vector, numeric matrix. matrix provided, column matrix used data source. doHistogram logical indicating whether plot histogram bars. doPolygon logical indicating whether plot density polygon. col character color, x supplied matrix, vector colors applied across plot panels. Note col override colors defined barCol, polyCol, histBorder, polyBorder. barCol, polyCol, polyBorder, histBorder character colors used col supplied. define colors histogram bars, polygon fill, polygon border, histogram bar border, respectively. colAlphas numeric vector length 3, indicating alpha transparency use histogram bar fill, polygon density fill, border color, respectively. Alpha transparency scaled 0 (fully transparent) 1 (fully opaque). alpha transparency values applied color col col defined. darkFactors numeric used adjust colors col defined. Values applied histogram bar fill, polygon density fill, border color, respectively, calling makeColorDarker(). lwd numeric line width. las integer used define axis label orientation. u5.bias, pretty.n numeric arguments passed base::pretty() define pretty axis label positions. bw character string bandwidth name use density calculation, passed jamba::breakDensity(). default stats::density() calls smooth density kernel, obscures finer details, default jamba::breakDensity() uses detailed kernel. breaks numeric breaks sent hist define number histogram bars. can form single integer number equidistant breaks, numeric vector specific break positions, remember include starting value lower lowest value x, ending value higher highest value x. Passed breakDensity(). width numeric passed breakDensity(). densityBreaksFactor numeric scaling factor control level detail density, passed breakDensity(). axisFunc function optionally used place graphics::axis() define axis labels. bty character string used define plot box shape, see graphics::box(). cex.axis numeric scalar adjust axis label font size. doPar logical indicating whether apply graphics::par(), specifically x supplied multi-column matrix. doPar=FALSE, panels margin adjustments made . heightFactor numeric value indicating height y-axis plot scale use scaling histogram polygon density within plot panel. weightFactor numeric passed breakDensity(). main character title display plot, used x supplied single numeric vector. Otherwise plot title uses relevant colnames(x) value. xaxs, yaxs, xaxt, yaxt character string indicating type x-axis y-axis render, see graphics::par(). xlab, ylab character labels x-axis y-axis, respectively. log character vector, optionally containing \"x\" /\"y\" indicate axes log-transformed. \"x\" %% log sets xScale=\"log10\", methods equivalent defining log-transformation x-axis. xScale character string define x-axis transformation: \"default\" applies transform; \"log10\" applies log10 transform, specifically log10(x + 1) \"sqrt\" applies sqrt transform. usePanels logical indicating whether separate density plots panels x contains multiple columns. useOnePanel=FALSE panels defined columns fit one page. useOnePanel logical indicating whether define multiple panels one page. Therefore useOnePanel=TRUE create multiple pages one panel page, may work well output multi-page 'PDF' files. ablineV, ablineH numeric vector representing abline vertical horizontal positions, respectively. values mostly helpful multi-panel plots, draw consistent reference lines panel. ablineVcol, ablineHcol, default\"#44444499\", abline color, used ablineV ablineH supplied, respectively. ablineVlty, ablineHlty numeric character indicating line type use ablineV ablineH, respectively. removeNA logical indicating whether remove NA values prior running histogram density calculations. Presence NA values generally causes functions fail. add logical indicating whether add plot existing visualization. ylimQuantile numeric value 0 1, indicating quantile value density y values use ylim. threshold applied ylim NULL. ylim, xlim numeric y-axis x-axis ranges, respectively. either NULL, axis range determined independently plot panel. Either value can supplied list control numeric range individual plot, relevant x supplied multi-column matrix. highlightPoints character vector optional rownames, integer values row indices, rows highlighted. x supplied matrix, highlightPoints can supplied list vectors, referring column x. rows highlighted, plot drawn points, highlighted points drawn histogram bars, polygon density, relevant. highlightCol character vector colors use fill histogram highlightPoints supplied. Multiple values recycled one per column x, x supplied multi-column matrix. verbose logical indicating whether print verbose output. ... additional arguments passed relevant internal functions.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotPolygonDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution and histogram overlay — plotPolygonDensity","text":"invisible list density histogram data output, however function called -product plot output.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotPolygonDensity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot distribution and histogram overlay — plotPolygonDensity","text":"function wrapper around graphics::hist() stats::density(), enough customization cover situations need customization. example log=\"x\" automatically log-transform x-axis, keeping histogram bars uniformly sized. Alternatively, xScale=\"sqrt\" square root transform data, transform x-axis keeping numeric values constant. also scales density profile height similar histogram bar height, using 99th quantile y-axis value, helps prevent outlier peaks dominating y-axis range, thus obscuring interesting smaller features. supplied data matrix, function create layout ncol(x) panels, plot distribution column panel, using categorical colors rainbow2(). similar style using ggplot2, see plotRidges(), displays density profile sample, much scalable format larger numbers columns. default NA values ignored, distributions represent non-NA values. Colors can controlled using parameter col, can specifically defined bars barCol polygon polyCol.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/plotPolygonDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distribution and histogram overlay — plotPolygonDensity","text":"","code":"# basic density plot set.seed(123); x <- stats::rnorm(2000); plotPolygonDensity(x, main=\"basic polygon density plot\");   # fewer breaks plotPolygonDensity(x,    breaks=20,    main=\"breaks=20\");   # log-scaled x-axis plotPolygonDensity(10^(3+stats::rnorm(2000)), log=\"x\",    breaks=50,    main=\"log-scaled x-axis\");   # highlighted points set.seed(123); plotPolygonDensity(x,    highlightPoints=sample(which(abs(x) > 1), size=200),    breaks=40,    main=\"breaks=40\");   # hide axis labels set.seed(123); plotPolygonDensity(x,    highlightPoints=sample(which(abs(x) > 1), size=200),    breaks=40,    xaxt=\"n\",    yaxt=\"n\",    main=\"breaks=40\");   # multiple columns set.seed(123); xm <- do.call(cbind, lapply(1:4, function(i){stats::rnorm(2000)})) plotPolygonDensity(xm, breaks=20)"},{"path":"https://jmw86069.github.io/jamba/reference/plotRidges.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ridges density plots for numeric matrix input — plotRidges","title":"Plot ridges density plots for numeric matrix input — plotRidges","text":"Plot ridges density plots numeric matrix input","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotRidges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ridges density plots for numeric matrix input — plotRidges","text":"","code":"plotRidges(   x,   xScale = c(\"none\", \"-log10\", \"log10\"),   xlab = NULL,   ylab = NULL,   title = ggplot2::waiver(),   subtitle = ggplot2::waiver(),   caption = ggplot2::waiver(),   xlim = NULL,   color_sub = NULL,   rel_min_height = 0,   bandwidth = NULL,   adjust = 1,   scale = 1,   share_bandwidth = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/plotRidges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ridges density plots for numeric matrix input — plotRidges","text":"x matrix numeric values, list numeric vectors. either case data converted long-tall format plotting. xScale character string indicating whether transform x-axis values: \"none\": transformation \"-log10\": values transformed log10(x) x-axis labels adjusted accordingly. \"log10\": values transformed log10(1 + x) except negative values transformed -log10(1 - x). x-axis labels plotted account log10(1 + x) offset. xlab, ylab character strings optionally used x-axis y-axis labels. title, subtitle, caption character string values optionally passed relevant downstream ggplot2 functions. xlim passed ggplot2::xlim() define x-axis range. color_sub character vector named colnames(x), x list, names(color_sub) contain names(x), used define specific colors ridge plot. rel_min_height numeric values passed ggridges::geom_density_ridges2() bandwidth numeric value used define bandwidth density share_bandwidth=TRUE default. bandwidth affects level detail presented ridgeline, shared across ridgelines share_bandwidth=TRUE ridgeline use consistent level detail. case, passed ggridges::geom_density_ridges2(). Note bandwidth=NULL default value derived range data plotted. adjust numeric used adjust default bandwidth bandwidth=NULL. intended convenient method adjust level detail. scale numeric passed directly ggridges::geom_density_ridges2(). share_bandwidth logical indicating whether supply ggridges::geom_density_ridges2() specific bandwidth use ridgelines. share_bandwidth=FALSE ridgeline presented using default bandwidth ggridges::geom_density_ridges2(). ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotRidges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ridges density plots for numeric matrix input — plotRidges","text":"object class \"gg\", \"ggplot\" density plot form ridges.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotRidges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot ridges density plots for numeric matrix input — plotRidges","text":"function convenient wrapper ggridges::geom_density_ridges2(), intended analogous plotPolygonDensity() differs plotting item separate plot panel using base graphics. function plots item ridgeline plot plot window using ggplot2::ggplot().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/plotRidges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ridges density plots for numeric matrix input — plotRidges","text":"","code":"# multiple columns set.seed(123); xm <- do.call(cbind, lapply(1:4, function(i){stats::rnorm(2000)})) plotRidges(xm)   set.seed(123); x <- stats::rnorm(2000) plotRidges(x)"},{"path":"https://jmw86069.github.io/jamba/reference/plotSmoothScatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth scatter plot with enhancements — plotSmoothScatter","title":"Smooth scatter plot with enhancements — plotSmoothScatter","text":"Produce scatter plot using point density instead displaying individual data points.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotSmoothScatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth scatter plot with enhancements — plotSmoothScatter","text":"","code":"plotSmoothScatter(   x,   y = NULL,   bwpi = 50,   binpi = 50,   bandwidthN = NULL,   nbin = NULL,   expand = c(0.04, 0.04),   transFactor = 0.25,   transformation = function(x) x^transFactor,   xlim = NULL,   ylim = NULL,   xlab = NULL,   ylab = NULL,   nrpoints = 0,   colramp = c(\"white\", \"lightblue\", \"blue\", \"orange\", \"orangered2\"),   col = \"black\",   doTest = FALSE,   fillBackground = TRUE,   naAction = c(\"remove\", \"floor0\", \"floor1\"),   xaxt = \"s\",   yaxt = \"s\",   add = FALSE,   asp = NULL,   applyRangeCeiling = TRUE,   useRaster = TRUE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/plotSmoothScatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth scatter plot with enhancements — plotSmoothScatter","text":"x numeric vector, data matrix two  columns. y numeric vector, data supplied via x matrix, y NULL. bwpi numeric value indicating bandwidth \"per inch\" scale bandwidth based upon visual space available. argument used define bandwidthN, however bwpi used bandwidthN=NULL. bandwidth used define 2-dimensional point density. binpi numeric value indicating number bins \"per inch\", scale based upon visual space available. argument used define nbin, however binpi used nbin=NULL. bandwidthN integer number bandwidth steps use across visible plot window. Note bandwidth differs default graphics::smoothScatter() uses visible plot window instead data range, plot window sufficiently similar data range, resulting smoothed density visibly distorted. parameter also permits display higher (lower) level detail. nbin integer number bins use converting kernel density result (uses bandwidthN ) usable image. setting effectively resolution rendering bandwidth density terms visible pixels. example nbin=256 create 256 visible pixels wide tall plot panel; nbin=32 create 32 visible pixels, lower detail may suitable multi-panel plots. use variable number bins, try binpi. expand numeric value indicating fraction x-axis y-axis ranges add create expanded range, used add=FALSE. default expand=c(0.04, 0.04) mimics R base plot default adds 4 percent total, therefore 2 percent side visible range. transFactor numeric value used default transformation function, effectively scales density points reasonable visible distribution. argument convenience method avoid type full transformation function. transformation function converts point density number, typically related square root cube root transformation. Note default uses transFactor custom function supplied, use transFactor unless specified. xlim numeric x-axis range, NULL use data range. ylim numeric y-axis range, NULL use data range. xlab, ylab character labels x- y-axis, respectively. nrpoints integer number outlier datapoints display, defined graphics::smoothScatter(), however default nrpoints=0 avoid additional clutter output, default arguments bwpi, binpi usually indicate individual points. colramp input recognized getColorRamp(): character vector multiple colors character string length 1, valid R color used create linear color gradient character name known color gradient RColorBrewer viridis function produces vector colors, form function(n) n defines number colors. col character string R color used nrpoints non-zero, color defines color points. doTest logical indicating whether create visual set test plots demonstrate utility function. fillBackground logical indicating whether fill background plot panel first color colramp. default fillBackground=TRUE useful since plot panel may slightly wider range data displayed, first color colramp plot device background color. Run test using: plotSmoothScatter(doTest=TRUE, fillBackground=FALSE, colramp=\"viridis\") compare : plotSmoothScatter(doTest=TRUE, colramp=\"viridis\") naAction character string indicating handle NA values, typically x NA y NA, vice versa. valid values: \"remove\" ignore points either x y NA \"floor0\" change NA values zero 0 either x y \"floor1\" change NA values one 1 either x y latter two options useful desired plot indicate presence NA value either x y, also indicating corresponding non-NA value opposing axis. driving use plotting gene fold changes two experiments, two experiments may measured genes. xaxt character value compatible graphics::par(xaxt), used control x-axis range, similar use plot() generic functions. yaxt character value compatible graphics::par(yaxt), used control y-axis range, similar use plot() generic functions. add logical whether add existing active R plot, create new plot window. asp numeric optional aspect ratio, described graphics::plot.window(), asp=1 defines x- y-axis coordinate ranges distances points rendered accurately. One data unit y-axis equal length asp multiplied one data unit x-axis. Notes: add=TRUE, value asp ignored, existing plot device re-used. add=FALSE asp defined numeric value, new plot device opened using plot.window(), xlim ylim values passed function. result graphics::par(\"usr\") values used define xlim ylim purpose determining visible points, relevant applyRangeCeiling. applyRangeCeiling logical indicating handle points outside visible plot range. Valid values: TRUE Points outside viewing area fixed plot boundaries, order represent additional points outside boundary. setting recommended reasonable viewing area smaller actual data, example consistent across plot panels, want indicate points may outside range. FALSE Points outside viewing area displayed, special visual indication. setting useful data may contain large number points c(0, 0) density overwhelms detail rest plot. case setting xlim=c(1e-10, 10) applyRangeCeiling=FALSE obscure points. useRaster logical indicating whether produce plots using graphics::rasterImage() function produces plot raster image offline scales image visible plot space. technique two benefits: produces substantially faster plot output. Output contains substantially fewer plot objects, results much smaller file sizes saving 'PDF' 'SVG' format. verbose logical indicating whether print verbose output. ... additional arguments passed called functions, including getColorRamp(), nullPlot(), smoothScatterJam().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotSmoothScatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth scatter plot with enhancements — plotSmoothScatter","text":"list invisibly, sufficient reproduce graphical parameters used create smooth scatter plot.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/plotSmoothScatter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smooth scatter plot with enhancements — plotSmoothScatter","text":"function intends make several potentially customizable features graphics::smoothScatter() plots much easier customize. example bandwidthN allows defining number bandwidth steps used kernel density function, importantly bases number steps visible plot window, range data, can differ substantially. nbin argument related, used define level detail used image function, plotting numerous smaller panels, can useful reduce unnecessary visual details. function also default produces raster image plot useRaster=TRUE, adjusts x- y-bandwidth produce visually round density even x- y-ranges different. Comments: asp=1 define aspect ratio 1, meaning x-axis y-axis units physical size output device. true, fillBackground=TRUE xlim ylim values follow logic plot.default() plot.window() axis include least xlim ylim ranges, additional range included order maintain plot aspect ratio. asp, xlim ylim, defined, data \"cropped\" respective xlim ylim values relevant, plot drawn appropriate plot aspect ratio. applyRangeCeiling=TRUE, points outside fixed xlim ylim range fixed edge range, plot drawn requested plot aspect ratio. recommended define xlim ylim also defining asp. add=TRUE xlim ylim values already defined plot device. recommended define xlim ylim add=TRUE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/plotSmoothScatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth scatter plot with enhancements — plotSmoothScatter","text":"","code":"# doTest=TRUE invisibly returns the test data x <- plotSmoothScatter(doTest=TRUE);   # so it can be plotted again with different settings colnames(x) <- c(\"column_1\", \"column_2\") plotSmoothScatter(x, colramp=\"RdBu_r\");"},{"path":"https://jmw86069.github.io/jamba/reference/printDebug.html","id":null,"dir":"Reference","previous_headings":"","what":"print colorized output to R console — printDebug","title":"print colorized output to R console — printDebug","text":"print colorized output R console print colorized output R console, inverted print colorized output HTML","code":""},{"path":"https://jmw86069.github.io/jamba/reference/printDebug.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print colorized output to R console — printDebug","text":"","code":"printDebug(   ...,   fgText = NULL,   fgDefault = getOption(\"jam.fgDefault\", c(\"darkorange1\", \"dodgerblue\")),   bgText = NULL,   fgTime = getOption(\"jam.fgTime\", \"cyan2\"),   timeStamp = getOption(\"jam.timeStamp\", TRUE),   comment = getOption(\"jam.comment\", !htmlOut),   formatNumbers = getOption(\"jam.formatNumbers\", TRUE),   trim = getOption(\"jam.trim\", TRUE),   digits = getOption(\"jam.digits\"),   nsmall = getOption(\"jam.nsmall\", 0L),   justify = \"left\",   big.mark = getOption(\"jam.big.mark\", \",\"),   small.mark = getOption(\"jam.small.mark\", \".\"),   zero.print = NULL,   width = NULL,   doColor = getOption(\"jam.doColor\"),   splitComments = FALSE,   collapse = getOption(\"jam.collapse\", \"\"),   sep = getOption(\"jam.sep\", \",\"),   doReset = NULL,   detectColors = TRUE,   dex = 2,   darkFactor = c(1, 1.5),   sFactor = c(1, 1.5),   lightMode = checkLightMode(),   Crange = getOption(\"jam.Crange\"),   Lrange = getOption(\"jam.Lrange\"),   removeNA = FALSE,   replaceNULL = NULL,   adjustRgb = getOption(\"jam.adjustRgb\"),   byLine = FALSE,   verbose = FALSE,   indent = \"\",   keepNA = TRUE,   file = getOption(\"jam.file\", \"\"),   append = getOption(\"jam.append\", TRUE),   invert = getOption(\"jam.invert\", FALSE),   htmlOut = getOption(\"jam.htmlOut\", FALSE) )  printDebugI(..., invert = TRUE)  printDebugHtml(..., htmlOut = TRUE, comment = FALSE)"},{"path":"https://jmw86069.github.io/jamba/reference/printDebug.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print colorized output to R console — printDebug","text":"... character, factor, numeric compatible atomic vectors printed R console. arguments recognized un-named argument, argument whose name match named arguments . fgText one two formats define foreground color elements ... printed. element colored order, multiple vector values contained one ... element, color defined fgText extended. input types recognized: NULL color defined, one two outputs: values ... represent colors, colors used colorize output text. names() present used text labels place vector value. values ... represent colors, default color set used: c(\"darkorange1\", \"dodgerblue\"). disable option 1 , define specific value fgText, fgText=c(\"darkorange1\", \"dodgerblue\"). vector R compatible colors, recycled length .... element ... vector multiple values, corresponding color fgText shaded slightly lighter darker, recycled vector length, adjacent values slightly different color. behavior controlled default argument splitComments=TRUE. list vectors R compatible colors, recycled length ..., applied element ... order. one color defined, multiple values present corresponding list element, color shaded slightly lighter darker, recycled vector length, described . behavior controlled default argument splitComments=TRUE. multiple colors defined list element, values recycled vector length. Note: invert=TRUE values fgText bgText reversed, resulting fgText NULL color defined setTextContrastColor() order define contrasting text color. fgDefault character defaults getOption(\"jam.fgDefault\", c(\"darkorange1\", \"dodgerblue\")), used colors defined fgText input ... values. bgText vector R colors, list vectors, used define background color, using approach described fgText. Note NULL NA defines absence background color, default. invert=TRUE, default printDebugI(), values fgText bgText reversed. fgTime character R color colorize time timeStamp logical whether include time stamp output comment logical whether prefix output '## ' comment, character string used prefix. formatNumbers logical whether format numbers using format() controls number digits displayed, default. formatNumbers=FALSE sometimes numeric values contain integers may represented 14.0000000001. trim, digits, nsmall, justify, big.mark, small.mark, zero.print, width arguments passed format(). doColor logical NULL indicating whether colorize output. doColor NULL, \"crayon\" package available, crayon detects color permitted, color enabled. splitComments logical whether color element independently without light-dark alternating pattern. intensity adjustment controlled dex passed color2gradient(). collapse character collapse string used separate list items, default \"\" text separation expected input data. sep character separator used separate vector elements, list items contains vector. doReset logical NULL, indicating whether apply crayon::reset() delimiter sep. doReset=TRUE style delimiter forced reset, using crayon::reset(), remove pre-existing style crayon::strip_style(). doReset=NULL sep contains ANSI escape characters, left -; doReset=NULL sep contain ANSI escape characters, sep becomes crayon::reset(sep) forces style reset printed values. detectColors logical whether detect potentially try correct console color capabilities. dex numeric passed color2gradient() split color lighter,darker alternating pattern. version 0.0.83.900, process used gradientWtFactor=1 adjustable. Note splitComments=TRUE input values ... flattened single vector, colors fgText applied directly without adjustment. darkFactor, sFactor numeric arguments deprecated. lightMode logical NULL, indicating whether text background color light, lightMode=TRUE indicates background white light enough require darker text, imposing maximum brightness colors displayed. NULL calls checkLightMode(), uses: getOption(\"jam.lightMode\") defined otherwise attempts detect whether session running inside RStudio, checking environmental variable \"RSTUDIO\", assumption default RStudio uses light background, therefore lightMode=TRUE. steps fail, uses lightMode=FALSE. force specific lightMode uses, use options: options(jam.lightMode=TRUE) options(jam.lightMode=FALSE). Crange, Lrange numeric range chroma luminance values 0 100. NULL, default values assigned setCLranges(). intent restrict range relative console background color, also controlled lightMode. removeNA logical whether remove NA values print console. replaceNULL character NULL, optionally replace NULL elements non-NULL character value, otherwise NULL elements ignored. adjustRgb numeric value adjustment used conversion RGB colors ANSI colors, inherently lossy. defined, uses default returned setCLranges() uses getOption(\"jam.adjustRgb\") default=0. order boost color contrast, alternate value -0.1 suggested. byLine logical whether delimit lists line instead using collapse combine onto one line. verbose logical whether print verbose output indent character optional characters used prefix indent output. numeric rounded integer, many character spaces \" \" concatenated together define indent width. Note indent text colorized. keepNA logical, default TRUE, whether keep print NA values. file argument passed cat() send output file compatible output cat(). append logical whether append output, passed cat() file defined. invert logical indicating whether foreground background colors switched, default printDebugI(). Note resulting fgText NULL, color defined setTextContrastColor() define contrasting text color relative background color bgText. htmlOut logical indicating whether print HTML span output, using format <span style=\"color:fg;background-color:bg\">text<\/span>. argument yet implemented, testing required determine best mechanism use things like 'Rmarkdown' rendering, R-shiny app rendering.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/printDebug.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print colorized output to R console — printDebug","text":"NULL invisibly, function called side effect printing output using cat(). NULL invisibly, function called side effect printing output using cat(). NULL invisibly, function called side effect printing output using cat().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/printDebug.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"print colorized output to R console — printDebug","text":"function prints colorized output R console, rules colorizing output help visually distinguish items. main intent use function print pretty debug messages, color helps identify. default, output following configurable properties: line begins comment, controlled default comment=getOption(\"jam.comment\", TRUE) default uses \"##\", can defined use different prefix, FALSE prefix . line includes time date stamp controlled timeStamp=getOption(\"jam.timeStamp\", TRUE) default includes current time date. line formats numeric values, controlled formatNumbers=getOption(\"jam.formatNumbers\", TRUE), determines whether apply arguments big.mark small.mark make numeric values readable. entry ... printed foreground color fgText, background color bgText, slight lighter/darker dithering effect add minor visual distinction multiple values. Values vector concatenated sep=\",\" default. list concatenated collapse=\"\" default. Additional convenience rules: convenience, last ... argument character vector colors, assumed fgText. entry ... character vector R colors, names printed using color vector fgText, names exist colors printed using color vector fgText. printDebugI() invert=TRUE, colors typically assigned fgText instead assigned bgText. specific color assignments, fgText /bgText can defined list character vectors R colors, case list overall recycled length ... printed, within vector ... printed corresponding color vector recycled length vector. use inside 'Rmarkdown' .Rmd documents, current recommendation define R output results='asis' like :   define global option turn comment prefix printDebug(): options(\"jam.comment\"=FALSE) colorized text, may require \"html_output\" rendering .Rmd 'Rmarkdown' file, well option enable HTML formatting printDebug(): options(\"jam.htmlOut\"=TRUE). function prints colorized output R console, using logic printDebug except default color inverted default fgText colors applied background. function prints colorized output HTML form, using logic printDebug() except default output HTML. intended use 'Rmarkdown' chunk option results='asis', causes HTML code interpreted directly HTML. function internally calls printDebug() calls make_html_styles(). text surrounded <span color='#FFFFFF'> HTML formatting.","code":"\\`\\`\\`{r block_name, results='asis'} # some R code here \\`\\`\\`"},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/printDebug.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print colorized output to R console — printDebug","text":"","code":"printDebug(\"Testing \", \"default \", \"printDebug().\"); #> ##  (14:38:26) 22Mar2025:   Testing default printDebug().  printDebug(\"List of vectors:\", c(\"one\", \"two\", \"three\")); #> ##  (14:38:26) 22Mar2025:   List of vectors:one,two,three   # By default, there is no space between separate elements in `...` printDebug(\"List of vectors:\", c(\"one\", \"two\", \"three\"),    c(\"four\", \"five\", \"six\")); #> ##  (14:38:26) 22Mar2025:   List of vectors:one,two,threefour,five,six  # To add a space \" \" between elements, use collapse printDebug(\"List of vectors:\", c(\"one\", \"two\", \"three\"),    c(\"four\", \"five\", \"six\"), collapse=\" \"); #> ##  (14:38:26) 22Mar2025:   List of vectors: one, two, three four, five, six   # slightly different style, one entry per line, indented: printDebug(\"List of vectors:\", c(\"one\", \"two\", \"three\"),    c(\"four\", \"five\", \"six\"), collapse=\"\\n   \"); #> ##  (14:38:26) 22Mar2025:   List of vectors: #>    one, #>    two, #>    three #>    four, #>    five, #>    six   # when a vector entirely contains recognized colors, # the colors are used in the output printDebug(c(\"red\", \"blue\", \"yellow\")); #> ##  (14:38:26) 22Mar2025:      red,blue,yellow   # When the vector contains colors, the names are used as the label color_vector <- jamba::nameVector(c(\"red\", \"blue\", \"green\",\"orange\"),    c(\"group_A\", \"group_B\", \"group_C\", \"group_D\")); printDebug(color_vector); #> ##  (14:38:26) 22Mar2025:      group_A,group_B,group_C,group_D   # Remember the sister function that inverses the colors printDebugI(color_vector); #> ##  (14:38:26) 22Mar2025:      group_A,group_B,group_C,group_D   printDebug(1:10, fgText=\"blue\", dex=2); #> ##  (14:38:26) 22Mar2025:   1,2,3,4,5,6,7,8,9,10  printDebug(1:10, bgText=\"blue\", dex=2); #> ##  (14:38:26) 22Mar2025:   1,2,3,4,5,6,7,8,9,10  printDebug(1:10, fgText=\"orange\", dex=2); #> ##  (14:38:26) 22Mar2025:   1,2,3,4,5,6,7,8,9,10"},{"path":"https://jmw86069.github.io/jamba/reference/provigrep.html","id":null,"dir":"Reference","previous_headings":"","what":"provigrep: progressive case-insensitive value-grep — provigrep","title":"provigrep: progressive case-insensitive value-grep — provigrep","text":"case-insensitive value-grep vector patterns case-insensitive grep vector patterns","code":""},{"path":"https://jmw86069.github.io/jamba/reference/provigrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"provigrep: progressive case-insensitive value-grep — provigrep","text":"","code":"provigrep(   patterns,   x,   maxValues = NULL,   sortFunc = c,   rev = FALSE,   returnType = c(\"vector\", \"list\"),   ignore.case = TRUE,   value = TRUE,   ... )  proigrep(..., value = FALSE)"},{"path":"https://jmw86069.github.io/jamba/reference/provigrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"provigrep: progressive case-insensitive value-grep — provigrep","text":"patterns character vector regular expression patterns, ultimately passed base::grep(). x character vector subject base::grep(). maxValues integer NULL, maximum matching entries return per grep pattern. Note grep pattern may match multiple values, values returned , restricting items returned one grep pattern may allow item matched subsequent patterns, see examples. argument commonly used maxValues=1 returns first matching entry per pattern. sortFunc function NULL, used sort entries within set matching entries. Use NULL avoid sorting entries. rev logical whether reverse order matching entries. Use TRUE like entries matching patterns placed last, entries matching grep patterns placed first. technique effective placing \"noise names\" end long vector, example. returnType character indicating whether return vector list. list order grep patterns, using empty elements indicate entries matched pattern. output useful like know patterns matched specific entries. ignore.case logical parameter sent base::grep(), TRUE runs case-insensitive mode, default. value logical indicating whether return matched value, value=FALSE index position returned. ... additional arguments passed vigrep().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/provigrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"provigrep: progressive case-insensitive value-grep — provigrep","text":"character vector entries x reordered match order patterns provided,  list returnType=\"list\" named patterns order provided. value=FALSE returns integer index values x.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/provigrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"provigrep: progressive case-insensitive value-grep — provigrep","text":"Purpose provide \"progressive vigrep()\",value-returning, case-insensitive grep, starting ordered vector grep patterns. example, returns entries order matched, progressive use grep patterns. particularly good using multiple grep patterns, since grep() accept multiple patterns input. function also returns unique matches order matched, alleviates need run series grep() functions collating results. mainly allow prioritized ordering matching entries, one like certain matching  entries first, followed another set matching entries, without duplication. example, one might grep patterns, want certain pattern hits listed first.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/provigrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"provigrep: progressive case-insensitive value-grep — provigrep","text":"","code":"# a rather comical example # set up a test set with labels containing several substrings set.seed(1); testTerms <- c(\"robot\",\"tree\",\"dog\",\"mailbox\",\"pizza\",\"noob\"); testWords <- pasteByRow(t(combn(testTerms,3)));  # now pull out entries matching substrings in order provigrep(c(\"pizza\", \"dog\", \"noob\", \".\"), testWords); #>                     3                     6                     8  #>    \"robot_tree_pizza\"     \"robot_dog_pizza\" \"robot_mailbox_pizza\"  #>                    10                    12                    14  #>    \"robot_pizza_noob\"      \"tree_dog_pizza\"  \"tree_mailbox_pizza\"  #>                    16                    17                    19  #>     \"tree_pizza_noob\"   \"dog_mailbox_pizza\"      \"dog_pizza_noob\"  #>                    20                     1                     5  #>  \"mailbox_pizza_noob\"      \"robot_tree_dog\"   \"robot_dog_mailbox\"  #>                     7                    11                    13  #>      \"robot_dog_noob\"    \"tree_dog_mailbox\"       \"tree_dog_noob\"  #>                    18                     4                     9  #>    \"dog_mailbox_noob\"     \"robot_tree_noob\"  \"robot_mailbox_noob\"  #>                    15                     2  #>   \"tree_mailbox_noob\"  \"robot_tree_mailbox\"  # more detail about the sort order is shown with returnType=\"list\" provigrep(c(\"pizza\", \"dog\", \"noob\", \".\"), testWords, returnType=\"list\"); #> $pizza #>                     3                     6                     8  #>    \"robot_tree_pizza\"     \"robot_dog_pizza\" \"robot_mailbox_pizza\"  #>                    10                    12                    14  #>    \"robot_pizza_noob\"      \"tree_dog_pizza\"  \"tree_mailbox_pizza\"  #>                    16                    17                    19  #>     \"tree_pizza_noob\"   \"dog_mailbox_pizza\"      \"dog_pizza_noob\"  #>                    20  #>  \"mailbox_pizza_noob\"  #>  #> $dog #>                   1                   5                   7                  11  #>    \"robot_tree_dog\" \"robot_dog_mailbox\"    \"robot_dog_noob\"  \"tree_dog_mailbox\"  #>                  13                  18  #>     \"tree_dog_noob\"  \"dog_mailbox_noob\"  #>  #> $noob #>                    4                    9                   15  #>    \"robot_tree_noob\" \"robot_mailbox_noob\"  \"tree_mailbox_noob\"  #>  #> $. #>                    2  #> \"robot_tree_mailbox\"  #>  # rev=TRUE will reverse the order of the list provigrep(c(\"pizza\", \"dog\", \"noob\", \".\"), testWords, returnType=\"list\", rev=TRUE); #> $. #>                    2  #> \"robot_tree_mailbox\"  #>  #> $noob #>                    4                    9                   15  #>    \"robot_tree_noob\" \"robot_mailbox_noob\"  \"tree_mailbox_noob\"  #>  #> $dog #>                   1                   5                   7                  11  #>    \"robot_tree_dog\" \"robot_dog_mailbox\"    \"robot_dog_noob\"  \"tree_dog_mailbox\"  #>                  13                  18  #>     \"tree_dog_noob\"  \"dog_mailbox_noob\"  #>  #> $pizza #>                     3                     6                     8  #>    \"robot_tree_pizza\"     \"robot_dog_pizza\" \"robot_mailbox_pizza\"  #>                    10                    12                    14  #>    \"robot_pizza_noob\"      \"tree_dog_pizza\"  \"tree_mailbox_pizza\"  #>                    16                    17                    19  #>     \"tree_pizza_noob\"   \"dog_mailbox_pizza\"      \"dog_pizza_noob\"  #>                    20  #>  \"mailbox_pizza_noob\"  #>  provigrep(c(\"pizza\", \"dog\", \"noob\", \".\"), testWords, rev=TRUE); #>                     2                     4                     9  #>  \"robot_tree_mailbox\"     \"robot_tree_noob\"  \"robot_mailbox_noob\"  #>                    15                     1                     5  #>   \"tree_mailbox_noob\"      \"robot_tree_dog\"   \"robot_dog_mailbox\"  #>                     7                    11                    13  #>      \"robot_dog_noob\"    \"tree_dog_mailbox\"       \"tree_dog_noob\"  #>                    18                     3                     6  #>    \"dog_mailbox_noob\"    \"robot_tree_pizza\"     \"robot_dog_pizza\"  #>                     8                    10                    12  #> \"robot_mailbox_pizza\"    \"robot_pizza_noob\"      \"tree_dog_pizza\"  #>                    14                    16                    17  #>  \"tree_mailbox_pizza\"     \"tree_pizza_noob\"   \"dog_mailbox_pizza\"  #>                    19                    20  #>      \"dog_pizza_noob\"  \"mailbox_pizza_noob\"   # another example showing ordering of duplicated entries set.seed(1); x <- paste0(    sample(letters[c(1,2,2,3,3,3,4,4,4,4)]),    sample(1:5)); x; #>  [1] \"d3\" \"c5\" \"d1\" \"a4\" \"b2\" \"c3\" \"b5\" \"d1\" \"c4\" \"d2\" # sort by letter provigrep(letters[1:4], x) #>  [1] \"a4\" \"b2\" \"b5\" \"c5\" \"c3\" \"c4\" \"d3\" \"d1\" \"d1\" \"d2\"  # show more detail about how the sort is performed provigrep(letters[1:4], x, returnType=\"list\") #> $a #> [1] \"a4\" #>  #> $b #> [1] \"b2\" \"b5\" #>  #> $c #> [1] \"c5\" \"c3\" \"c4\" #>  #> $d #> [1] \"d3\" \"d1\" \"d1\" \"d2\" #>   # rev=TRUE will reverse the order of pattern matching # which is most useful when \".\" is the last pattern: provigrep(c(letters[1:3], \".\"), x, returnType=\"list\") #> $a #> [1] \"a4\" #>  #> $b #> [1] \"b2\" \"b5\" #>  #> $c #> [1] \"c5\" \"c3\" \"c4\" #>  #> $. #> [1] \"d3\" \"d1\" \"d1\" \"d2\" #>  provigrep(c(letters[1:3], \".\"), x, returnType=\"list\", rev=TRUE) #> $. #> [1] \"d3\" \"d1\" \"d1\" \"d2\" #>  #> $c #> [1] \"c5\" \"c3\" \"c4\" #>  #> $b #> [1] \"b2\" \"b5\" #>  #> $a #> [1] \"a4\" #>   # example demonstrating maxValues # return in list format provigrep(c(\"[ABCD]\", \"[CDEF]\", \"[FGHI]\"), LETTERS, returnType=\"list\") #> $`[ABCD]` #> [1] \"A\" \"B\" \"C\" \"D\" #>  #> $`[CDEF]` #> [1] \"E\" \"F\" #>  #> $`[FGHI]` #> [1] \"G\" \"H\" \"I\" #>   # maxValues=1 provigrep(c(\"[ABCD]\", \"[CDEF]\", \"[FGHI]\"), LETTERS, returnType=\"list\", maxValues=1) #> $`[ABCD]` #> [1] \"A\" #>  #> $`[CDEF]` #> [1] \"C\" #>  #> $`[FGHI]` #> [1] \"F\" #>  provigrep(c(\"[ABCD]\", \"[CDEF]\", \"[FGHI]\"), LETTERS, returnType=\"list\", maxValues=1, value=FALSE) #> $`[ABCD]` #> [1] 1 #>  #> $`[CDEF]` #> [1] 3 #>  #> $`[FGHI]` #> [1] 6 #>  proigrep(c(\"[ABCD]\", \"[CDEF]\", \"[FGHI]\"), LETTERS, maxValues=1) #> [1] 1 3 6"},{"path":"https://jmw86069.github.io/jamba/reference/rad2deg.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert radians to degrees — rad2deg","title":"Convert radians to degrees — rad2deg","text":"Convert radians degrees","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rad2deg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert radians to degrees — rad2deg","text":"","code":"rad2deg(x, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/rad2deg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert radians to degrees — rad2deg","text":"x numeric vector, expected radian values zero pi*2. ... parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rad2deg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert radians to degrees — rad2deg","text":"numeric vector coverting radians degrees.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rad2deg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert radians to degrees — rad2deg","text":"function simply converts radians range zero pi*2, degrees range 0 360.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rad2deg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert radians to degrees — rad2deg","text":"","code":"rad2deg(c(pi*2, pi/2)) #> [1] 360  90"},{"path":"https://jmw86069.github.io/jamba/reference/rainbow2.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple rainbow palette replacement — rainbow2","title":"Simple rainbow palette replacement — rainbow2","text":"Simple rainbow palette replacement using variable saturation vibrance","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rainbow2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple rainbow palette replacement — rainbow2","text":"","code":"rainbow2(n, s = c(0.9, 0.7, 0.88, 0.55), v = c(0.92, 1, 0.85, 0.94), ...)"},{"path":"https://jmw86069.github.io/jamba/reference/rainbow2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple rainbow palette replacement — rainbow2","text":"n integer number colors requested s, v numeric vector values recycle saturation vibrance, respectively. purpose improve visual distinction adjacent nearby colors color wheel. ... additional arguments passed grDevices::rainbow(): start,end control starting ending hue [0,1], alpha alpha opacity, default NULL adds alpha, rev reverse color order.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rainbow2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple rainbow palette replacement — rainbow2","text":"character vector R colors.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rainbow2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple rainbow palette replacement — rainbow2","text":"","code":"showColors(list(    `rainbow(24)`=grDevices::rainbow(24),    `rainbow2(24)`=rainbow2(24),    `rainbow2(24, rev=TRUE)`=rainbow2(24, rev=TRUE),    `rainbow2(24, start=0.5, end=0.499)`=rainbow2(24,       start=0.5, end=0.5-1e-5),    `rainbow2(24, rev=TRUE,\\nstart=0.5, end=0.499)`=rainbow2(24,       rev=TRUE, start=0.5, end=0.5-1e-5)))"},{"path":"https://jmw86069.github.io/jamba/reference/rbindList.html","id":null,"dir":"Reference","previous_headings":"","what":"rbind a list of vectors into matrix or data.frame — rbindList","title":"rbind a list of vectors into matrix or data.frame — rbindList","text":"rbind list vectors matrix data.frame","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rbindList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rbind a list of vectors into matrix or data.frame — rbindList","text":"","code":"rbindList(   x,   emptyValue = \"\",   nullValue = NULL,   keepListNames = TRUE,   newColnames = NULL,   newRownames = NULL,   fixBlanks = TRUE,   returnDF = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/rbindList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rbind a list of vectors into matrix or data.frame — rbindList","text":"x list atomic vector, matrix, data.frame objects. emptyValue character value use represent missing values, whenever blank cell introduced resulting matrix nullValue optional value used replace NULL entries input list, useful especially data produced strsplit() \"\". Use nullValue=\"\" replace NULL \"\" preserve original list length. Otherwise nullValue=NULL empty entries silently dropped. keepListNames logical whether use list names rownames resulting matrix data.frame. newColnames NULL character vector colnames use resulting matrix data.frame. newRownames NULL character vector rownames use resulting matrix data.frame. supplied, value overrides keepListNames=TRUE use list names rownames. fixBlanks logical whether use blank values instead repeating vector length maximum vector length filling row matrix data.frame. returnDF logical whether return data.frame, default FALSE, matrix returned. verbose logical whether print verbose output processing. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rbindList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rbind a list of vectors into matrix or data.frame — rbindList","text":"matrix unless returnDF=TRUE output coerced data.frame. rownames default derived list names, colnames derived vector names. input x contains data.frame matrix objects, output retain values.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rbindList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rbind a list of vectors into matrix or data.frame — rbindList","text":"purpose function emulate .call(rbind, x) list vectors, specifically handling different numbers entries per vector. output matrix number columns longest vector (largest number columns) input list x. Instead recycling values row fill target number columns, function fills cells blank fields, default argument fixBlanks=TRUE. extensive timings tests time function created, technique notably faster alternatives. runs  .call(rbind, x) subsequently replaces recycled values blank entries, manner notably faster alternative approaches pre-processing input data.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rbindList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rbind a list of vectors into matrix or data.frame — rbindList","text":"","code":"L <- list(a=LETTERS[1:4], b=letters[1:3]); rbindList(L); #>   [,1] [,2] [,3] [,4] #> a \"A\"  \"B\"  \"C\"  \"D\"  #> b \"a\"  \"b\"  \"c\"  \"\"   rbindList(L, returnDF=TRUE); #>   1 2 3 4 #> a A B C D #> b a b c"},{"path":"https://jmw86069.github.io/jamba/reference/readOpenxlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Import one or more data.frame from 'Excel' 'xlsx' format — readOpenxlsx","title":"Import one or more data.frame from 'Excel' 'xlsx' format — readOpenxlsx","text":"Import one data.frame 'Excel' 'xlsx' format","code":""},{"path":"https://jmw86069.github.io/jamba/reference/readOpenxlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import one or more data.frame from 'Excel' 'xlsx' format — readOpenxlsx","text":"","code":"readOpenxlsx(   xlsx,   sheet = NULL,   startRow = 1,   startCol = 1,   rows = NULL,   cols = NULL,   check.names = FALSE,   check_header = FALSE,   check_header_n = 10,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/readOpenxlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import one or more data.frame from 'Excel' 'xlsx' format — readOpenxlsx","text":"xlsx character path 'Excel' file xlsx format, compatible openxlsx::read.xlsx(). sheet one NULL, character, integer vector, : sheet=NULL import every sheet; character vector sheet names; integer vector sheet index values. sheet names determined openxlsx::getSheetNames(). startRow integer indicating row number start importing sheet. Note startRow can vector length length(sheet), specify startRow sheet. Note startRow ignored rows defined sheet, minimize confusion using togetheer. startCol integer indicating first column number retain importing sheet. Note startCol can vector length length(sheet), specify startCol sheet. Note startCol ignored cols defined sheet, minimize confusion using togetheer. rows integer vector indicating specific rows import sheet. specify different rows sheet, supply rows list integer vectors. Note rows defined sheet, used startRow ignored sheet. cols integer vector indicating specific column numbers import sheet. specify different cols sheet, supply cols list integer vectors. Note cols defined sheet, used startCol ignored sheet. check.names logical indicating whether call make.names() colnames data.frame. Note openxlsx::read.xlsx() honor check.names=FALSE, workaround applied loads single line without column headers, order obtain data without mangling column headers. process fails, another workaround use startRow=2 (one higher previous) colNames=FALSE. check_header logical indicating whether test presence header rows, may multi-line column headers. check_header=TRUE, method simply tests presence rows ncol different remaining rows data given sheet. header rows detected, values assigned column dimnames data.frame. check_header_n integer number rows test header rows, used check_header=TRUE. step intended top row(s) contain fewer columns headers, actual column headers, example first row c(\"Sample\", \"\", \"\", \"Lane\", \"\"), second row c(\"Name\", \"Type\", \"Label\", \"Name\", \"Type\"). case desired output \"Sample_Name\",\"Sample_Type\",\"Sample_Label\",\"Lane_Name\",\"Lane_Type\"). option default FALSE due number exceptions seen real data. verbose logical indicating whether print verbose output. ... additional arguments passed openxlsx::read.xlsx().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/readOpenxlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import one or more data.frame from 'Excel' 'xlsx' format — readOpenxlsx","text":"list data.frame objects, one per sheet xlsx.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/readOpenxlsx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import one or more data.frame from 'Excel' 'xlsx' format — readOpenxlsx","text":"function equivalent openxlsx::read.xlsx() minor additions: returns list data.frame objects, one per sheet. properly reads colnames check.names=FALSE. default function returns every sheet given xlsx file. useful details: Empty columns skipped loading, means worksheet whose data starts column 3 returned two empty columns, followed data worksheet. Similarly, empty columns middle data worksheet included output. startRow rows applied, rows takes priority used instead startRows. fact startRows defined startRows <- min(rows) relevant worksheet. However, worksheet either argument can NULL.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/readOpenxlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import one or more data.frame from 'Excel' 'xlsx' format — readOpenxlsx","text":"","code":"# set up a test data.frame set.seed(123); lfc <- -3:3 + stats::rnorm(7)/3; colorSub <- nameVector(    rainbow2(7),    LETTERS[1:7]) df <- data.frame(name=LETTERS[1:7],    int=round(4^(1:7)),    num=(1:7)*4-2 + stats::rnorm(7),    fold=2^abs(lfc)*sign(lfc),    lfc=lfc,    pvalue=10^(-1:-7 + stats::rnorm(7)),    hit=sample(c(-1,0,0,1,1), replace=TRUE, size=7)); df; #>   name   int        num      fold        lfc       pvalue hit #> 1    A     4  0.7349388 -9.106049 -3.1868252 2.780730e-02   0 #> 2    B    16  5.3131471 -4.218488 -2.0767258 6.122279e-01   1 #> 3    C    64  9.5543380 -1.395160 -0.4804306 3.146665e-03  -1 #> 4    D   256 15.2240818  1.016424  0.0235028 1.079898e-06  -1 #> 5    E  1024 18.3598138  2.060645  1.0430959 5.027544e-05   0 #> 6    F  4096 22.4007715  5.945047  2.5716883 3.366732e-07   0 #> 7    G 16384 26.1106827  8.898972  3.1536387 8.554139e-09   1 # write to tempfile for examples if (check_pkg_installed(\"openxlsx\")) {    out_xlsx <- tempfile(pattern=\"writeOpenxlsx_\", fileext=\".xlsx\")    writeOpenxlsx(x=df,       file=out_xlsx,       sheetName=\"jamba_test\",       append=FALSE);    # now read it back    df_list <- readOpenxlsx(xlsx=out_xlsx);    df_list[[1]] } #>   name   int        num      fold        lfc       pvalue hit #> 1    A     4  0.7349388 -9.106049 -3.1868252 2.780730e-02   0 #> 2    B    16  5.3131471 -4.218488 -2.0767258 6.122279e-01   1 #> 3    C    64  9.5543380 -1.395160 -0.4804306 3.146665e-03  -1 #> 4    D   256 15.2240818  1.016424  0.0235028 1.079898e-06  -1 #> 5    E  1024 18.3598138  2.060645  1.0430959 5.027544e-05   0 #> 6    F  4096 22.4007715  5.945047  2.5716883 3.366732e-07   0 #> 7    G 16384 26.1106827  8.898972  3.1536387 8.554139e-09   1"},{"path":"https://jmw86069.github.io/jamba/reference/relist_named.html","id":null,"dir":"Reference","previous_headings":"","what":"relist a vector which allows re-ordered names — relist_named","title":"relist a vector which allows re-ordered names — relist_named","text":"relist vector imposes model object list structure allowing vector elements names re-ordered","code":""},{"path":"https://jmw86069.github.io/jamba/reference/relist_named.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"relist a vector which allows re-ordered names — relist_named","text":"","code":"relist_named(x, skeleton, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/relist_named.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"relist a vector which allows re-ordered names — relist_named","text":"x vector applied skeleton list structure order. skeleton list object representing desired final list structure, vector input data x returned -, without change. Specifically, skeleton vector, names(x) maintained without change. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/relist_named.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"relist a vector which allows re-ordered names — relist_named","text":"list object structure skeleton.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/relist_named.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"relist a vector which allows re-ordered names — relist_named","text":"function simple update utils::relist() allows order vectors change, alongside correct names element. specifically, function replace updated names corresponding names list skeleton, case default implementation utils::relist(). function called mixedSorts() iteratively calls mixedOrder() vector component input list, permits nested lists. result single sorted vector split list components, relist-ed original structure. process, important retain vector names order defined mixedOrder().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/relist_named.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"relist a vector which allows re-ordered names — relist_named","text":"","code":"# generate nested list x <- list(A=nameVector(LETTERS[3:1]),    B=list(       E=nameVector(LETTERS[10:7]),       D=nameVector(LETTERS[5:4])),    C=list(       G=nameVector(LETTERS[19:16]),       F=nameVector(LETTERS[15:11]),       H=list(          I=nameVector(LETTERS[22:20]))       )) x #> $A #>   C   B   A  #> \"C\" \"B\" \"A\"  #>  #> $B #> $B$E #>   J   I   H   G  #> \"J\" \"I\" \"H\" \"G\"  #>  #> $B$D #>   E   D  #> \"E\" \"D\"  #>  #>  #> $C #> $C$G #>   S   R   Q   P  #> \"S\" \"R\" \"Q\" \"P\"  #>  #> $C$F #>   O   N   M   L   K  #> \"O\" \"N\" \"M\" \"L\" \"K\"  #>  #> $C$H #> $C$H$I #>   V   U   T  #> \"V\" \"U\" \"T\"  #>  #>  #>   # unlisted vector of items xu <- unlist(unname(x)) # unlisted vector of names xun <- unname(jam_rapply(x, names)); names(xu) <- xun;  # recursive list element lengths xrn <- jam_rapply(x, length); # define factor in order of list structure xn <- factor(    rep(names(xrn),       xrn),    levels=names(xrn));  # re-create the original list xu_new <- unlist(unname(split(xu, xn))) xnew <- relist_named(xu_new, x); xnew #> $A #>   C   B   A  #> \"C\" \"B\" \"A\"  #>  #> $B #> $B$E #>   J   I   H   G  #> \"J\" \"I\" \"H\" \"G\"  #>  #> $B$D #>   E   D  #> \"E\" \"D\"  #>  #>  #> $C #> $C$G #>   S   R   Q   P  #> \"S\" \"R\" \"Q\" \"P\"  #>  #> $C$F #>   O   N   M   L   K  #> \"O\" \"N\" \"M\" \"L\" \"K\"  #>  #> $C$H #> $C$H$I #>   V   U   T  #> \"V\" \"U\" \"T\"  #>  #>  #>   # re-order elements k <- mixedOrder(xu_new); xuk <- unlist(unname(split(xu[k], xn[k]))) xk <- relist_named(xuk, x); xk #> $A #>   A   B   C  #> \"A\" \"B\" \"C\"  #>  #> $B #> $B$E #>   G   H   I   J  #> \"G\" \"H\" \"I\" \"J\"  #>  #> $B$D #>   D   E  #> \"D\" \"E\"  #>  #>  #> $C #> $C$G #>   P   Q   R   S  #> \"P\" \"Q\" \"R\" \"S\"  #>  #> $C$F #>   K   L   M   N   O  #> \"K\" \"L\" \"M\" \"N\" \"O\"  #>  #> $C$H #> $C$H$I #>   T   U   V  #> \"T\" \"U\" \"V\"  #>  #>  #>   # the default relist() function does not support this use case xdefault <- relist(xuk, x); xdefault #> $A #>   C   B   A  #> \"A\" \"B\" \"C\"  #>  #> $B #> $B$E #>   J   I   H   G  #> \"G\" \"H\" \"I\" \"J\"  #>  #> $B$D #>   E   D  #> \"D\" \"E\"  #>  #>  #> $C #> $C$G #>   S   R   Q   P  #> \"P\" \"Q\" \"R\" \"S\"  #>  #> $C$F #>   O   N   M   L   K  #> \"K\" \"L\" \"M\" \"N\" \"O\"  #>  #> $C$H #> $C$H$I #>   V   U   T  #> \"T\" \"U\" \"V\"  #>  #>  #>"},{"path":"https://jmw86069.github.io/jamba/reference/reload_rmarkdown_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Reload 'Rmarkdown' cache — reload_rmarkdown_cache","title":"Reload 'Rmarkdown' cache — reload_rmarkdown_cache","text":"Reload 'Rmarkdown' cache order files created, R environment","code":""},{"path":"https://jmw86069.github.io/jamba/reference/reload_rmarkdown_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reload 'Rmarkdown' cache — reload_rmarkdown_cache","text":"","code":"reload_rmarkdown_cache(   dir = \".\",   maxnum = 1000,   max_cache_name = NULL,   envir = new.env(),   file_sort = c(\"globals\", \"objects\", \"ctime\", \"mtime\"),   preferred_load_types = c(\"lazyLoad\", \"load\"),   dryrun = FALSE,   verbose = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/reload_rmarkdown_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reload 'Rmarkdown' cache — reload_rmarkdown_cache","text":"dir character path directory contains 'Rmarkdown' cache files. file recognized file extension \".rdx\". maxnum integer indicating maximum number cache files re-load, order. max_cache_name character optional string indicating name 'Rmarkdown' cache chunk function stop loading cache data. cache files point loaded. option intended help recreate data available particular 'Rmarkdown' chunk processing. envir environment data populated, default new.env() creates new environment returned invisibly. file_sort character string indicating sort cache files, default uses best available, order: \"globals\" (global index file), \"objects\" (object index file), \"ctime\" (creation time), \"mtime\" (modification time). global index preferred, options intended rare scenarios global index available. methods using \"mtime\" \"ctime\" less accurate, yet may sufficient simple output. \"globals\" uses \"__globals\" file cache directory. \"objects\" uses \"__objects\" file cache directory. ctime sorts file creation time mtime sorts file modification time preferred_load_types character string indicating preferred load mechanism, default uses \"lazyLoad\" '.rdx'/'.rdb' files available, otherwise \"load\" load '.RData'/'.rda' files. 'lazyLoad' '.rdx'/.'rdb' files created 'Rmarkdown' options include cache=TRUE, cache.lazy=TRUE. load option used cache=TRUE, cache.lazy=FALSE preferred analyses involving large data objects. dryrun logical default FALSE, whether perform dry-run, prints messages load data. verbose logical default TRUE, whether print verbose output. argument passed functions. ... additional arguments passed lazyLoad() load() relevant method used re-load cache object data.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/reload_rmarkdown_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reload 'Rmarkdown' cache — reload_rmarkdown_cache","text":"envir returned invisibly, data objects populated environment.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/reload_rmarkdown_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reload 'Rmarkdown' cache — reload_rmarkdown_cache","text":"function intended help re-load 'Rmarkdown' cache files created processing/rendering 'Rmarkdown' file. default, cached R objects loaded environment defined envir, However, recommended envir used define new environment cached session loaded.   , cached data objects can seen ls(cache_env) retrieved get(\"objectname\", envir=cache_env). supplied maxnum max_cache_name cache loaded point, beyond. recommended method determine cache use dryrun=TRUE view sections, choose integer number, character name define maximum chunk load.","code":"cache_env <- new.env() reload_rmarkdown_cache(cachedir, envir=cache_env)"},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/renameColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns in a data.frame, matrix, tibble, or GRanges object — renameColumn","title":"Rename columns in a data.frame, matrix, tibble, or GRanges object — renameColumn","text":"Rename columns data.frame, matrix, tibble, GRanges object","code":""},{"path":"https://jmw86069.github.io/jamba/reference/renameColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns in a data.frame, matrix, tibble, or GRanges object — renameColumn","text":"","code":"renameColumn(x, from, to, verbose = FALSE, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/renameColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns in a data.frame, matrix, tibble, or GRanges object — renameColumn","text":"x data.frame, matrix, tbl, GRanges equivalent object. work object colnames() defined. character vector colnames expected x. values match colnames(x) ignored. character vector length() == length() corresponding target name colnames match . verbose logical indicating whether print verbose output. ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/renameColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns in a data.frame, matrix, tibble, or GRanges object — renameColumn","text":"data.frame object equivalent input x, columns renamed values . genomic ranges objects GRanges IRanges, colnames updated S4Vectors::values(x).","code":""},{"path":"https://jmw86069.github.io/jamba/reference/renameColumn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename columns in a data.frame, matrix, tibble, or GRanges object — renameColumn","text":"function intended rename one columns data.frame, matrix, tibble, GRanges related object. gracefully ignore columns match, order make possible call function without problem. function also recognize input objects GRanges, ucscData, IRanges, store annotation DataFrame accessible via S4Vectors::values(). Note IRanges package required, generic function values(). values supplied converted factor character avoid coersion R integer, noted output prior jamba version 0.0.72.900.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/renameColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns in a data.frame, matrix, tibble, or GRanges object — renameColumn","text":"","code":"df <- data.frame(A=1:5, B=6:10, C=11:15); df; #>   A  B  C #> 1 1  6 11 #> 2 2  7 12 #> 3 3  8 13 #> 4 4  9 14 #> 5 5 10 15 df2 <- renameColumn(df,    from=c(\"A\",\"C\"),    to=c(\"a_new\", \"c_new\")); df2; #>   a_new  B c_new #> 1     1  6    11 #> 2     2  7    12 #> 3     3  8    13 #> 4     4  9    14 #> 5     5 10    15 df3 <- renameColumn(df2,    from=c(\"A\",\"C\",\"B\"),    to=c(\"a_new\", \"c_new\",\"b_new\")); df3; #>   a_new b_new c_new #> 1     1     6    11 #> 2     2     7    12 #> 3     3     8    13 #> 4     4     9    14 #> 5     5    10    15"},{"path":"https://jmw86069.github.io/jamba/reference/rgb2col.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert RGB color matrix to R color — rgb2col","title":"Convert RGB color matrix to R color — rgb2col","text":"Convert RGB color matrix R color","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rgb2col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert RGB color matrix to R color — rgb2col","text":"","code":"rgb2col(   red,   green = NULL,   blue = NULL,   alpha = NULL,   names = NULL,   maxColorValue = NULL,   keepNA = TRUE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/rgb2col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert RGB color matrix to R color — rgb2col","text":"red numeric vector red values; RGB numeric matrix rownames c(\"red\",\"green\",\"blue\") order, optional rowname \"alpha\"; character strings comma-separated rgb values, format \"100,20,10\". latter input designed handle web rgb values. green numeric vector, red matrix comma-delimited character string, parameter ignored. blue numeric vector, red matrix comma-delimited character string, parameter ignored. alpha numeric vector, red matrix comma-delimited character string, parameter ignored. Alpha values always expected range [0,1], even maxColorValue higher 1. alpha FALSE, alpha transparency removed. alpha TRUE original alpha transparency retained without change. supplying alpha numeric vector, use Inf represent TRUE alpha values kept without change, use -1 negative number indicate alpha values remove output. names character, default NULL, optional names apply output colors. maxColorValue numeric maximum value colors. NULL defaults 1 unless values 1, case defaults 255. keepNA logical whether keep NA values, returning NA input red, green, /blue NA. keepNA==FALSE substitutes 0 NA values. verbose logical indicating whether print verbose output ... Additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rgb2col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert RGB color matrix to R color — rgb2col","text":"character vector R colors.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rgb2col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert RGB color matrix to R color — rgb2col","text":"function intends augment rgb function, handle output col2rgb. goal handle multiple color conversions, e.g. rgb2col(grDevices::col2rgb(\"red\")). function also maintains alpha transparency supplied. output named either names(red), rownames(red), supplied, value parameter names. Note alpha used define alpha transparency, additional control output. alpha FALSE output colors alpha transparency, hex form means colors format \"#RRGGBB\" \"#RRGGBBAA\". alpha TRUE previous alpha transparency values used without change. alpha numeric vector, numeric values always expected range [0,1], 0 completely transparent, 1 completely transparent. Supplied alpha values override present red red matrix like produced grDevices::col2rgb(..., alpha=TRUE). alpha numeric vector, use -1 negative number indicate alpha value removed. alpha numeric vector, use Inf indicate alpha transparency retained without change. Therefore, alpha = c(-1, 0, 1, Inf) apply following, order: remove alpha; set alpha 0; set alpha 1; set alpha input color.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rgb2col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert RGB color matrix to R color — rgb2col","text":"","code":"# start with a color vector # red and blue with partial transparency colorV <- c(\"#FF000055\", \"#00339999\");  # Show the output of rgb2col # make sure to include alpha=TRUE to maintain alpha transparency grDevices::col2rgb(colorV, alpha=TRUE); #>       [,1] [,2] #> red    255    0 #> green    0   51 #> blue     0  153 #> alpha   85  153  # confirm we can convert from RGB back to the same colors rgb2col(grDevices::col2rgb(colorV, alpha=TRUE)); #> [1] \"#FF000055\" \"#00339999\""},{"path":"https://jmw86069.github.io/jamba/reference/rlengths.html","id":null,"dir":"Reference","previous_headings":"","what":"lengths for recursive lists — rlengths","title":"lengths for recursive lists — rlengths","text":"lengths recursive lists","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rlengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lengths for recursive lists — rlengths","text":"","code":"rlengths(x, doSum = NULL, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/rlengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lengths for recursive lists — rlengths","text":"x list vector doSum logical indicating whether return overall sum lengths. NULL return aggregate length list element x. FALSE return list structure x, length . TRUE return total length elements x one value. ... additional parameters ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rlengths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lengths for recursive lists — rlengths","text":"integer value, vector, list: doSum NULL (default) returns integer vector length length(x) names names(x), whose values total number elements item x running base::unlist(). doSum==\"TRUE\", returns single integer length elements x. doSum==\"FALSE\", returns full structure x integer length element. parameter doSum intended internal use, recursive calls rlengths() . doSum NULL TRUE, recursive calls rlengths() set doSum=TRUE.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rlengths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"lengths for recursive lists — rlengths","text":"function takes list input, returns length list element running base::unlist().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rlengths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lengths for recursive lists — rlengths","text":"","code":"x <- list(    A=list(       A1=nameVector(1:3, letters[1:3]),       A2=list(          A1a=nameVector(4:7, letters[4:7]),          A1b=nameVector(11:14, letters[11:14]))),    B=list(B1=nameVector(1:9, letters[1:9]),       B2=nameVector(20:25, letters[20:25]))); # default lengths(x) shows length=2 for A and B lengths(x) #> A B  #> 2 2  # rlengths(x) shows the total length of A and B rlengths(x) #>  A  B  #> 11 15"},{"path":"https://jmw86069.github.io/jamba/reference/rmInfinite.html","id":null,"dir":"Reference","previous_headings":"","what":"remove Infinite values — rmInfinite","title":"remove Infinite values — rmInfinite","text":"remove Infinite values","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmInfinite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove Infinite values — rmInfinite","text":"","code":"rmInfinite(x, infiniteValue = NULL, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/rmInfinite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove Infinite values — rmInfinite","text":"x vector input infiniteValue NULL remove Infinite values, replacement value ... additional parameters ignored","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmInfinite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove Infinite values — rmInfinite","text":"numeric vector infinite values either removed, replaced supplied value.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmInfinite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"remove Infinite values — rmInfinite","text":"function removes positive negative infinite numerical values, optionally replacing given value NA.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rmInfinite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove Infinite values — rmInfinite","text":"","code":"rmInfinite(c(1, 5, 4, 10, Inf, 1, -Inf)) #> [1]  1  5  4 10  1  rmInfinite(c(1, 5, 4, 10, Inf, 1, -Inf), infiniteValue=1000) #> [1]     1     5     4    10  1000     1 -1000"},{"path":"https://jmw86069.github.io/jamba/reference/rmNA.html","id":null,"dir":"Reference","previous_headings":"","what":"remove NA values — rmNA","title":"remove NA values — rmNA","text":"remove NA values","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove NA values — rmNA","text":"","code":"rmNA(   x,   naValue = NULL,   rmNULL = FALSE,   nullValue = naValue,   rmInfinite = TRUE,   infiniteValue = NULL,   rmNAnames = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/rmNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove NA values — rmNA","text":"x vector input naValue NULL single replacement value NA entries. NULL, NA entries removed result. rmNULL logical whether replace NULL entries nullValue nullValue NULL single replacement value NULL entries. NULL, NULL entries removed result. rmInfinite logical whether replace Infinite values infiniteValue infiniteValue value use rmInfinite==TRUE replace entries Inf -Inf. rmNAnames logical whether remove entries NA name, regardless whether entry NA. verbose logical whether print verbose output ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove NA values — rmNA","text":"vector NA entries either removed, replaced naValue, NULL entries either removed replaced nullValue.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"remove NA values — rmNA","text":"function removes NA values, default shortening vector result, optionally replacing NA Infinite values fixed values.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rmNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove NA values — rmNA","text":"","code":"# by default it removes NA, shortening the vector rmNA(c(1, 5, 4, NA, 10, NA)) #> [1]  1  5  4 10  # convenient to replace NA with a fixed value rmNA(c(1, 5, 4, NA, 10, NA), naValue=0) #> [1]  1  5  4  0 10  0  m <- matrix(ncol=3, 1:9) m[1, 2] <- NA; rmNA(m, naValue=-1) #>      [,1] [,2] [,3] #> [1,]    1   -1    7 #> [2,]    2    5    8 #> [3,]    3    6    9  # by default NA and Inf is removed rmNA(c(1, 5, 4, NA, 10, NA, Inf, -Inf)) #> [1]  1  5  4 10  # NA and Inf can be replaced, note Inf retains the sign rmNA(c(1, 5, 4, NA, 10, NA, Inf, -Inf), naValue=0, infiniteValue=100) #> [1]    1    5    4    0   10    0  100 -100"},{"path":"https://jmw86069.github.io/jamba/reference/rmNAs.html","id":null,"dir":"Reference","previous_headings":"","what":"remove NA values from list elements — rmNAs","title":"remove NA values from list elements — rmNAs","text":"remove NA values list elements","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNAs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove NA values from list elements — rmNAs","text":"","code":"rmNAs(   x,   naValue = NULL,   rmNULL = FALSE,   nullValue = naValue,   rmInfinite = TRUE,   infiniteValue = NULL,   rmNAnames = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/rmNAs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove NA values from list elements — rmNAs","text":"x list vectors naValue NULL single replacement value NA entries. NULL, NA entries removed result. rmNULL logical whether replace NULL entries nullValue nullValue NULL single replacement value NULL entries. NULL, NULL entries removed result. rmInfinite logical whether replace Infinite values infiniteValue infiniteValue value use rmInfinite==TRUE replace entries Inf -Inf. rmNAnames logical whether remove entries NA name, regardless whether entry NA. verbose logical whether print verbose output ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNAs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove NA values from list elements — rmNAs","text":"list NA entries removed replaced naValue vector. Empty list elements optionally removed rmNULL=TRUE, replaced nullValue defined. rmInfinite=TRUE infinite values either removed, replaced infiniteValue defined.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNAs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"remove NA values from list elements — rmNAs","text":"function removes NA values vectors list, applying logic used rmNA() vector. somewhat optimized, checks list elements NA values applying rmNA(). However, calls rmNA() iteratively vector contains NA order preserve class (factor, character, numeric, etc.) vector. also optionally applies convenience functions rmNULL() rmInfinite() relevant.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rmNAs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove NA values from list elements — rmNAs","text":"","code":"testlist <- list(    A=c(1, 4, 5, NA, 11),    B=c(\"B\", NA, \"C\", \"Test\")) rmNAs(testlist) #> $A #> [1]  1  4  5 11 #>  #> $B #> [1] \"B\"    \"C\"    \"Test\" #>   testlist2 <- list(    A=c(1, 4, 5, NA, 11, Inf),    B=c(11, NA, 19, -Inf)) rmNAs(testlist2, naValue=-100, infiniteValue=1000) #> $A #> [1]    1    4    5 -100   11 1000 #>  #> $B #> [1]    11  -100    19 -1000 #>"},{"path":"https://jmw86069.github.io/jamba/reference/rmNULL.html","id":null,"dir":"Reference","previous_headings":"","what":"remove NULL entries from list — rmNULL","title":"remove NULL entries from list — rmNULL","text":"remove NULL entries list","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNULL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove NULL entries from list — rmNULL","text":"","code":"rmNULL(x, nullValue = NULL, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/rmNULL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove NULL entries from list — rmNULL","text":"x list object may contain NULL. nullValue character optional replacement value, default NULL, causes entry removed. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNULL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove NULL entries from list — rmNULL","text":"list NULL entries either removed, replaced nullValue. function typically called removed list elements NULL, resulting list contains non-NULL entries. function can also useful NULL values changed something else, perhaps character value \"NULL\" used label.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rmNULL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"remove NULL entries from list — rmNULL","text":"function simple helper function remove NULL list, optionally replacing another value","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rmNULL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove NULL entries from list — rmNULL","text":"","code":"x <- list(A=1:6, B=NULL, C=letters[11:16]); rmNULL(x) #> $A #> [1] 1 2 3 4 5 6 #>  #> $C #> [1] \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" #>  rmNULL(x, nullValue=NA) #> $A #> [1] 1 2 3 4 5 6 #>  #> $B #> [1] NA #>  #> $C #> [1] \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" #>"},{"path":"https://jmw86069.github.io/jamba/reference/rowGroupMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate row group means, or other statistics — rowGroupMeans","title":"Calculate row group means, or other statistics — rowGroupMeans","text":"Calculate row group means, statistics, : rowGroupMeans() calculates row summary stats; rowGroupRmOutliers() convenience function call rowGroupMeans(..., rmOutliers=TRUE, returnType=\"input\").","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rowGroupMeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate row group means, or other statistics — rowGroupMeans","text":"","code":"rowGroupMeans(   x,   groups,   na.rm = TRUE,   useMedian = TRUE,   rmOutliers = FALSE,   crossGroupMad = TRUE,   madFactor = 5,   returnType = c(\"output\", \"input\"),   rowStatsFunc = NULL,   groupOrder = c(\"same\", \"sort\"),   keepNULLlevels = FALSE,   includeAttributes = FALSE,   verbose = FALSE,   ... )  rowGroupRmOutliers(   x,   groups,   na.rm = TRUE,   rmOutliers = TRUE,   crossGroupMad = TRUE,   madFactor = 5,   returnType = c(\"input\"),   groupOrder = c(\"same\", \"sort\"),   keepNULLlevels = FALSE,   includeAttributes = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/rowGroupMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate row group means, or other statistics — rowGroupMeans","text":"x numeric data matrix groups character factor vector group labels, either character vector, factor. See parameter groupOrder ordering group labels output data matrix. na.rm logical, default TRUE, passed stats func ignore NA values. useMedian logical, default TRUE,  indicating whether default stat \"mean\" \"median\". rmOutliers logical, default FALSE, indicating whether apply outlier detection removal. crossGroupMad logical indicating whether calculate row MAD values using median across groups row. median calculated using non-NA non-zero row group MAD values. crossGroupMad=TRUE also calculates non-NA, non-zero median row MAD across rows, defines minimum difference median applied across values considered outlier. madFactor numeric value indicating multiple MAD value define outliers. example madFactor=5 take MAD value group multiplied 5, 5MAD, threshold outliers. points 5MAD distance median per group outliers. returnType character, default \"output\", return data type: \"output\" returns one summary stat value per group, per row; \"input\" useful rmOutliers=TRUE returns matrix dimensions input, except outlier points replaced NA. rowStatsFunc function, default NULL, takes numeric matrix input, returns numeric vector equal number rows input data matrix. supplied, useMedian ignored. Examples: base::rowMeans(), matrixStats::rowMedians(), matrixStats::rowMads. groupOrder character string indicating character group labels ordered final data matrix, returnType=\"output\". Note groups factor, factor levels kept order. Otherwise, \"\" keeps groups order appear input matrix; \"sort\" applies jamba::mixedSort() labels. keepNULLlevels logical, default FALSE,  whether keep factor levels even corresponding columns x. TRUE returnType=\"output\" output matrix contain one colname factor level, NA values used fill empty factor levels. mechanism can helpful ensure output matrices consistent colnames. includeAttributes logical, default FALSE, whether include attributes \"n\" number replicates per group, \"nLabel\" replicate label n=# form. verbose logical indicating whether print verbose output. ... additional parameters passed rowStatsFunc, rmOutliers=TRUE jamba::rowRmMadOutliers().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rowGroupMeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate row group means, or other statistics — rowGroupMeans","text":"numeric matrix based upon returnType: returnType=\"output\" output numeric matrix number columns number unique groups labels. groups factor keepNULLlevels=TRUE, number columns number factor levels, otherwise number factor levels used groups. returnType=\"input\" output numeric matrix dimensions input data. output intended use rmOutliers=TRUE replace outlier points NA values. Therefore, matrix can used see location outliers. function also returns attributes includeAttributes=TRUE, although default FALSE. attributes describe number samples per group overall: attr(, \"n\") attribute \"n\" used describe number replicates per group. attr(, \"nLabel\") attribute \"nLabel\" simple text label form \"n=3\". Note rmOutliers=TRUE number replicates per group vary depending upon outliers removed. case, remember reported \"n\" always total possible columns available prior outlier removal.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rowGroupMeans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate row group means, or other statistics — rowGroupMeans","text":"function default calculates group mean values per row numeric matrix. However, stat function can changed calculate row medians, row MADs, etc. added purpose function optional outlier filtering, via calculation MAD values applying MAD threshold cutoff. intention identify technical outliers otherwise adversely affect calculated group mean median values. inspect data outlier removal, use parameter returnType=\"input\" return input data matrix NA substituted outlier points. Outlier detection removal performed jamba::rowRmMadOutliers().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rowGroupMeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate row group means, or other statistics — rowGroupMeans","text":"","code":"x <- matrix(ncol=9, stats::rnorm(90)); colnames(x) <- LETTERS[1:9]; use_groups <- rep(letters[1:3], each=3) rowGroupMeans(x, groups=use_groups) #>                a            b           c #>  [1,]  0.3297912 -0.006198262 -0.66518864 #>  [2,] -1.1655448  0.634362125  0.45203019 #>  [3,] -0.8185157 -0.279333528  0.30027912 #>  [4,]  0.2865486  0.793585308  0.07485682 #>  [5,] -0.3200564 -0.241689768  0.20637270 #>  [6,] -0.4321298 -0.374800093  1.76365303 #>  [7,]  0.8001769 -0.772978228  0.03768285 #>  [8,] -0.1294107  0.084543768 -0.04691673 #>  [9,]  0.8867361 -1.334353628  0.15161137 #> [10,] -0.9343851  0.495870480  1.29230591  # rowGroupRmOutliers returns the input data after outlier removal rowGroupRmOutliers(x, groups=use_groups, returnType=\"input\") #>                A          B           C          D          E            F #>  [1,] -0.1453936  0.3297912  0.39370865 -0.5208693  1.2339762 -0.006198262 #>  [2,] -1.1655448 -3.2273228  0.40363146  1.6232025  0.6343621 -0.685706846 #>  [3,] -0.8185157 -0.7717918 -0.88643672 -1.0700682  0.4120223 -0.279333528 #>  [4,]  0.6849361  0.2865486 -1.31893760  1.6858872  0.7935853 -0.782730275 #>  [5,] -0.3200564         NA  0.02884391 -0.2416898 -0.1524106 -0.778997240 #>  [6,]         NA         NA -0.43212979 -0.4682005 -0.2288958 -0.374800093 #>  [7,] -0.5996083  0.8001769  1.68987252 -0.7729782 -0.9007918 -0.319393809 #>  [8,] -0.1294107 -0.1639310  1.22839278         NA -0.7350262  0.084543768 #>  [9,]  0.8867361  1.2429188  0.27602348 -1.3343536 -1.4276858 -0.768473603 #> [10,] -0.1513960 -0.9343851 -1.04897550  0.4958705  0.6192835           NA #>                 G           H          I #>  [1,] -0.90087086 -0.46355650 -0.6651886 #>  [2,]  0.66372867  0.30546323  0.4520302 #>  [3,]  0.30027912 -0.08398871  0.5268557 #>  [4,]  0.07485682  0.41036345 -0.2302622 #>  [5,]  0.20637270  0.18367824         NA #>  [6,]          NA  1.77874162  1.7636530 #>  [7,] -0.62795166  0.03768285  0.4856014 #>  [8,] -0.04691673  1.17622012 -0.2657389 #>  [9,]  0.16261812          NA  0.1516114 #> [10,]  1.29230591          NA  1.3766098  # rowGroupMeans(..., returnType=\"input\") also returns the input data rowGroupMeans(x, groups=use_groups, rmOutliers=TRUE, returnType=\"input\") #>                A          B           C          D          E            F #>  [1,] -0.1453936  0.3297912  0.39370865 -0.5208693  1.2339762 -0.006198262 #>  [2,] -1.1655448 -3.2273228  0.40363146  1.6232025  0.6343621 -0.685706846 #>  [3,] -0.8185157 -0.7717918 -0.88643672 -1.0700682  0.4120223 -0.279333528 #>  [4,]  0.6849361  0.2865486 -1.31893760  1.6858872  0.7935853 -0.782730275 #>  [5,] -0.3200564         NA  0.02884391 -0.2416898 -0.1524106 -0.778997240 #>  [6,]         NA         NA -0.43212979 -0.4682005 -0.2288958 -0.374800093 #>  [7,] -0.5996083  0.8001769  1.68987252 -0.7729782 -0.9007918 -0.319393809 #>  [8,] -0.1294107 -0.1639310  1.22839278         NA -0.7350262  0.084543768 #>  [9,]  0.8867361  1.2429188  0.27602348 -1.3343536 -1.4276858 -0.768473603 #> [10,] -0.1513960 -0.9343851 -1.04897550  0.4958705  0.6192835           NA #>                 G           H          I #>  [1,] -0.90087086 -0.46355650 -0.6651886 #>  [2,]  0.66372867  0.30546323  0.4520302 #>  [3,]  0.30027912 -0.08398871  0.5268557 #>  [4,]  0.07485682  0.41036345 -0.2302622 #>  [5,]  0.20637270  0.18367824         NA #>  [6,]          NA  1.77874162  1.7636530 #>  [7,] -0.62795166  0.03768285  0.4856014 #>  [8,] -0.04691673  1.17622012 -0.2657389 #>  [9,]  0.16261812          NA  0.1516114 #> [10,]  1.29230591          NA  1.3766098  # rowGroupMeans with outlier removal rowGroupMeans(x, groups=use_groups, rmOutliers=TRUE) #>                a            b           c #>  [1,]  0.3297912 -0.006198262 -0.66518864 #>  [2,] -1.1655448  0.634362125  0.45203019 #>  [3,] -0.8185157 -0.279333528  0.30027912 #>  [4,]  0.2865486  0.793585308  0.07485682 #>  [5,] -0.1456063 -0.241689768  0.19502547 #>  [6,] -0.4321298 -0.374800093  1.77119732 #>  [7,]  0.8001769 -0.772978228  0.03768285 #>  [8,] -0.1294107 -0.325241194 -0.04691673 #>  [9,]  0.8867361 -1.334353628  0.15711474 #> [10,] -0.9343851  0.557577007  1.33445786"},{"path":"https://jmw86069.github.io/jamba/reference/rowRmMadOutliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove outlier points per row by MAD factor threshold — rowRmMadOutliers","title":"Remove outlier points per row by MAD factor threshold — rowRmMadOutliers","text":"Remove outlier points per row MAD factor threshold","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rowRmMadOutliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove outlier points per row by MAD factor threshold — rowRmMadOutliers","text":"","code":"rowRmMadOutliers(   x,   madFactor = 5,   na.rm = TRUE,   minDiff = 0,   minReps = 3,   includeAttributes = FALSE,   rowMadValues = NULL,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/rowRmMadOutliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove outlier points per row by MAD factor threshold — rowRmMadOutliers","text":"x numeric matrix madFactor numeric value multiply row MAD define threshold outlier detection. na.rm logical indicating whether ignore NA values calculating MAD value. probably always TRUE, however setting FALSE prevent calculations rows contain NA values, useful. minDiff numeric value indicating minimum difference median qualify outlier. value protects removing outliers already extremely similar. Consider example: Three numeric values: c(10.0001, 10.0002, 10.001). third value differs median 0.0008. third value 10.001 5x MAD factor away median. minDiff = 0.01 require minimum difference median least 0.01 eligible outlier point. minReps numeric minimum number non-NA values per row outliers filtered row. argument typically relevant rows n=2 non-NA values, rowMadValues supplied may define threshold less half difference two points given row. Otherwise, n=2 defines point exactly 1x MAD median, therefore never considered outlier. includeAttributes logical indicating whether return attributes describe threshold type threshold used per row, addition madFactor minDiff values defined. rowMadValues numeric optional set row MAD values use, mostly helpful combining MAD values across multiple samples groups row data, combined MAD values may reliable individual group MAD values. verbose logical indicating whether print verbose output. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rowRmMadOutliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove outlier points per row by MAD factor threshold — rowRmMadOutliers","text":"numeric matrix dimensions input x matrix. Outliers replaced NA. includeAttributes=TRUE attributes included: outlierDF data.frame colnames rowMedians: numeric median row rowMadValues: numeric MAD row rowThresholds: numeric threshold applying madFactor minDiff rowReps: integer number non-NA values input data rowTypes: factor indicating type threshold: \"madFactor\" means row applied normal MAD * madFactor threshold; \"minDiff\" means row applied minDiff threshold larger threshold. minDiff numeric value supplied madFactor numeric MAD factor threshold supplied outliersRemoved integer total number new NA values produced outlier removal process.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rowRmMadOutliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove outlier points per row by MAD factor threshold — rowRmMadOutliers","text":"function applies outlier detection removal per row input numeric matrix. first calculates MAD per row. MAD threshold cutoff multiple MAD value, defined madFactor, multiplying per-row MAD madFactor. absolute difference median calculated point. Outlier points defined: Points MAD MAD threshold, Points difference median minDiff minDiff parameter affects cases 3 replicates, replicates well within known threshold indicating low variance, two replicates might nearly identical. Consider: Three numeric values: c(10.0001, 10.0002, 10.001). third value differs median 0.0008. third value 10.001 5x MAD factor away median. minDiff = 0.01 require minimum difference median least 0.01 eligible outlier point. One option define minDiff data use: minDiff <- stats::median(rowMads(x)) case, threshold defined median difference median across rows. type threshold reasonable variance across rows expected fairly similar. function substantially faster matrixStats package installed, use apply(x, 1, mad) format last option.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/rowRmMadOutliers.html","id":"assumptions","dir":"Reference","previous_headings":"","what":"Assumptions","title":"Remove outlier points per row by MAD factor threshold — rowRmMadOutliers","text":"function assumes input data appropriate use MAD summary statistic. Specifically, numeric values per row expected roughly normally distributed. Outlier points assumed present less half overall non-NA data. Outlier points assumed technical outliers, therefore direct result experimental measurements studied. Technical outliers often caused instrument measurement, methodological failure, upstream protocol failure. default threshold 5x MAD factor fairly lenient criteria, data may even assumed conform downstream statistical techniques. measurements considered robust, required robust, threshold 2x MAD applied. criteria usually reasonable expectation housekeeper gene expression across replicates within sample group.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/rowRmMadOutliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove outlier points per row by MAD factor threshold — rowRmMadOutliers","text":"","code":"set.seed(123); x <- matrix(ncol=5, stats::rnorm(25))*5 + 10; ## Define some outlier points x[1:2,3] <- x[1:2,3]*5 + 50; x[2:3,2] <- x[2:3,2]*5 - 100; rownames(x) <- head(letters, nrow(x));  rowRmMadOutliers(x, madFactor=5); #>        [,1]      [,2]      [,3]       [,4]     [,5] #> a  7.197622 18.575325        NA 18.9345657 4.660881 #> b  8.849113        NA        NA 12.4892524 8.910125 #> c 17.793542        NA 12.003857  0.1669142 4.869978 #> d 10.352542  6.565736 10.553414 13.5067795 6.355544 #> e 10.646439  7.771690  7.220794  7.6360430 6.874804  x2 <- rowRmMadOutliers(x, madFactor=2,    includeAttributes=TRUE); x2 #>        [,1]      [,2]      [,3]       [,4]     [,5] #> a  7.197622 18.575325        NA 18.9345657 4.660881 #> b  8.849113        NA        NA 12.4892524 8.910125 #> c 17.793542        NA 12.003857  0.1669142 4.869978 #> d 10.352542  6.565736 10.553414 13.5067795 6.355544 #> e        NA  7.771690  7.220794  7.6360430 6.874804 #> attr(,\"outlierDF\") #>   rowMedians rowMadValues rowThresholds rowReps  rowTypes #> a  18.575325   16.8685827     33.737165       5 madFactor #> b   8.910125    5.3064136     10.612827       5 madFactor #> c   4.869978   10.5766897     21.153379       5 madFactor #> d  10.352542    4.6764726      9.352945       5 madFactor #> e   7.636043    0.6156476      1.231295       5 madFactor #> attr(,\"minDiff\") #> [1] 0 #> attr(,\"madFactor\") #> [1] 2 #> attr(,\"outliersRemoved\") #> [1] 5  x3 <- rowRmMadOutliers(x2,    madFactor=2,    rowMadValues=attr(x2, \"outlierDF\")$rowMadValues,    includeAttributes=TRUE); x3 #>        [,1]      [,2]      [,3]       [,4]     [,5] #> a  7.197622 18.575325        NA 18.9345657 4.660881 #> b  8.849113        NA        NA 12.4892524 8.910125 #> c 17.793542        NA 12.003857  0.1669142 4.869978 #> d 10.352542  6.565736 10.553414 13.5067795 6.355544 #> e        NA  7.771690  7.220794  7.6360430 6.874804 #> attr(,\"outlierDF\") #>   rowMedians rowMadValues rowThresholds rowReps  rowTypes #> a  12.886473   16.8685827     33.737165       4 madFactor #> b   8.910125    5.3064136     10.612827       3 madFactor #> c   8.436918   10.5766897     21.153379       4 madFactor #> d  10.352542    4.6764726      9.352945       5 madFactor #> e   7.428419    0.6156476      1.231295       4 madFactor #> attr(,\"minDiff\") #> [1] 0 #> attr(,\"madFactor\") #> [1] 2 #> attr(,\"outliersRemoved\") #> [1] 0"},{"path":"https://jmw86069.github.io/jamba/reference/sclass.html","id":null,"dir":"Reference","previous_headings":"","what":"return the classes of a list of objects — sclass","title":"return the classes of a list of objects — sclass","text":"return classes list objects","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return the classes of a list of objects — sclass","text":"","code":"sclass(x, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/sclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return the classes of a list of objects — sclass","text":"x S3 object inheriting class list, S4 object. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sclass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return the classes of a list of objects — sclass","text":"character vector class list element, column name, depending upon input class(x).","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sclass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"return the classes of a list of objects — sclass","text":"function takes list returns classes object list. event object class multiple values, returned object list, otherwise vector. x S4 object, methods::slotNames(x) used, class returned S4 slot. x data.frame, data.table, tibble, similar DataFrame table-like object, class column returned. special case x S4 object one slotName \".Data\", values x@.Data coerced list. One example case limma::MArrayLM-class. x matrix, class column returned consistency, even though class column identical. information list-like object, including lengths/dimensions elements, see sdim() ssdim().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/sclass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return the classes of a list of objects — sclass","text":"","code":"sclass(list(LETTERS=LETTERS, letters=letters)); #>     LETTERS     letters  #> \"character\" \"character\"   sclass(data.frame(B=letters[1:10], C=2:11)) #>           B           C  #> \"character\"   \"integer\""},{"path":"https://jmw86069.github.io/jamba/reference/sdim.html","id":null,"dir":"Reference","previous_headings":"","what":"print dimensions of list object elements — sdim","title":"print dimensions of list object elements — sdim","text":"sdim()  prints name dimensions list object elements, list data.frame ssdim() prints name dimensions nested elements list objects, example list list objects contain objects. sdima() prints name dimensions object attributes(x). useful summarizing attributes() object. ssdima() prints name dimensions nested elements list object attributes(), example list list objects contain objects. useful comparing attributes across list elements. function prints dimensions list objects, usually list data.frame objects, extended handle complicated lists, including even S4 object methods::slotNames(). time, object types made compatible function. Currently, igraph objects print number nodes edges, requires igraph package installed.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sdim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print dimensions of list object elements — sdim","text":"","code":"sdim(   x,   includeClass = TRUE,   doFormat = FALSE,   big.mark = \",\",   verbose = FALSE,   ... )  sdima(   x,   includeClass = TRUE,   doFormat = FALSE,   big.mark = \",\",   verbose = FALSE,   ... )  ssdima(   x,   includeClass = TRUE,   doFormat = FALSE,   big.mark = \",\",   verbose = FALSE,   ... )  ssdim(   x,   includeClass = TRUE,   doFormat = FALSE,   big.mark = \",\",   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/sdim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print dimensions of list object elements — sdim","text":"x one several recognized object classes: S3 object inheriting class \"list\", including nested list lists simple list S3 atomic object, returns length single multi-dimensional object data.frame, matrix, array, tibble, similar, returns dimensions. S4 object case used methods::slotNames(x) traverse object structure \"environment\" object, case ls(envir=x) used traverse object structure. object S4 inherits \"List\" S4Vectors package, attempt use proper subset functions S4Vectors via names(x), process works properly S4Vectors package previously loaded, otherwise reverts using methods::slotNames(x). includeClass logical indicating whether print class element input x object. Note S4 objects, element object returned methods::slotNames(x). doFormat logical indicating whether format dimensions using format(...,big.mark=\",\"), mainly useful extremely large dimensions. parameter probably become broadly useful respectful different locales. big.mark character value used doFormat=TRUE, used call format(...,big.mark). verbose logical whether print verbose output ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sdim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print dimensions of list object elements — sdim","text":"data.frame row indicates dimensions element input list. includeClass TRUE include column class indicates class list element. input list contains arrays two dimensions, first two dimensions named \"rows\" \"columns\" additional dimensions named \"dim3\" . list element fewer many dimensions values populated relevant dimensions, example character vector populate length. data.frame describes dimensions objects attributes(x). list data.frame describes dimensions objects attributes(x). list data.frame, row indicates dimensions element input list. includeClass TRUE include column class indicates class list element. input list contains arrays two dimensions, first two dimensions named \"rows\" \"columns\" additional dimensions named \"dim3\" . list element fewer many dimensions values populated relevant dimensions, example character vector populate length.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/sdim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print dimensions of list object elements — sdim","text":"","code":"L <- list(LETTERS=LETTERS,    letters=letters,    lettersDF=data.frame(LETTERS, letters)); sdim(L) #>           rows cols      class #> LETTERS     26       character #> letters     26       character #> lettersDF   26    2 data.frame  LL <- list(L=L, A=list(1:10)) sdim(LL) #>   rows class #> L    3  list #> A    1  list ssdim(LL) #> $L #>           rows cols      class #> LETTERS     26       character #> letters     26       character #> lettersDF   26    2 data.frame #>  #> $A #>   rows   class #> 1   10 integer #>   m <- matrix(1:9,    ncol=3,    dimnames=list(       Rows=letters[1:3],       Columns=LETTERS[1:3])); sdima(m); #>          rows   class #> dim         2 integer #> dimnames    2    list ssdima(m); #> $dim #>   rows   class #> 1    2 integer #>  #> $dimnames #>         rows     class #> Rows       3 character #> Columns    3 character #>"},{"path":"https://jmw86069.github.io/jamba/reference/setCLranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Chroma and Luminance ranges for the given lightMode — setCLranges","title":"Get Chroma and Luminance ranges for the given lightMode — setCLranges","text":"Return Crange, Lrange, Cgrey, adjustRgb values given lightMode, intended provide ranges suitable contrasting text displayed light dark background.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setCLranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Chroma and Luminance ranges for the given lightMode — setCLranges","text":"","code":"setCLranges(   lightMode = NULL,   Crange = getOption(\"jam.Crange\"),   Lrange = getOption(\"jam.Lrange\"),   Cgrey = getOption(\"jam.Cgrey\", 5),   adjustRgb = getOption(\"jam.adjustRgb\", 0),   setOptions = c(\"FALSE\", \"ifnull\", \"TRUE\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/setCLranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Chroma and Luminance ranges for the given lightMode — setCLranges","text":"lightMode boolean indicating whether background color light (TRUE bright), dark (FALSE dark.) default calls checkLightMode() queries getOption(\"lightMode\"). Crange numeric range chroma values, ranging 0 100. default, getOptions(\"Crange\") used, otherwise defaults assigned based upon lightMode. Lrange numeric range luminance values, ranging 0 100. default, getOptions(\"Crange\") used, otherwise defaults assigned based upon lightMode. Cgrey numeric chroma (C) value, defines grey colors chroma. colors grey cutoff C values unchanged. mechanism prevents converting black red, example. disable effect, set Cgrey=-1. adjustRgb numeric color adjustment factor, used conversion RGB colors ANSI-compatible colors used crayon pacakge. ANSI color range include full RGB palette, conversion somewhat lossy. default, getOptions(\"jam.adjustRgb\") used store globally re-usable value. setOptions character logical whether update options() \"jam.Crange\" \"jam.Lrange\", following behavior: \"ifnull\" update options() previously NULL FALSE \"FALSE\" update options() TRUE \"TRUE\" update options() values determined function. verbose logical indicating whether print verbose output. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setCLranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Chroma and Luminance ranges for the given lightMode — setCLranges","text":"list elements: Crange Numeric vector length 2, defining HCL chroma (C) range. Lrange Numeric vector length 2, defining HCL luminance (L) range. adjustRgb Numeric vector length 1, defining adjustment apply RGB--ANSI color conversion. Cgrey Numeric vector length 1, defining HCL chroma (C) value colors considered greyscale, converted ANSI greyscale colors. HCL chroma ranges 0 100. Set value Cgrey=-1 Cgrey=FALSE disable logic, causing colors matched using available ANSI color values.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setCLranges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Chroma and Luminance ranges for the given lightMode — setCLranges","text":"function intended mainly internal use jamba printDebug(), make_styles(), also mainly intended console text printed text output. utility function store logic determining sensible default ranges. Companion functions: applyCLranges() used apply ranges vector R colors. checkLightMode() used detect whether console output expected light dark background.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/setCLranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Chroma and Luminance ranges for the given lightMode — setCLranges","text":"","code":"setCLranges(lightMode=FALSE) #> $Crange #> [1]  30 190 #>  #> $Lrange #> [1]  45 100 #>  #> $adjustRgb #> [1] 0 #>  #> $Cgrey #> [1] 5 #>"},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":null,"dir":"Reference","previous_headings":"","what":"set R prompt with project name and R version — setPrompt","title":"set R prompt with project name and R version — setPrompt","text":"set R prompt project name R version","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set R prompt with project name and R version — setPrompt","text":"","code":"setPrompt(   projectName = \"unnamed\",   useColor = TRUE,   projectColor = \"yellow\",   bracketColor = \"white\",   Rcolors = c(\"white\", \"white\", \"white\"),   PIDcolor = NA,   promptColor = \"white\",   usePid = TRUE,   resetPrompt = FALSE,   addEscape = NULL,   updateOptions = TRUE,   debug = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set R prompt with project name and R version — setPrompt","text":"projectName character string, default \"unnamed\", used label represent project work. useColor logical whether define color prompt crayon package installed. projectColor, bracketColor, Rcolors, PIDcolor, promptColor character colors used useColor==TRUE crayon package installed: projectColor colors project name; bracketColor colors curly brackets around project; Rcolors can vector 3 colors, colorizing \"R\", \"-\" divider, R version; PIDcolor colors PID usePid=TRUE; promptColor colors \">\" end prompt. usePid logical whether include process ID prompt. Including PID helpful rare occasion process hung needs stopped directly. resetPrompt logical whether revert changes prompt back default R prompt, , color projectName. addEscape logical NULL indicating whether wrap color encoding ANSI inside additional escape sequences. change helpful linux-based (readline-based) R consoles, telling console count ANSI color control characters visible characters determining word wrapping console. Note RStudio work well setting. find word-wrap incorrect R console, try addEscape=TRUE. Apparently versions RStudio already adjust (prevent) colorizing prompt editing, presumably sidestep problem calculating correct character length. default addEscape NULL, checks whether environmental variable RSTUDIO equals \"1\" (running inside RStudio) sets addEscape=FALSE; otherwise defines addEscape=TRUE. cases commandline prompts, addEscape=TRUE helpful problematic. updateOptions logical whether update user options() options(prompt=\"...\"), default TRUE. debug logical indicating whether print ANSI control character output full prompt, visual review. verbose logical whether print verbose output. ... additional parameters passed make_styles() relevant argument useColor=TRUE.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"set R prompt with project name and R version — setPrompt","text":"list named \"prompt\", suitable use options() recommended prompt. updateOptions=FALSE use: options(setPrompt(\"projectName\"))","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"set R prompt with project name and R version — setPrompt","text":"function sets simple, colorized R prompt useful information: projectName R version, major minor included Process ID (PID) prompt defined options(\"prompt\").","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"where-am-i-","dir":"Reference","previous_headings":"","what":"Where Am I?","title":"set R prompt with project name and R version — setPrompt","text":"useful question: \"version R?\" rare cases, multiple R versions can active (!), see rig package exciting capability.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"what-am-i-doing-","dir":"Reference","previous_headings":"","what":"What Am I Doing?","title":"set R prompt with project name and R version — setPrompt","text":"core question addressed : \"working ?\" project name especially useful working multiple active R sessions.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"how-do-i-stop-this-thing-","dir":"Reference","previous_headings":"","what":"How Do I Stop This Thing?","title":"set R prompt with project name and R version — setPrompt","text":"may also useful question \"stop thing\", returning Process ID used kill long-running process without fear killing wrong long-running process.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"can-it-have-color-","dir":"Reference","previous_headings":"","what":"Can It Have Color?","title":"set R prompt with project name and R version — setPrompt","text":"course, meeting requirements, least make pretty.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"word-wrap-gone-awry","dir":"Reference","previous_headings":"","what":"Word-Wrap Gone Awry","title":"set R prompt with project name and R version — setPrompt","text":"color-encoded prompt may sometimes interfere word-wrapping R console. long line may wrap prematurely reaching right edge screen. two frequent causes issue: options(\"width\") sometimes defined narrow screen. resizing console, option updated, sometimes update fails. fix, either resize window briefly , define options(\"width\") manually. (debug reason option updated.) terminal locale sometimes mismatched terminal, usually caused layer terminal emulation compatible ANSI color codes, ANSI escape codes. examples: 'PuTTY' 'Windows', GNU 'screen', 'tmux'. Check Sys.env(\"LC_ALL\"). common results \"C\" generic C-type output, Unicode/UTF-8 locale \"en_US.UTF-8\" ('enUS' English-USA context). general, Unicode/UTF-8 recommended, benefit readily displays Unicode characters. However, sometimes terminal environment (PuTTY iTerm) expecting one locale, receiving another. Either switching terminal expected locale, R console locale, may resolve mismatch. R uses 'readline' unix-like systems default, issues related using color prompt handled level. 'readline' library allows escaping ANSI color characters contribute estimated line width, codes used setPrompt(). final workaround useColor=FALSE, sad outcome.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/setPrompt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"set R prompt with project name and R version — setPrompt","text":"","code":"setPrompt(\"jamba\")  setPrompt(\"jamba\", projectColor=\"purple\");  setPrompt(\"jamba\", usePid=FALSE);  setPrompt(resetPrompt=TRUE);"},{"path":"https://jmw86069.github.io/jamba/reference/setTextContrastColor.html","id":null,"dir":"Reference","previous_headings":"","what":"Define visible text color — setTextContrastColor","title":"Define visible text color — setTextContrastColor","text":"Given vector colors, define contrasting color text, typically using either white black. useGrey argument defines offset pure white pure black, use contrasting grey shade.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setTextContrastColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define visible text color — setTextContrastColor","text":"","code":"setTextContrastColor(   color,   hclCutoff = 60,   rgbCutoff = 127,   colorModel = c(\"hcl\", \"rgb\"),   useGrey = 0,   keepAlpha = FALSE,   alphaLens = 0,   bg = NULL,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/setTextContrastColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define visible text color — setTextContrastColor","text":"color character vector one R-compatible colors. hclCutoff numeric threshold color judged bright, therefore requiring dark text color. comparison uses L value col2hcl() function, scales colors 1 100. rgbCutoff numeric threshold color judged bright, therefore requiring dark text color. mean r,g,b value used. colorModel Either 'hcl' 'rgb' indicate colors judged overall brightness. 'hcl' method uses L value, reliably represents overall visible lightness. useGrey numeric threshold used define dark bright text colors, using R greyscale gradient 0 100: useGrey=10 implies \"grey10\" \"grey90\" contrasting text colors; useGrey=15 useful labels may also overlap white black space, since text never fully white black. keepAlpha logical indicates whether input color alpha transparency maintained text color. default, text alpha maintained, instead set alpha=1, fully opaque. alphaLens numeric value used adjust effect alpha transparency, positive values emphasize background color, negative values emphasize foreground (transparent) color. bg vector R colors, used background determining brightness semi-transparent color. corresponding brightness value bg applied via weighted mean input color brightness, result compared relevant cutoff. default graphics::par(\"bg\") used determine default plot background color, open graphics device, otherwise calling graphics::par(\"bg\") open graphics device, desireable. graphics device open, bg=NULL, default bg=\"white\". ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setTextContrastColor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define visible text color — setTextContrastColor","text":"character vector R colors.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/setTextContrastColor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define visible text color — setTextContrastColor","text":"color expected represent background color, output intended color enough contrast read text legibly. brightness color detected dependent upon colorModel: \"hcl\" luminance L compared hclCutoff; \"rgb\" brightness sum RGB channels compared rgbCutoff. cases \"hcl\" L accurate. color contains transparency, optional argument bg represents figure background color, color used draw color-filled rectangle. case, bg color combined determine resulting actual color. scenario mostly useful plotting text labels dark background, black background colored text boxes.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/setTextContrastColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define visible text color — setTextContrastColor","text":"","code":"color <- c(\"red\",\"yellow\",\"lightblue\",\"darkorchid1\",\"blue4\"); setTextContrastColor(color); #> [1] \"#FFFFFFFF\" \"#000000FF\" \"#000000FF\" \"#FFFFFFFF\" \"#FFFFFFFF\"  # showColors() uses setTextContrastColor() for labels showColors(color)  # printDebugI() uses setTextContrastColor() for foreground text printDebugI(color) #> ##  (14:38:31) 22Mar2025:      red,yellow,lightblue,darkorchid1,blue4   # demonstrate the effect of alpha transparency colorL <- lapply(nameVector(c(1, 0.9, 0.8, 0.6, 0.3)), function(i){    nameVector(alpha2col(color, alpha=i), color); }) jamba::showColors(colorL,    groupCellnotes=FALSE,    srtCellnote=seq(from=15, to=-15, length.out=5)); graphics::title(ylab=\"alpha\", line=1.5);   # change background to dark blue withr::with_par(list(\"bg\"=\"navy\", \"col\"=\"white\", \"col.axis\"=\"white\"), { jamba::showColors(colorL,    groupCellnotes=FALSE,    srtCellnote=seq(from=15, to=-15, length.out=5)) graphics::title(ylab=\"alpha\", line=1.5); })   # Example using transparency and drawLabels() bg <- \"blue4\"; col <- fixYellow(\"palegoldenrod\"); nullPlot(fill=bg, plotAreaTitle=\"\", doMargins=FALSE); for (alpha in c(0.1, 0.3, 0.5, 0.7, 0.9)) {    labelCol <- setTextContrastColor(       alpha2col(\"yellow\", alpha),       bg=bg);    drawLabels(x=1 + alpha,       y=2 - alpha,       labelCex=1.5,       txt=\"Plot Title\",       boxColor=alpha2col(col, alpha),       boxBorderColor=labelCol,       labelCol=labelCol); }"},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_colwidths.html","id":null,"dir":"Reference","previous_headings":"","what":"Set column widths in Xlsx files — set_xlsx_colwidths","title":"Set column widths in Xlsx files — set_xlsx_colwidths","text":"Set column widths Xlsx files","code":""},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_colwidths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set column widths in Xlsx files — set_xlsx_colwidths","text":"","code":"set_xlsx_colwidths(   xlsxFile,   sheet = 1,   cols = seq_along(widths),   widths = 11,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_colwidths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set column widths in Xlsx files — set_xlsx_colwidths","text":"xlsxFile character filename file \".xlsx\" extension, Workbook object defined openxlsx package. xlsxFile Workbook output saved file. sheet integer sheet number character sheet name, passed openxlsx::setColWidths() indicating worksheet affect. cols integer vector indicating column numbers affect. widths numeric vector indicating width column defined cols. ... additional arguments passed openxlsx::setColWidths().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_colwidths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set column widths in Xlsx files — set_xlsx_colwidths","text":"Workbook object defined openxlsx package returned invisibly invisible(). Workbook can used argument wb provide speed boost saving multiple sheets file.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_colwidths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set column widths in Xlsx files — set_xlsx_colwidths","text":"function light wrapper perform steps useful openxlsx R package: openxlsx::loadWorkbook() openxlsx::setColWidths() openxlsx::saveWorkbook()","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_colwidths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set column widths in Xlsx files — set_xlsx_colwidths","text":"","code":"# write to tempfile for examples if (check_pkg_installed(\"openxlsx\")) {    out_xlsx <- tempfile(pattern=\"writeOpenxlsx_\", fileext=\".xlsx\")    df <- data.frame(a=LETTERS[1:5], b=1:5);    writeOpenxlsx(x=df,       file=out_xlsx,       sheetName=\"jamba_test\");     ## By default, cols starts at column 1 and continues to length(widths)    set_xlsx_colwidths(out_xlsx,       sheet=\"jamba_test\",       widths=rep(20, ncol(df))    ) }"},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_rowheights.html","id":null,"dir":"Reference","previous_headings":"","what":"Set row heights in Xlsx files — set_xlsx_rowheights","title":"Set row heights in Xlsx files — set_xlsx_rowheights","text":"function light wrapper perform steps useful openxlsx R package:","code":""},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_rowheights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set row heights in Xlsx files — set_xlsx_rowheights","text":"","code":"set_xlsx_rowheights(   xlsxFile,   sheet = 1,   rows = seq_along(heights) + 1,   heights = 17,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_rowheights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set row heights in Xlsx files — set_xlsx_rowheights","text":"xlsxFile character filename file \".xlsx\" extension, Workbook object defined openxlsx package. xlsxFile Workbook output saved file. sheet integer sheet number character sheet name, passed openxlsx::setRowHeights() indicating worksheet affect. rows integer vector indicating row numbers affect. heights numeric vector indicating height column defined rows. ... additional arguments passed openxlsx::setRowHeights().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_rowheights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set row heights in Xlsx files — set_xlsx_rowheights","text":"Workbook object defined openxlsx package returned invisibly invisible(). Workbook can used argument wb provide speed boost saving multiple sheets file.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_rowheights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set row heights in Xlsx files — set_xlsx_rowheights","text":"openxlsx::loadWorkbook() openxlsx::setRowHeights() openxlsx::saveWorkbook() Note argument heights defined, argument rows point row 2 lower, thus skipping first (header) row. Define rows specifically order affect header row well.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/set_xlsx_rowheights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set row heights in Xlsx files — set_xlsx_rowheights","text":"","code":"# write to tempfile for examples if (check_pkg_installed(\"openxlsx\")) {    out_xlsx <- tempfile(pattern=\"writeOpenxlsx_\", fileext=\".xlsx\")    df <- data.frame(a=LETTERS[1:5], b=1:5);    writeOpenxlsx(x=df,       file=out_xlsx,       sheetName=\"jamba_test\");     ## by default, rows will start at row 2, skipping the header    set_xlsx_rowheights(out_xlsx,       sheet=\"jamba_test\",       heights=rep(17, nrow(df))    )     ## to include the header row    set_xlsx_rowheights(out_xlsx,       sheet=\"jamba_test\",       rows=seq_len(nrow(df)+1),       heights=rep(17, nrow(df)+1)    ) }"},{"path":"https://jmw86069.github.io/jamba/reference/shadowText.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw text with shadow border — shadowText","title":"Draw text with shadow border — shadowText","text":"Draw text shadow border","code":""},{"path":"https://jmw86069.github.io/jamba/reference/shadowText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw text with shadow border — shadowText","text":"","code":"shadowText(   x,   y = NULL,   labels = NULL,   col = \"white\",   bg = setTextContrastColor(col),   r = getOption(\"jam.shadow.r\", 0.15),   offset = c(0.15, -0.15),   n = getOption(\"jam.shadow.n\", 8),   outline = getOption(\"jam.outline\", TRUE),   alphaOutline = getOption(\"jam.alphaOutline\", 0.4),   shadow = getOption(\"jam.shadow\", FALSE),   shadowColor = getOption(\"jam.shadowColor\", \"black\"),   alphaShadow = getOption(\"jam.alphaShadow\", 0.2),   shadowOrder = c(\"each\", \"all\"),   cex = graphics::par(\"cex\"),   font = graphics::par(\"font\"),   doTest = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/shadowText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw text with shadow border — shadowText","text":"x, y numeric coordinates, either vectors x y, x two-color matrix recognized grDevices::xy.coords(). labels vector labels display corresponding xy coordinates. col, bg, shadowColor label color, background (outline) color, shadow color (shadow=TRUE), element labels. Colors applied order, recycled length(labels) needed. default bg choose contrasting color, based upon setTextContrastColor(). Also default, shadow \"black\" true name, since expected darken area around . r outline radius, expressed fraction width character \"\" returned graphics::strwidth(). offset outline offset position xy coordinates, expressed fraction width character \"\" returned graphics::strwidth(), graphics::strheight(), respectively. offset applied shadow=TRUE enable shadow effect. n numeric steps around label used create outline. higher number may useful large font sizes, otherwise 8 reasonably good balance detail number labels added. outline logical whether enable outline drawing. alphaOutline, alphaShadow numeric alpha transparency use outline shadow colors, respectively. shadow logical whether enable shadow drawing. shadowOrder character value indicating shadows drawn relative drawing labels: \"\" draws shadow label, shadows overlap previous labels; \"\" draws shadows first labels, labels always appear shadows. See examples. cex numeric scalar applied font size, default graphics::par(\"cex\"). font character applied font family, default graphics::par(\"font\"). doTest logical whether create visual example output. Note calls usrBox color plot area, background can overridden something like fill=\"navy\". ... parameters passed text. Note certain parameters vectorized function, srt requires fixed value. rotate label independently, multiple calls text shadowText must made. parameters like adj accept two values, two values affect label positioning.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/shadowText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw text with shadow border — shadowText","text":"invisible list components used call graphics::text(), including: x, y, allColors, allLabels, cex, font.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/shadowText.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw text with shadow border — shadowText","text":"Draws text syntax graphics::text() except function adds contrasting color border around text, helps visibility background color either known, expected fixed contrasting color. function draws label n times chosed background color, label atop background text. typically noticeable effect rendering time, may impact downstream uses vector file formats like 'SVG' 'PDF', text stored proper text font objects. Take care editing text underlying shadow text also edited sync. parameter doTest=TRUE display visual example. background color can modified fill=\"navy\" example.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/shadowText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw text with shadow border — shadowText","text":"","code":"shadowText(doTest=TRUE);  shadowText(doTest=TRUE, fill=\"navy\");  shadowText(doTest=TRUE, fill=\"red4\");   # example showing labels with overlapping shadows withr::with_par(list(\"mfrow\"=c(1, 2)), { nullPlot(doBoxes=FALSE); graphics::title(main=\"shadowOrder='each'\"); shadowText(x=c(1.5, 1.65), y=c(1.5, 1.55),    labels=c(\"one\", \"two\"), cex=c(2, 4), shadowOrder=\"each\") nullPlot(doBoxes=FALSE); graphics::title(main=\"shadowOrder='all'\"); shadowText(x=c(1.5, 1.65), y=c(1.5, 1.55),    labels=c(\"one\", \"two\"), cex=c(2, 4), shadowOrder=\"all\") })"},{"path":"https://jmw86069.github.io/jamba/reference/shadowText_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set options for shadowText — shadowText_options","title":"Get and set options for shadowText — shadowText_options","text":"Get set options shadowText","code":""},{"path":"https://jmw86069.github.io/jamba/reference/shadowText_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set options for shadowText — shadowText_options","text":"","code":"shadowText_options(   r = getOption(\"jam.shadow.r\", 0.15),   n = getOption(\"jam.shadow.n\", 8),   outline = getOption(\"jam.outline\", TRUE),   alphaOutline = getOption(\"jam.alphaOutline\", 0.4),   shadow = getOption(\"jam.shadow\", FALSE),   shadowColor = getOption(\"jam.shadowColor\", \"black\"),   alphaShadow = getOption(\"jam.alphaShadow\", 0.2),   r_ex = 1,   alpha_ex = 1,   preset = c(\"none\", \"default\", \"bold\", \"bold white\", \"bold black\", \"both\", \"shadow\",     \"bold shadow\", \"bold white shadow\", \"bold black shadow\", \"bold both\"),   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/shadowText_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set options for shadowText — shadowText_options","text":"r numeric radius used outline shadow n numeric number shadow steps render around text label outline logical indicating whether render shadowText outline (default), outline=FALSE renders drop shadow offset using offset default slightly right text labels. alphaOutline numeric value alpha transparency used label outlines outline=TRUE, values expected 0 (fully transparent) 1 (transparent). shadow logical indicating whether render shadowText shadow, (default). shadowColor character R color defines color used outline shadow text label. alphaShadow numeric value alpha transparency used label shadows shadow=TRUE, values expected 0 (fully transparent) 1 (transparent). r_ex numeric expansion factor used adjust radius r. value r defined based upon arguments provided, multiplied r_ex expansion factor. result stored option \"jam.shadow.r\". alpha_ex numeric expansion factor used adjust alpha transparency alphaOutline alphaShadow. Values maintained lower 0 higher 1. values alphaOutline alphaShadow defined based upon arguments provided, multiplied alpha_ex expansion factor. result clipped range 0,1 using jamba::noiseFloor(). resulting values stored options \"jam.alphaOutline\" \"jam.alphaShadow\", respectively. preset character string defines preset associated settings. value \"none\" cause options use preset settings. \"none\": preset settings applied \"default\": reverts options original default values, produces outline, drop shadow. color use shadowColor allows using settings preset, except custom color. \"bold\": makes output produce visibly distinct outline, drop shadow. color use shadowColor allows using settings preset, except custom color. \"bold white\": \"bold\" except default text color white \"bold black\": \"bold\" except default text color black \"\": applies \"default\" enables drop shadow \"shadow\": uses suggested default values produce drop shadow, outline. color use shadowColor allows using settings preset, except custom color. \"bold shadow\": \"shadow\" except shadow distinct. color use shadowColor allows using settings preset, except custom color. \"bold white shadow\": \"bold shadow\" white shadow \"bold black shadow\": \"bold shadow\" black shadow \"bold \": \"bold\" except also enables bold shadow verbose logical indicating whether print verbose output ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/shadowText_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set options for shadowText — shadowText_options","text":"list following options shadowText(): jam.shadow.r jam.shadow.n jam.outline jam.alphaOutline jam.shadow jam.shadowColor jam.alphaShadow","code":""},{"path":"https://jmw86069.github.io/jamba/reference/shadowText_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and set options for shadowText — shadowText_options","text":"function intended convenient method get set options used jamba::shadowText(). function stores resulting values options() use shadowText().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/shadowText_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get and set options for shadowText — shadowText_options","text":"","code":"nullPlot(doBoxes=FALSE, xlim=c(-1, 4), ylim=c(-1, 4), asp=1); usrBox(fill=\"grey\") cex <- 1.2 graphics::axis(1);graphics::axis(2, las=2) shadowText_options(preset=\"default\") shadowText(x=0, y=3, \"default\", cex=cex) shadowText_options(preset=\"bold\") shadowText(x=0, y=2, \"bold\", cex=cex) shadowText_options(preset=\"bold white\") shadowText(x=0, y=1, col=\"black\", \"bold white\", cex=cex) shadowText_options(preset=\"bold black\") shadowText(x=0, y=0, col=\"white\", \"bold black\", cex=cex) shadowText_options(preset=\"shadow\") shadowText(x=3, y=3, \"shadow\", cex=cex) shadowText_options(preset=\"bold shadow\") shadowText(x=3, y=2, \"bold shadow\", cex=cex) shadowText_options(preset=\"bold white shadow\") shadowText(x=3, y=1, col=\"black\", \"bold white shadow\", cex=cex) shadowText_options(preset=\"bold black shadow\") shadowText(x=3, y=0, col=\"white\", \"bold black shadow\", cex=cex) shadowText_options(preset=\"both\") shadowText(x=1.5, y=3, col=\"white\", \"both\", cex=cex) shadowText(x=1.5, y=2.5, col=\"black\", \"both\", cex=cex) shadowText_options(preset=\"bold both\") shadowText(x=1.5, y=2, col=\"white\", \"bold both\", cex=cex) shadowText(x=1.5, y=1, col=\"black\", \"bold both\", cex=cex) shadowText(x=1.5, y=0.5, col=\"blue3\", \"bold both\", cex=cex, font=2) shadowText(x=1.5, y=0, col=\"indianred1\", \"bold both\", cex=cex, font=2)  shadowText_options(preset=\"default\")"},{"path":"https://jmw86069.github.io/jamba/reference/showColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Show colors from a vector or list — showColors","title":"Show colors from a vector or list — showColors","text":"Show colors vector list","code":""},{"path":"https://jmw86069.github.io/jamba/reference/showColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show colors from a vector or list — showColors","text":"","code":"showColors(   x,   labelCells = NULL,   transpose = FALSE,   srtCellnote = NULL,   adjustMargins = TRUE,   makeUnique = FALSE,   doPlot = TRUE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/showColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show colors from a vector or list — showColors","text":"x one input types: character vector colors function produce colors, example circlize::colorRamp2() list combination character function labelCells logical whether label colors atop color . NULL (default) display labels 40 fewer items either axis. transpose logical whether transpose colors display top--bottom, instead left--right. srtCellnote numeric angle rotate text labelCells=TRUE. set NULL, labels vertical srtCellnote=90 transpose=FALSE horizontal srtCellnote=0 transpose=TRUE. adjustMargins logical indicating whether call adjustAxisLabelMargins() adjust x- y-axis label margins accomodate label size. Note axis hidden using xaxt=\"n\" xaxt=\"n\", respective margin adjusted. arguments ... take precedence graphics::par(), deciding whether adjust margins. However xaxt=\"s\" graphics::par(\"xaxt\"=\"n\") margin adjusted displayed. way axes can adjusted without displaying labels, labels can rendered later needed. makeUnique logical indicating whether display first unique color. x supplied list operation display first unique color list element. Also, x list, just fancy, makeUnique recycled length(x) certain list elements can display unique values, others display values. doPlot logical indicating whether produce visual plot. Note function returns color matrix invisibly. ... additional parameters passed imageByColors().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/showColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show colors from a vector or list — showColors","text":"invisible color matrix used imageByColors(). input x empty, converted colors x contains function, output returns NULL.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/showColors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show colors from a vector or list — showColors","text":"function simply displays colors review, using imageByColors() display colors labels across plot space. supplied list, row imageByColors() represents entry list. Nothing fancy.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/showColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show colors from a vector or list — showColors","text":"","code":"x <- color2gradient(list(Reds=c(\"red\"), Blues=c(\"blue\")), n=c(4,7)); showColors(x);   showColors(getColorRamp(\"firebrick3\"))   if (requireNamespace(\"RColorBrewer\", quietly=TRUE)) {    RColorBrewer_namelist <- rownames(RColorBrewer::brewer.pal.info);    y <- lapply(nameVector(RColorBrewer_namelist), function(i){       n <- RColorBrewer::brewer.pal.info[i, \"maxcolors\"]       j <- RColorBrewer::brewer.pal(n, i);       nameVector(j, seq_along(j));    });    showColors(y, cexCellnote=0.6, cex.axis=0.7, main=\"Brewer Colors\"); }  if (requireNamespace(\"viridisLite\", quietly=TRUE)) {    # given one function name it will display discrete colors    showColors(viridisLite::viridis)    # a list of functions will show each function output    showColors(list(viridis=viridisLite::viridis,       inferno=viridisLite::inferno))     # grab the full viridis color map    z <- rgb2col(viridisLite::viridis.map[,c(\"R\",\"G\",\"B\")]);    # split the colors into a list    viridis_names <- c(A=\"magma\",       B=\"inferno\",       C=\"plasma\",       D=\"viridis\",       E=\"cividis\",       F=\"rocket\",       G=\"mako\",       H=\"turbo\")    y <- split(z,       paste0(viridisLite::viridis.map$opt, \": \",       viridis_names[viridisLite::viridis.map$opt]));    showColors(y, labelCells=TRUE, xaxt=\"n\", main=\"viridis.map colors\"); }     # demonstrate makeUnique=TRUE j1 <- getColorRamp(\"rainbow\", n=7); names(j1) <- seq_along(j1); j2 <- rep(j1, each=3); names(j2) <- makeNames(names(j2), suffix=\"_rep\"); j2 #>      1_rep1      1_rep2      1_rep3      2_rep1      2_rep2      2_rep3  #> \"#FF0000FF\" \"#FF0000FF\" \"#FF0000FF\" \"#EEDD00FF\" \"#EEDD00FF\" \"#EEDD00FF\"  #>      3_rep1      3_rep2      3_rep3      4_rep1      4_rep2      4_rep3  #> \"#21FF00FF\" \"#21FF00FF\" \"#21FF00FF\" \"#00FFCCFF\" \"#00FFCCFF\" \"#00FFCCFF\"  #>      5_rep1      5_rep2      5_rep3      6_rep1      6_rep2      6_rep3  #> \"#0043FFFF\" \"#0043FFFF\" \"#0043FFFF\" \"#A900FFFF\" \"#A900FFFF\" \"#A900FFFF\"  #>      7_rep1      7_rep2      7_rep3  #> \"#FF0066FF\" \"#FF0066FF\" \"#FF0066FF\"  showColors(list(    j1=j1,    j2=j2,    j3=j2),    makeUnique=c(FALSE, FALSE, TRUE))"},{"path":"https://jmw86069.github.io/jamba/reference/sizeAsNum.html","id":null,"dir":"Reference","previous_headings":"","what":"convert size to numeric value — sizeAsNum","title":"convert size to numeric value — sizeAsNum","text":"convert size numeric value","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sizeAsNum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert size to numeric value — sizeAsNum","text":"","code":"sizeAsNum(x, kiloSize = 1024, verbose = FALSE, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/sizeAsNum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert size to numeric value — sizeAsNum","text":"x character vector. x numeric, returned -; otherwise x coerced character .character() throw error fails. kiloSize numeric number base units converting one base unit, one \"kilo\" base unit. file sizes, value 1024, purposes value may 1000, like one thousand units \"1k units\". verbose logical indicating whether print verbose output. output includes data.frame summarizing input, unit matched, final value. verbose==2 return data.frame review. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sizeAsNum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert size to numeric value — sizeAsNum","text":"numeric vector representing numeric value represented abbreviated size.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sizeAsNum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"convert size to numeric value — sizeAsNum","text":"function intended provide inverse asSize() converting abbreviated size full numeric value. makes one simplifying assumption, first character unit enough determine unit. assumption also means units currently case-sensitive, example Mega requires upper-case \"M\", \"milli\" supported, requires \"m\". Unit abbreviations recognized: k - kilo - size defined kiloSize M - Mega - size defined kiloSize ^ 2 G - Giga - size defined kiloSize ^ 3 T - Tera - size defined kiloSize ^ 4 P - Peta - size defined kiloSize ^ 5 Everything else considered abbreviated units, thus numeric value returned -. Note round trip asSize() followed sizeAsNum() produce identical values, intermediate value rounded digits asSize().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/sizeAsNum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert size to numeric value — sizeAsNum","text":"","code":"x <- asSize(c(1, 10,2010,22000,52200), unitType=\"\") x #> [1] \"1\"      \"10\"     \"1.96 k\" \"21.5 k\" \"51 k\"   #> \"1\"   \"10\" \"2k\"     \"21k\"    \"51k\" sizeAsNum(x) #> [1]     1.00    10.00  2007.04 22016.00 52224.00  sizeAsNum(x, kiloSize=1000) #> [1]     1    10  1960 21500 51000"},{"path":"https://jmw86069.github.io/jamba/reference/smoothScatterJam.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth scatter plot, Jam style — smoothScatterJam","title":"Smooth scatter plot, Jam style — smoothScatterJam","text":"Produce smooth scatter plot, helper function called plotSmoothScatter().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/smoothScatterJam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth scatter plot, Jam style — smoothScatterJam","text":"","code":"smoothScatterJam(   x,   y = NULL,   nbin = 256,   bandwidth,   colramp = grDevices::colorRampPalette(c(\"white\", \"lightblue\", \"blue\", \"orange\",     \"orangered2\")),   nrpoints = 100,   pch = \".\",   cex = 1,   col = \"black\",   transformation = function(x) x^0.25,   postPlotHook = graphics::box,   xlab = NULL,   ylab = NULL,   xlim,   ylim,   add = FALSE,   xaxs = graphics::par(\"xaxs\"),   yaxs = graphics::par(\"yaxs\"),   xaxt = graphics::par(\"xaxt\"),   yaxt = graphics::par(\"yaxt\"),   useRaster = NULL,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/smoothScatterJam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth scatter plot, Jam style — smoothScatterJam","text":"x numeric vector, data matrix two  columns. y numeric vector, data supplied via x matrix, y NULL. nbin integer number bins use converting kernel density result (uses bandwidthN ) usable image. example, nbin=123 default used graphics::smoothScatter(), however plotSmoothScatter() function default higher (256). bandwidth numeric vector used define y- x-axis bandwidths, respectively, passed KernSmooth::bkde2D(), calculates underlying 2-dimensional kernel density. plotSmoothScatter() function motivated never wanting define number directly, instead auto-calculation suitable values. colramp function takes one numeric argument returns integer number colors, default 256. nrpoints integer number outlier datapoints display, defined graphics::smoothScatter(), however default nrpoints=0 avoid additional clutter output, default argument bandwidthN usually indicates individual points. pch integer point shape used nrpoints>0. cex numeric point size expansion factor used nrpoints>0. col character R color used nrpoints>0. transformation function converts point density number, typically related square root cube root transformation. postPlotHook function NULL, NULL default. function supplied, called producing image. default simply used draw box around image, used layer additional information atop image plot, example contours, labels, etc. xlab character x-axis label ylab character y-axis label xlim numeric x-axis range plot ylim numeric y-axis range plot add logical whether add existing active R plot, create new plot window. xaxs character value compatible graphics::par(\"xaxs\"), mainly useful suppressing x-axis, order produce custom x-axis range, useful restrict axis range expansion done R default. yaxs character value compatible graphics::par(\"yaxs\"), mainly useful suppressing y-axis, order produce custom y-axis range, useful restrict axis range expansion done R default. xaxt character value compatible graphics::par(\"xaxt\"), mainly useful suppressing x-axis, order produce custom x-axis mechanisms, e.g. log-scaled x-axis tick marks. yaxt character value compatible graphics::par(\"yaxt\"), mainly useful suppressing y-axis, order produce custom y-axis mechanisms, e.g. log-scaled y-axis tick marks. useRaster NULL logical indicating whether invoke graphics::rasterImage() produce raster image. NULL, determines whether produce raster image within imageDefault() function, checks options using getOption(\"preferRaster\", FALSE) determine among things, whether user prefers raster images, grDevices::dev.capabilities() supports raster. ... additional arguments passed imageDefault() optionally plotPlotHook() supplied.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/smoothScatterJam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooth scatter plot, Jam style — smoothScatterJam","text":"list elements sufficient call graphics::image(), also default function called byproduct creating figure.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/smoothScatterJam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smooth scatter plot, Jam style — smoothScatterJam","text":"general purposes, use plotSmoothScatter() replacement graphics::smoothScatter(), produces better default settings pixel size density bandwidth. function necessary order override graphics::smoothScatter() function calls graphics::image.default(). Instead, function calls imageDefault() required order utilize custom raster image scaling, particularly important x- y-axis ranges similar, e.g. x-axis spans 10 units, y-axis spans 10,000 units.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/smoothScatterJam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth scatter plot, Jam style — smoothScatterJam","text":"","code":"x1 <- rnorm(1000); y1 <- (x1 + 5)* 4  + rnorm(1000); smoothScatterJam(x=x1, y=y1, bandwidth=c(0.05, 0.3))"},{"path":"https://jmw86069.github.io/jamba/reference/sqrtAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine square root axis tick mark positions — sqrtAxis","title":"Determine square root axis tick mark positions — sqrtAxis","text":"Determine square root axis tick mark positions, including positive negative range values.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sqrtAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine square root axis tick mark positions — sqrtAxis","text":"","code":"sqrtAxis(   side = 1,   x = NULL,   pretty.n = 10,   u5.bias = 1,   big.mark = \",\",   plot = TRUE,   las = 2,   cex.axis = 0.6,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/sqrtAxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine square root axis tick mark positions — sqrtAxis","text":"side integer value indicating axis position, used graphics::axis(), 1=bottom, 2=left, 3=top, 4=right. Note x supplied, numeric range defined using values x axis side. x optional numeric vector representing numeric range labeled. supplied, numeric range x used axis side. pretty.n numeric value indicating number desired tick marks, passed pretty(). u5.bias numeric value passed pretty() influence frequency intermediate tick marks. big.mark character value passed format() helps visually distinguish numbers larger 1000. plot logical indicating whether plot axis tick marks labels. las, cex.axis numeric values passed graphics::axis() drawing axis. custom default las=2 plots labels rotated perpendicular axis. ... additional parameters passed pretty(), graphics::axis() plot=TRUE.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sqrtAxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine square root axis tick mark positions — sqrtAxis","text":"invisible numeric vector axis positions, named normal space numeric labels. primary use add numeric axis tick marks labels.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/sqrtAxis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine square root axis tick mark positions — sqrtAxis","text":"function calculates positions tick marks data transformed sqrt(), specifically directional transformation like sqrt(abs(x)) * sign(x). x supplied, used define numeric range, otherwise observed range taken based upon side. neither x side supplied, numeric range empty zero width, returns NULL. main goal function provide reasonably placed tick marks using integer values.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/sqrtAxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine square root axis tick mark positions — sqrtAxis","text":"","code":"plot(-3:3*10, -3:3*10, xaxt=\"n\") x <- sqrtAxis(1) abline(v=x, col=\"grey\", lty=\"dotted\") abline(h=pretty(par(\"usr\")[3:4]), col=\"grey\", lty=\"dotted\")   # slightly different label placement with u5.bias=0 plot(-3:3*10, -3:3*10, xaxt=\"n\") x <- sqrtAxis(1, u5.bias=0) abline(v=x, col=\"grey\", lty=\"dotted\") abline(h=pretty(par(\"usr\")[3:4]), col=\"grey\", lty=\"dotted\")"},{"path":"https://jmw86069.github.io/jamba/reference/tcount.html","id":null,"dir":"Reference","previous_headings":"","what":"frequency of entries, ordered by frequency — tcount","title":"frequency of entries, ordered by frequency — tcount","text":"frequency entries, ordered frequency","code":""},{"path":"https://jmw86069.github.io/jamba/reference/tcount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frequency of entries, ordered by frequency — tcount","text":"","code":"tcount(   x,   minCount = NULL,   doSort = TRUE,   maxCount = NULL,   nameSortFunc = sort,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/tcount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frequency of entries, ordered by frequency — tcount","text":"x character, numeric, factor vector input use calculating frequencies. minCount optional integer minimum frequency, results fewer counts observed omitted results. doSort logical whether sort results decreasing frequency. maxCount optional integer maximum frequency returned results. nameSortFunc function used sort results sorting frequency. example, one might use mixedSort(). nameSortFunc=NULL name sort applied. ... additional parameters ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/tcount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frequency of entries, ordered by frequency — tcount","text":"integer vector counts, named unique input values x.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/tcount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"frequency of entries, ordered by frequency — tcount","text":"function mimics output table() two key differences. sorts results decreasing frequency, optionally filters results minimum frequency. effective checking duplicate values, ordering number occurrences. function useful working large vectors gene identifiers, always obvious whether genes replicated particular technological assay. Transcript microarrays example, can contain many replicated genes, often handful genes highly replicated, rest present twice array.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/tcount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frequency of entries, ordered by frequency — tcount","text":"","code":"testVector <- rep(c(\"one\", \"two\", \"three\", \"four\"), c(1:4)); tcount(testVector); #>  four three   two   one  #>     4     3     2     1  tcount(testVector, minCount=2); #>  four three   two  #>     4     3     2"},{"path":"https://jmw86069.github.io/jamba/reference/ucfirst.html","id":null,"dir":"Reference","previous_headings":"","what":"Uppercase the first letter in each word — ucfirst","title":"Uppercase the first letter in each word — ucfirst","text":"Uppercase first letter word","code":""},{"path":"https://jmw86069.github.io/jamba/reference/ucfirst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uppercase the first letter in each word — ucfirst","text":"","code":"ucfirst(x, lowercaseAll = FALSE, firstWordOnly = FALSE, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/ucfirst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uppercase the first letter in each word — ucfirst","text":"x character vector. lowercaseAll logical indicating whether force letters lowercase applying uppercase first letter. firstWordOnly logical indicating whether apply uppercase first word string. Note still applies logic every entry input vector x. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/ucfirst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uppercase the first letter in each word — ucfirst","text":"character vector letters converted uppercase.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/ucfirst.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uppercase the first letter in each word — ucfirst","text":"function simple mimic Perl function ucfirst converts first letter word uppercase. lowercaseAll=TRUE also forces letters lowercase, otherwise mixedCase words retain capital letters middle words.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/ucfirst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uppercase the first letter in each word — ucfirst","text":"","code":"ucfirst(\"TESTING_ALL_UPPERCASE_INPUT\") #> [1] \"TESTING_ALL_UPPERCASE_INPUT\" ucfirst(\"TESTING_ALL_UPPERCASE_INPUT\", TRUE) #> [1] \"Testing_All_Uppercase_Input\" ucfirst(\"TESTING_ALL_UPPERCASE_INPUT\", TRUE, TRUE) #> [1] \"Testing_all_uppercase_input\"  ucfirst(\"testing mixedCase upperAndLower case input\") #> [1] \"Testing MixedCase UpperAndLower Case Input\" ucfirst(\"testing mixedCase upperAndLower case input\", TRUE) #> [1] \"Testing Mixedcase Upperandlower Case Input\" ucfirst(\"testing mixedCase upperAndLower case input\", TRUE, TRUE) #> [1] \"Testing mixedcase upperandlower case input\""},{"path":"https://jmw86069.github.io/jamba/reference/unalpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove alpha transparency from colors — unalpha","title":"Remove alpha transparency from colors — unalpha","text":"Remove alpha transparency colors","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unalpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove alpha transparency from colors — unalpha","text":"","code":"unalpha(x, keepNA = FALSE, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/unalpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove alpha transparency from colors — unalpha","text":"x character vector R colors keepNA logical indicating whether NA values kept therefore returned NA. keepNA=FALSE (default backward compatibility) NA values converted \"#FFFFFF\" done grDevices::col2rgb(). ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unalpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove alpha transparency from colors — unalpha","text":"character vector R colors hex format.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unalpha.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove alpha transparency from colors — unalpha","text":"function simply removes alpha transparency R colors, returned hex format, example \"#FF0000FF\" becomes \"#FF0000\", \"blue\" becomes \"#0000FF\". also silently converts R color names hex format, applicable.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/unalpha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove alpha transparency from colors — unalpha","text":"","code":"unalpha(c(\"#FFFF00DD\", \"red\", NA, \"#0000FF\", \"transparent\")) #> [1] \"#FFFF00\" \"#FF0000\" \"#FFFFFF\" \"#0000FF\" \"#FFFFFF\"  unalpha(c(\"#FFFF00DD\", \"red\", NA, \"#0000FF\", \"transparent\"), keepNA=TRUE) #> [1] \"#FFFF00\" \"#FF0000\" NA        \"#0000FF\" \"#FFFFFF\""},{"path":"https://jmw86069.github.io/jamba/reference/unigrep.html","id":null,"dir":"Reference","previous_headings":"","what":"case-insensitive grep, returning unmatched indices — unigrep","title":"case-insensitive grep, returning unmatched indices — unigrep","text":"case-insensitive grep, returning unmatched indices","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unigrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case-insensitive grep, returning unmatched indices — unigrep","text":"","code":"unigrep(..., ignore.case = TRUE, invert = TRUE)"},{"path":"https://jmw86069.github.io/jamba/reference/unigrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case-insensitive grep, returning unmatched indices — unigrep","text":"..., ignore.case, invert parameters sent base::grep()","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unigrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"case-insensitive grep, returning unmatched indices — unigrep","text":"vector non-matching indices","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unigrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"case-insensitive grep, returning unmatched indices — unigrep","text":"function simple wrapper around base::grep() runs case-insensitive mode, returns unmatched entries. mainly used save keystrokes, consistently named alongside vgrep vigrep, quite helpful writing concise code.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/unigrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"case-insensitive grep, returning unmatched indices — unigrep","text":"","code":"V <- paste0(LETTERS[1:5], LETTERS[4:8]); unigrep(\"D\", V); #> [1] 2 3 5 igrep(\"D\", V); #> [1] 1 4"},{"path":"https://jmw86069.github.io/jamba/reference/uniques.html","id":null,"dir":"Reference","previous_headings":"","what":"apply unique to each element of a list — uniques","title":"apply unique to each element of a list — uniques","text":"Apply unique element list, usually list vectors","code":""},{"path":"https://jmw86069.github.io/jamba/reference/uniques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply unique to each element of a list — uniques","text":"","code":"uniques(   x,   keepNames = TRUE,   incomparables = FALSE,   useBioc = TRUE,   useSimpleBioc = FALSE,   xclass = NULL,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/uniques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apply unique to each element of a list — uniques","text":"x input list vectors keepNames boolean indicating whether keep list element names returned results. incomparables see unique() details, value sent S4Vectors::unique() Bioconductor package S4Vectors installed, ignored otherwise efficiency. useBioc logical, default TRUE,  indicating whether function try use S4Vectors::unique() Bioconductor package S4Vectors installed, otherwise use somewhat less efficient bulk operation. useSimpleBioc logical, default FALSE, whether use legacy mechanism S4Vectors maintained edge cases might faster. xclass character optional vector classes, used invoke optimized logic class known upfront. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/uniques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apply unique to each element of a list — uniques","text":"list unique values list element.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/uniques.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"apply unique to each element of a list — uniques","text":"function attempt use S4Vectors::unique() substantially faster apply family function, especially long lists. However, S4Vectors installed, applies uniqueness unlisted vector values, also substantially faster apply family functions long lists, may still less efficient C implementation provided S4Vectors.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/uniques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apply unique to each element of a list — uniques","text":"","code":"L1 <- list(CA=nameVector(LETTERS[c(1:4,2,7,4,6)]),    B=letters[c(7:11,9,3)],    C2=NULL,    D=nameVector(LETTERS[4])); L1; #> $CA #>    A B_v1    C D_v1 B_v2    G D_v2    F  #>  \"A\"  \"B\"  \"C\"  \"D\"  \"B\"  \"G\"  \"D\"  \"F\"  #>  #> $B #> [1] \"g\" \"h\" \"i\" \"j\" \"k\" \"i\" \"c\" #>  #> $C2 #> NULL #>  #> $D #>   D  #> \"D\"  #>  uniques(L1); #> $CA #>    A B_v1    C D_v1    G    F  #>  \"A\"  \"B\"  \"C\"  \"D\"  \"G\"  \"F\"  #>  #> $B #>                          #> \"g\" \"h\" \"i\" \"j\" \"k\" \"c\"  #>  #> $C2 #> NULL #>  #> $D #>   D  #> \"D\"  #>   uniques(L1, useBioc=FALSE); #> $CA #>    A B_v1    C D_v1    G    F  #>  \"A\"  \"B\"  \"C\"  \"D\"  \"G\"  \"F\"  #>  #> $B #>                          #> \"g\" \"h\" \"i\" \"j\" \"k\" \"c\"  #>  #> $C2 #> character(0) #>  #> $D #>   D  #> \"D\"  #>"},{"path":"https://jmw86069.github.io/jamba/reference/unnestList.html","id":null,"dir":"Reference","previous_headings":"","what":"Un-nest a nested list into a simple list — unnestList","title":"Un-nest a nested list into a simple list — unnestList","text":"Un-nest nested list simple list","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unnestList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Un-nest a nested list into a simple list — unnestList","text":"","code":"unnestList(   x,   addNames = FALSE,   unnamedBase = \"x\",   parentName = NULL,   sep = \".\",   makeNamesFunc = makeNames,   stopClasses = c(\"dendrogram\", \"data.frame\", \"matrix\", \"package_version\", \"tbl\",     \"data.table\"),   extraStopClasses = getOption(\"jam.stopClasses\"),   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/unnestList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Un-nest a nested list into a simple list — unnestList","text":"x list potentially containing nested lists. addNames logical indicating whether add names list elements names already present. addNames=TRUE names present unnamedBase used define names. unnamedBase character value used base naming un-named lists, using format makeNamesFunc(rep(unnamedBase, n)). parentName character optional prefix, used parent name, default NULL. sep character delimiter used nested list names. makeNamesFunc function takes character vector returns non-duplicated character vector equal length. default uses jamba::makeNames(). stopClasses vector classes un-nested, useful case classes inherit list properties. extraStopClasses vector additional values stopClasses, created mostly show options(\"jam.stopClasses\") can used define stopClasses, example function called arguments conveniently passed calling function. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unnestList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Un-nest a nested list into a simple list — unnestList","text":"list flattened contains list elements. Note may contain list-like objects data.frame, defined stopClasses.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unnestList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Un-nest a nested list into a simple list — unnestList","text":"function inspects list, unlists entry resulting simple list non-list entries result. Sometimes concatenating lists together, one list gets added list--lists. function resolves problem providing one flat list.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/unnestList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Un-nest a nested list into a simple list — unnestList","text":"","code":"L <- list(A=letters[1:10],    B=list(C=LETTERS[3:9], D=letters[4:11]),    E=list(F=list(G=LETTERS[3:9], D=letters[4:11]))); L; #> $A #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  #> $B #> $B$C #> [1] \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" #>  #> $B$D #> [1] \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" #>  #>  #> $E #> $E$F #> $E$F$G #> [1] \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" #>  #> $E$F$D #> [1] \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" #>  #>  #>   # inspect the data using str() str(L); #> List of 3 #>  $ A: chr [1:10] \"a\" \"b\" \"c\" \"d\" ... #>  $ B:List of 2 #>   ..$ C: chr [1:7] \"C\" \"D\" \"E\" \"F\" ... #>   ..$ D: chr [1:8] \"d\" \"e\" \"f\" \"g\" ... #>  $ E:List of 1 #>   ..$ F:List of 2 #>   .. ..$ G: chr [1:7] \"C\" \"D\" \"E\" \"F\" ... #>   .. ..$ D: chr [1:8] \"d\" \"e\" \"f\" \"g\" ...  unnestList(L); #> $A #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  #> $B.C #> [1] \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" #>  #> $B.D #> [1] \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" #>  #> $E.F.G #> [1] \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" #>  #> $E.F.D #> [1] \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" #>   # optionally change the delimiter unnestList(L, sep=\"|\"); #> $A #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  #> $`B|C` #> [1] \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" #>  #> $`B|D` #> [1] \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" #>  #> $`E|F|G` #> [1] \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" #>  #> $`E|F|D` #> [1] \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" #>   # example with nested lists of data.frame objects df1 <- data.frame(a=1:2, b=letters[3:4]); DFL <- list(A=df1,    B=list(C=df1, D=df1),    E=list(F=list(G=df1, D=df1))); str(DFL); #> List of 3 #>  $ A:'data.frame':\t2 obs. of  2 variables: #>   ..$ a: int [1:2] 1 2 #>   ..$ b: chr [1:2] \"c\" \"d\" #>  $ B:List of 2 #>   ..$ C:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ a: int [1:2] 1 2 #>   .. ..$ b: chr [1:2] \"c\" \"d\" #>   ..$ D:'data.frame':\t2 obs. of  2 variables: #>   .. ..$ a: int [1:2] 1 2 #>   .. ..$ b: chr [1:2] \"c\" \"d\" #>  $ E:List of 1 #>   ..$ F:List of 2 #>   .. ..$ G:'data.frame':\t2 obs. of  2 variables: #>   .. .. ..$ a: int [1:2] 1 2 #>   .. .. ..$ b: chr [1:2] \"c\" \"d\" #>   .. ..$ D:'data.frame':\t2 obs. of  2 variables: #>   .. .. ..$ a: int [1:2] 1 2 #>   .. .. ..$ b: chr [1:2] \"c\" \"d\" unnestList(DFL); #> $A #>   a b #> 1 1 c #> 2 2 d #>  #> $B.C #>   a b #> 1 1 c #> 2 2 d #>  #> $B.D #>   a b #> 1 1 c #> 2 2 d #>  #> $E.F.G #>   a b #> 1 1 c #> 2 2 d #>  #> $E.F.D #>   a b #> 1 1 c #> 2 2 d #>  str(unnestList(DFL)); #> List of 5 #>  $ A    :'data.frame':\t2 obs. of  2 variables: #>   ..$ a: int [1:2] 1 2 #>   ..$ b: chr [1:2] \"c\" \"d\" #>  $ B.C  :'data.frame':\t2 obs. of  2 variables: #>   ..$ a: int [1:2] 1 2 #>   ..$ b: chr [1:2] \"c\" \"d\" #>  $ B.D  :'data.frame':\t2 obs. of  2 variables: #>   ..$ a: int [1:2] 1 2 #>   ..$ b: chr [1:2] \"c\" \"d\" #>  $ E.F.G:'data.frame':\t2 obs. of  2 variables: #>   ..$ a: int [1:2] 1 2 #>   ..$ b: chr [1:2] \"c\" \"d\" #>  $ E.F.D:'data.frame':\t2 obs. of  2 variables: #>   ..$ a: int [1:2] 1 2 #>   ..$ b: chr [1:2] \"c\" \"d\"  # packageVersion() returns class \"package_version\" # where is.list(packageVersion(\"base\")) is TRUE, # but it cannot ever be subsetted as a list with x[[1]], # and thus it breaks this function identical(is.list(packageVersion(\"base\")), is.list(packageVersion(\"base\"))[[1]]) #> [1] TRUE unnestList(lapply(nameVector(c(\"base\",\"graphics\")), packageVersion)) #> $base #> [1] ‘4.3.3’ #>  #> $graphics #> [1] ‘4.3.3’ #>"},{"path":"https://jmw86069.github.io/jamba/reference/unvigrep.html","id":null,"dir":"Reference","previous_headings":"","what":"case-insensitive grep, returning unmatched values — unvigrep","title":"case-insensitive grep, returning unmatched values — unvigrep","text":"case-insensitive grep, returning unmatched values","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unvigrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case-insensitive grep, returning unmatched values — unvigrep","text":"","code":"unvigrep(..., ignore.case = TRUE, value = TRUE, invert = TRUE)"},{"path":"https://jmw86069.github.io/jamba/reference/unvigrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case-insensitive grep, returning unmatched values — unvigrep","text":"..., ignore.case, value, invert parameters sent base::grep()","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unvigrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"case-insensitive grep, returning unmatched values — unvigrep","text":"vector non-matching indices","code":""},{"path":"https://jmw86069.github.io/jamba/reference/unvigrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"case-insensitive grep, returning unmatched values — unvigrep","text":"function simple wrapper around base::grep() runs case-insensitive mode, returns unmatched values. mainly used save keystrokes, consistently named alongside vgrep vigrep, quite helpful writing concise code. particularly useful removing unwanted entries long vector, example removing accession numbers long vector gene symbols order review gene annotations.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/unvigrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"case-insensitive grep, returning unmatched values — unvigrep","text":"","code":"V <- paste0(LETTERS[1:5], LETTERS[4:8]); unigrep(\"D\", V); #> [1] 2 3 5 igrep(\"D\", V); #> [1] 1 4"},{"path":"https://jmw86069.github.io/jamba/reference/usrBox.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw colored box indicating R plot space — usrBox","title":"Draw colored box indicating R plot space — usrBox","text":"Draw colored box indicating active R plot space","code":""},{"path":"https://jmw86069.github.io/jamba/reference/usrBox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw colored box indicating R plot space — usrBox","text":"","code":"usrBox(   fill = \"#FFFF9966\",   label = NULL,   parUsr = graphics::par(\"usr\"),   debug = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/usrBox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw colored box indicating R plot space — usrBox","text":"fill character R color used fill background plot label character text optionally used label center plot space, default NULL parUsr numeric vector length 4, indicating R plot space, consistent graphics::par(\"usr\"). can thus used define different area, though using rect function directly seems appropriate. debug logical whether print parUsr value used. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/usrBox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw colored box indicating R plot space — usrBox","text":"output, function called byproduct adding box usr plot space R graphics device.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/usrBox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw colored box indicating R plot space — usrBox","text":"function simply draws box indicating active plot space, default shades box light yellow transparency. can useful indicate active plot area allowing pre-drawn plot elements shown, can useful precursor provide colored background plot. plot space defined using graphics::par(\"usr\") therefore requires active R device already opened.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/usrBox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw colored box indicating R plot space — usrBox","text":"","code":"# usrBox() requires that a plot device is already open nullPlot(doBoxes=FALSE); usrBox();"},{"path":"https://jmw86069.github.io/jamba/reference/vgrep.html","id":null,"dir":"Reference","previous_headings":"","what":"grep, returning values — vgrep","title":"grep, returning values — vgrep","text":"grep, returning values","code":""},{"path":"https://jmw86069.github.io/jamba/reference/vgrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grep, returning values — vgrep","text":"","code":"vgrep(..., value = TRUE, ignore.case = FALSE)"},{"path":"https://jmw86069.github.io/jamba/reference/vgrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"grep, returning values — vgrep","text":"..., value, ignore.case parameters sent base::grep()","code":""},{"path":"https://jmw86069.github.io/jamba/reference/vgrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"grep, returning values — vgrep","text":"vector matching values","code":""},{"path":"https://jmw86069.github.io/jamba/reference/vgrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"grep, returning values — vgrep","text":"function simple wrapper around base::grep() returns matching values. particularly helpful grabbing values vector, case (uppercase lowercase) known.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/vgrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"grep, returning values — vgrep","text":"","code":"V <- paste0(LETTERS[1:5], LETTERS[4:8]); vgrep(\"D\", V); #> [1] \"AD\" \"DG\" vgrep(\"d\", V); #> character(0) vigrep(\"d\", V); #> [1] \"AD\" \"DG\""},{"path":"https://jmw86069.github.io/jamba/reference/vigrep.html","id":null,"dir":"Reference","previous_headings":"","what":"case-insensitive grep, returning values — vigrep","title":"case-insensitive grep, returning values — vigrep","text":"case-insensitive grep, returning values","code":""},{"path":"https://jmw86069.github.io/jamba/reference/vigrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"case-insensitive grep, returning values — vigrep","text":"","code":"vigrep(..., value = TRUE, ignore.case = TRUE)"},{"path":"https://jmw86069.github.io/jamba/reference/vigrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"case-insensitive grep, returning values — vigrep","text":"..., value, ignore.case parameters sent base::grep()","code":""},{"path":"https://jmw86069.github.io/jamba/reference/vigrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"case-insensitive grep, returning values — vigrep","text":"vector matching values","code":""},{"path":"https://jmw86069.github.io/jamba/reference/vigrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"case-insensitive grep, returning values — vigrep","text":"function simple wrapper around base::grep() runs case-insensitive mode, returns matching values. particularly helpful grabbing values vector.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/vigrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"case-insensitive grep, returning values — vigrep","text":"","code":"V <- paste0(LETTERS[1:5], LETTERS[4:8]); vigrep(\"d\", V); #> [1] \"AD\" \"DG\""},{"path":"https://jmw86069.github.io/jamba/reference/warpAroundZero.html","id":null,"dir":"Reference","previous_headings":"","what":"Warp a vector of numeric values relative to zero — warpAroundZero","title":"Warp a vector of numeric values relative to zero — warpAroundZero","text":"Warp vector numeric values relative zero","code":""},{"path":"https://jmw86069.github.io/jamba/reference/warpAroundZero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warp a vector of numeric values relative to zero — warpAroundZero","text":"","code":"warpAroundZero(x, lens = 5, baseline = 0, xCeiling = NULL, ...)"},{"path":"https://jmw86069.github.io/jamba/reference/warpAroundZero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warp a vector of numeric values relative to zero — warpAroundZero","text":"x numeric vector lens numeric value defines lens factor, lens > 0 compress values near zero, lens < 0 expand values near zero compress values near maximum value. lens == 0 numeric values changed. baseline numeric value describing baseline, example central value non-zero. baseline subtracted x, warp applied, baseline added result. xCeiling numeric maximum value used color warp range, useful consistency. xCeiling supplied, maximum difference baseline used. xCeiling defined, baseline non-zero, effective value used (xCeiling - baseline). ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/warpAroundZero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warp a vector of numeric values relative to zero — warpAroundZero","text":"numeric vector applying warp function.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/warpAroundZero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Warp a vector of numeric values relative to zero — warpAroundZero","text":"function warps numeric values using log curve transformation, values either compressed near zero, compressed near maximum values. example, vector integers -10 10 warped intervals near zero smaller 1, intervals farthest zero greater 1. main driver function desire compress divergent color scales used heatmaps, order enhance smaller magnitude numeric values. Existing color ramps map color gradient linear manner relative numeric range, can cause extreme values dominate color scale. , linear application colors always appropriate.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/warpAroundZero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warp a vector of numeric values relative to zero — warpAroundZero","text":"","code":"x <- c(-10:10); xPlus10 <- warpAroundZero(x, lens=10); xMinus10 <- warpAroundZero(x, lens=-10);  plot(x=x, y=xPlus10, type=\"b\", pch=20, col=\"dodgerblue\",    main=\"Comparison of lens=+10 to lens=-10\"); graphics::points(x=x, y=xMinus10, type=\"b\", pch=18, col=\"orangered\"); graphics::abline(h=0, v=0, col=\"grey\", lty=\"dashed\", a=0, b=1); graphics::legend(\"topleft\",    legend=c(\"lens=+10\", \"lens=-10\"),    col=c(\"dodgerblue\",\"orangered\"),    pch=c(20,18),    lty=\"solid\",    bg=\"white\");   # example showing the effect of a baseline=5 xPlus10b5 <- warpAroundZero(x, lens=10, baseline=5); xMinus10b5 <- warpAroundZero(x, lens=-10, baseline=5); plot(x=x, y=xPlus10b5, type=\"b\", pch=20, col=\"dodgerblue\",    main=\"Comparison of lens=+10 to lens=-10\",    ylim=c(-10,15),    sub=\"baseline=+5\"); graphics::points(x=x, y=xMinus10b5, type=\"b\", pch=18, col=\"orangered\"); graphics::abline(h=5, v=5, col=\"grey\", lty=\"dashed\", a=0, b=1); graphics::legend(\"topleft\",    legend=c(\"lens=+10\", \"lens=-10\"),    col=c(\"dodgerblue\",\"orangered\"),    pch=c(20,18),    lty=\"solid\",    bg=\"white\");"},{"path":"https://jmw86069.github.io/jamba/reference/warpRamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Warp colors in a color ramp — warpRamp","title":"Warp colors in a color ramp — warpRamp","text":"Warp colors color ramp","code":""},{"path":"https://jmw86069.github.io/jamba/reference/warpRamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warp colors in a color ramp — warpRamp","text":"","code":"warpRamp(   ramp,   lens = 5,   divergent = TRUE,   expandFactor = 10,   plot = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/warpRamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warp colors in a color ramp — warpRamp","text":"ramp character vector R colors lens numeric lens factor, centered zero, positive values cause colors change rapidly near zero, negative values cause colors change less rapidly near zero rapidly near extreme. divergent logical indicating whether ramp represents divergent colors, assumed symmetric zero. Otherwise, colors assumed begin zero. expandFactor numeric factor used expand color ramp prior selecting nearest warped numeric value result warpAroundZero(). value need changed unless lens extremely high (>100). plot logical indicating whether plot input output color ramps using showColors(). verbose logical indicating whether print verbose output. ... additional parameters passed showColors().","code":""},{"path":"https://jmw86069.github.io/jamba/reference/warpRamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warp colors in a color ramp — warpRamp","text":"character vector R colors, length input vector ramp.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/warpRamp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Warp colors in a color ramp — warpRamp","text":"function takes vector colors color ramp (color gradient) warps gradient using lens factor. effect causes color gradient change faster slower, dependent upon lens factor. main intent heatmap color ramps, color gradient changes consistent meaningful numeric differences shown heatmap. short, function enhances colors.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/warpRamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warp colors in a color ramp — warpRamp","text":"","code":"BuRd <- rev(RColorBrewer::brewer.pal(11, \"RdBu\")); BuRdPlus5 <- warpRamp(BuRd, lens=2, plot=TRUE);  BuRdMinus5 <- warpRamp(BuRd, lens=-2, plot=TRUE);   Reds <- RColorBrewer::brewer.pal(9, \"Reds\"); RedsL <- lapply(nameVector(c(-10,-5,-2,0,2,5,10)), function(lens){    warpRamp(Reds, lens=lens, divergent=FALSE) }); showColors(RedsL);"},{"path":"https://jmw86069.github.io/jamba/reference/writeOpenxlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a data.frame to 'Excel' 'xlsx' format — writeOpenxlsx","title":"Export a data.frame to 'Excel' 'xlsx' format — writeOpenxlsx","text":"Export data.frame 'Excel' 'xlsx' format","code":""},{"path":"https://jmw86069.github.io/jamba/reference/writeOpenxlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a data.frame to 'Excel' 'xlsx' format — writeOpenxlsx","text":"","code":"writeOpenxlsx(   x,   file = NULL,   wb = NULL,   sheetName = \"Sheet1\",   startRow = 1,   startCol = 1,   append = FALSE,   headerColors = c(\"lightskyblue1\", \"lightskyblue2\"),   columnColors = c(\"aliceblue\", \"azure2\"),   highlightHeaderColors = c(\"tan1\", \"tan2\"),   highlightColors = c(\"moccasin\", \"navajowhite\"),   borderColor = \"gray75\",   borderPosition = \"BottomRight\",   highlightColumns = NULL,   numColumns = NULL,   fcColumns = NULL,   lfcColumns = NULL,   hitColumns = NULL,   intColumns = NULL,   pvalueColumns = NULL,   numFormat = \"#,##0.00\",   fcFormat = \"#,##0.0\",   lfcFormat = \"#,##0.0\",   hitFormat = \"#,##0.0\",   intFormat = \"#,##0\",   pvalueFormat = \"[>0.01]0.00#;0.00E+00\",   numRule = c(1, 10, 20),   fcRule = c(-6, 0, 6),   lfcRule = c(-3, 0, 3),   hitRule = c(-1.5, 0, 1.5),   intRule = c(0, 100, 10000),   pvalueRule = c(0, 0.01, 0.05),   numStyle = c(\"#F2F0F7\", \"#B4B1D4\", \"#938EC2\"),   fcStyle = c(\"#4F81BD\", \"#EEECE1\", \"#C0504D\"),   lfcStyle = c(\"#4F81BD\", \"#EEECE1\", \"#C0504D\"),   hitStyle = c(\"#4F81BD\", \"#EEECE1\", \"#C0504D\"),   intStyle = c(\"#EEECE1\", \"#FDA560\", \"#F77F30\"),   pvalueStyle = c(\"#F77F30\", \"#FDC99B\", \"#EEECE1\"),   doConditional = TRUE,   doCategorical = TRUE,   colorSub = NULL,   freezePaneColumn = 0,   freezePaneRow = 2,   doFilter = TRUE,   fontName = \"Arial\",   fontSize = 12,   minWidth = getOption(\"openxlsx.minWidth\", 8),   maxWidth = getOption(\"openxlsx.maxWidth\", 40),   autoWidth = TRUE,   colWidths = NULL,   wrapCells = FALSE,   wrapHeaders = TRUE,   headerRowMultiplier = 5,   keepRownames = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/jamba/reference/writeOpenxlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a data.frame to 'Excel' 'xlsx' format — writeOpenxlsx","text":"x data.frame saved 'Excel' 'xlsx' file. file character valid path save 'Excel' 'xlsx' file. file exists, append=TRUE new data added existing file withthe defined sheetName. Note file=NULL output saved file, instead Workbook object returned function. Workbook object can passed argument wb order add multiple sheets Workbook prior saving together. operation intended provide substantial improvement speed. wb Workbook object defined R package openxlsx. argument defined, data imported file, instead workbook data used wb. option intended improve speed writing several sheets output file, preventing slow read/write steps time new sheet added. sheetName character value less valid 'Excel' 'xlsx' worksheet name. time (version 0.0.29.900) sheetName restricted 31 characters, puntuation except \"-\" \"_\". startRow, startCol integer indicating row column number start top,left cell written worksheet, default 1. append logical default FALSE, whether append file (TRUE), write existing file. append=TRUE useful adding worksheet existing file. headerColors, columnColors, highlightHeaderColors, highlightColors, borderColor, borderPosition default values 'Excel' worksheet background border colors. version 0.0.29.900, colors must use valid 'Excel' color names. highlightColumns, numColumns, fcColumns, lfcColumns, hitColumns, intColumns, pvalueColumns integer vector referring column number input data.frame x define column type, relevant. numFormat, fcFormat, lfcFormat, hitFormat, intFormat, pvalueFormat character string valid 'Excel' cell formatting, example \"#,##0.00\" defines column use comma-delimited numbers one thousand, display two decimal places numeric cells. See [https://support.microsoft.com] topic \"Excel Create apply custom number format.\" \"Excel Number format codes\" details. examples : \"#,##0\" : display integer values, using comma delimiter every thousands place. number 2142.12 represented: \"2,142\" \"###0.0\" : display numeric values rounded 0.1 place, using comma delimiter values one thousand. number 2142.12 represented: \"2142.1\" \"[>0.01]0.00#;0.00E+00\" : rule conditional format, values 0.01 represented numbers rounded thousandths position 0.001; values 0.01 represented scientific notation three digits. number 0.1256 represented: \"0.126\" number 0.001256 represented: \"1.26E-03\" \"[Red]#,###.00_);[Blue](#,###.00);[Black]0.00_)\" : format applies positive values, negative values, zero, order delimited semicolons. Positive values colored red. string \"_)\" adds whitespace (defined \"_\") equale width character \")\" end positive values. Negative values surrounded parentheses \"()\" colored blue. Values equal zero represented two trailing digits, whitespace (\"_\") equal width \")\". whitespace end positive values zero used align values decimal position. numRule, fcRule, lfcRule, hitRule, intRule, pvalueRule numeric vector length=3 indicating breakpoints 'Excel' apply conditional color formatting, using corresponding style. Note conditional formatting applied function uses \"3-Color Scale\", therefore three values, three corresponding colors corresponding Style arguments. numStyle, fcStyle, lfcStyle, intStyle, hitStyle, pvalueStyle character vector length=3 containing three valid R colors. Note alpha transparency removed prior use 'Excel', required. Note conditional formatting applied function uses \"3-Color Scale\", therefore three colors, match three values corresponding Rule arguments. doConditional logical indicating whether apply conditional formatting cells, function background cell color (contrasting text color) affected. doCategorical logical indicating whether apply categorical color formatting, background cell colors contrasting text color. argument requires colorSub defined. colorSub character vector R colors, whose names refer cell values input x data.frame. freezePaneColumn, freezePaneRow integer value row column 'Excel' \"freeze panes\" applied. Note values adjusted relative startRow startCol 'Excel' worksheet, values applied relative data.frame argument x. doFilter logical indicating whether enable column filtering default. fontName character default font configuration, containing valid 'Excel' font name. fontSize numeric default font size 'Excel' point units. minWidth, maxWidth, autoWidth numeric minimum, maximum size 'Excel' cell, character units defined 'Excel', used autoWidth=TRUE restrict cell widths range. Note argument colWidths generally preferred, numeric widths can reasonable calculated anticipated upfront. autoWidth=FALSE 'Excel' typically auto-sizes cells width largest value column, may ideal values extremely large. colWidths numeric width column x, recycled total number columns required. Note keepRownames=TRUE, first column contain rownames(x), therefore length colWidths case ncol(x) + 1. wrapCells logical default FALSE, indicating whether enable word-wrap within cells. wrapHeaders logical indicating whether enable word wrap column headers, helpful autoWidth=TRUE since fixed cell width allowing column header seen. headerRowMultiplier numeric value define row height first header row 'Excel'. value defined multiple subsequent rows, usually represent maximum number lines word-wrapping, relevant. argument helpful wrapHeaders=TRUE autoWidth=TRUE. keepRownames logical indicating whether include rownames(x) column 'Excel'. verbose logical indicating whether print verbose output. ... additional arguments passed applyXlsxConditionalFormat() applyXlsxCategoricalFormat() relevant.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/writeOpenxlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a data.frame to 'Excel' 'xlsx' format — writeOpenxlsx","text":"Workbook object defined openxlsx package returned invisibly invisible(). Workbook can used argument wb provide speed boost saving multiple sheets file.","code":""},{"path":"https://jmw86069.github.io/jamba/reference/writeOpenxlsx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export a data.frame to 'Excel' 'xlsx' format — writeOpenxlsx","text":"function minor useful customization openxlsx::saveWorkbook() associated functions, intended provide pre-configured formatting known column types, typically relevant statistical values, cases, gene transcript expression values. numerous configurable options saving 'Excel' worksheet, defaults function intended require changes, listed formal function arguments make option visibly obvious. colorSub supplied named vector colors, default text values colorized accordingly, can especially helpful including data categorical text values. function pre-configures formatting options following column data types, conditional color-formatting, defined numeric ranges, color scales. int integer values, numeric values formatted without visible decimal places, big.mark=\",\" standard used help visually distinguish large integers. color scale default c(0, 100, 10000). num numeric values, fixed number visible decimal places, helps visibly align values along row. hit numeric type, subset \"int\" intended data flagged something like \"+1\" \"-1\" indicate statistical increase decrease. pvalue P-value, numeric values range 1 near zero, values formatted consistently scientific notation. fc numeric fold change, whose values expected range 1 higher, -1 lower. Decimal places default configured show one decimal place, simplify 'Excel' visual summary. lfc numeric log fold change, whose values expected centered zero. Decimal places default configured show one decimal place, simplify 'Excel' visual summary. highlight character undefined columns highlighted brighter background color, bold text. column data type, color scale default numeric range defined, allows conditional formatting cells based upon expected ranges values. screenshot file produced example shown .","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/reference/writeOpenxlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export a data.frame to 'Excel' 'xlsx' format — writeOpenxlsx","text":"","code":"# set up a test data.frame set.seed(123); lfc <- -3:3 + stats::rnorm(7)/3; colorSub <- nameVector(    rainbow2(7),    LETTERS[1:7]) df <- data.frame(name=LETTERS[1:7],    int=round(4^(1:7)),    num=(1:7)*4-2 + stats::rnorm(7),    fold=2^abs(lfc)*sign(lfc),    lfc=lfc,    pvalue=10^(-1:-7 + stats::rnorm(7)),    hit=sample(c(-1,0,0,1,1), replace=TRUE, size=7)); df; #>   name   int        num      fold        lfc       pvalue hit #> 1    A     4  0.7349388 -9.106049 -3.1868252 2.780730e-02   0 #> 2    B    16  5.3131471 -4.218488 -2.0767258 6.122279e-01   1 #> 3    C    64  9.5543380 -1.395160 -0.4804306 3.146665e-03  -1 #> 4    D   256 15.2240818  1.016424  0.0235028 1.079898e-06  -1 #> 5    E  1024 18.3598138  2.060645  1.0430959 5.027544e-05   0 #> 6    F  4096 22.4007715  5.945047  2.5716883 3.366732e-07   0 #> 7    G 16384 26.1106827  8.898972  3.1536387 8.554139e-09   1 # write to tempfile for examples if (check_pkg_installed(\"openxlsx\")) {    out_xlsx <- tempfile(pattern=\"writeOpenxlsx_\", fileext=\".xlsx\")    writeOpenxlsx(x=df,       file=out_xlsx,       sheetName=\"jamba_test\",       colorSub=colorSub,       intColumns=2,       numColumns=3,       fcColumns=4,       lfcColumns=5,       pvalueColumns=6,       hitColumn=7,       freezePaneRow=2,       freezePaneColumn=2,       append=FALSE);    # now read it back    df_list <- readOpenxlsx(xlsx=out_xlsx);    sdim(df_list) } #>            rows cols      class #> jamba_test    7    7 data.frame"},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-per-cran-additional-issues-1-0-3","dir":"Changelog","previous_headings":"","what":"Changes per CRAN additional issues","title":"jamba 1.0.3","text":"‘jamba-vignette.Rmd’ now uses requireNamespace(\"kableExtra\", quietly=TRUE). kable_coloring() changed @examplesId use ‘requireNamespace(“kableExtra”, quietly=TRUE)’. Apparently one platform (r-oldrel-macos-arm64) enforce check ‘kableExtra’ possibly due check_pkg_installed() differences platform. See changes check_pkg_installed().","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-1-0-3","dir":"Changelog","previous_headings":"","what":"Changes to existing functions","title":"jamba 1.0.3","text":"check_pkg_installed() modified provide two methods: “packagedir” confirms package directory exists contains file ‘DESCRIPTION’. possible check file exists enough improvement simply using nchar() directory, checks ‘r-oldrel-macos-arm64’ now succeed, however environment available testing. (development environment already R-4.3.3 MacOS M1 chip, though libraries differ official test system.) “requireNamespace” runs requireNamespace(x, quietly=TRUE) loads package namespace attach . approach slower, accurate.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-per-cran-comments-1-0-2","dir":"Changelog","previous_headings":"","what":"Changes per CRAN comments.","title":"jamba 1.0.2","text":"Used tick marks around software names. lldf() now defaults envir=-1L, parent environment also usually globalenv(). now also recognizes character integer input, equivalent pos name arguments ls(). setPrompt() new default projectName=\"unnamed\" matches previous behavior, longer searches globalenv() projectName.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"potentially-breaking-changes-1-0-2","dir":"Changelog","previous_headings":"","what":"Potentially breaking changes","title":"jamba 1.0.2","text":"reload_rmarkdown_cache() Now defaults envir=new.env() instead using .GlobalEnv, already preferred. now default behavior per CRAN policy, makes sense. now returns envir invisibly, character object list. previous behavior, one can set envir=.GlobalEnv envir=globalenv() ignore output.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-per-cran-comments-1-0-1","dir":"Changelog","previous_headings":"","what":"Changes per CRAN comments.","title":"jamba 1.0.1","text":"uses par() options(), previously altered value, replaced withr equivalent, preserve user environment. Notable exception setPrompt() whose change options(\"prompt\") specific purpose function. exceptions Jam options, whose changes intended. Removed cases \\dontrun{}, involving xlsx functions. now use tempfile() perform proper, small example. Confirmed functions default verbose=FALSE except reload_rmarkdown_cache() whose verbose output intended, option silence exist, . Removed two stray instances unintended always-verbose output called printDebug(). calls print() printDebug() wrapped inside (verbose){} blocks. jargs() now uses message() instead cat(), can silenced. remaining use cat() outside (verbose){} involves printDebug(), whose core purpose print output. Upon testing, cli functions made reliable HTML/RMarkdown output, even using cli::ansi_html().","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"other-notable-changes-1-0-1","dir":"Changelog","previous_headings":"","what":"Other notable changes","title":"jamba 1.0.1","text":"decideMfrow() new argument xyratio=1 control target plot aspect ratio. Also corrected issue causing blank new argument trimExtra=TRUE control whether blank columns rows trimmed, prevent n=4 returning c(3, 2) circumstances. sqrtAxis() Now passes u5.bias internal call pretty(), u5.bias=1 new default maintain previous behavior. adjustAxisLabelMargins() breaking change: returns list named \"mai\" suitable use graphics::par(adjustAxisLabelMargins()). longer updates user par(), due helpful CRAN policy. Makes sense push decision outside function. showColors() longer calls adjustAxisLabelMargins() axis hidden xaxt=\"n\" yaxt=\"n\" respective axis labels.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-1-0-1","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba 1.0.1","text":"logFoldAxis(), pvalueAxis() easy presets minorLogTicksAxis()","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"jamba-100","dir":"Changelog","previous_headings":"","what":"jamba 1.0.0","title":"jamba 1.0.0","text":"CRAN release version. Added missing returns, examples. Removed global variables. Moved farver Suggests. Moved IRanges Enhances. Updated uniques() S4Vectors available. Added CITATION, updated LICENSE, fixed URL Updated tests use testthat stop_if logic.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-0-0-107-900","dir":"Changelog","previous_headings":"","what":"changes","title":"jamba 0.0.107.900","text":"Adjusted function families improve organization. Updated pkgdown site docs. Silenced warning breakDensity() Added alt-text vignette image output.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"breaking-changes-0-0-107-900","dir":"Changelog","previous_headings":"","what":"breaking changes","title":"jamba 0.0.107.900","text":"drawLabels() new argument text_fn used instead relying upon text() global environment. typically uses graphics::text() customized text <- jamba::shadowText override default behavior. affects multienrichjam, updated accordingly. Removed disuse: tcount2(), fix_matrix_ratio()","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-0-0-106-900","dir":"Changelog","previous_headings":"","what":"changes","title":"jamba 0.0.106.900","text":"Added methods, withr Imports. Moved RColorBrewer Imports. Moved many packages Enhances installed unless necessary user Added circlize Enhances. Trimmed DESCRIPTION CRAN guidance. cPaste() fixed error S4Vector installed. asSize() enhanced docs, accepts R object runs object.size(). Tests. Fixed test rowGroupMeans() sparse Matrix. Fixed uniques() mixed list input useBioc=FALSE, factor character together converted factor integer character. removed colorjam Enhances, sigh, since Github cleanly available CRAN checking. colorjam available, supported jamba . Added rainbow2() cheap alternative colorjam::rainbowJam(), quick drop-replacement grDevices::rainbow().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-105-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba 0.0.105.900","text":"rowGroupMeans() Fixed regression using custom rowStatsFunc, added test cases confirm. Fixed regression using base::rowMeans() matrixStats available, since longer exists package. Fixed regression passing ... rowStatsFunc, instead passes na.rm. Added test case confirm.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-104-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba 0.0.104.900","text":"rowGroupMeans() rowRmMadOutliers() New argument includeAttributes=FALSE turns default attributes number replicates, can re-enabled needed. functions now also support SparseMatrix objects Matrix, helps using Seurat SingleCellExperiment objects. functions use matrixStats, sparseMatrixStats, base R summary functions based upon object type installed packages. Added tests function cover basics. Updated tests remove deprecated testthat::context().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-103-900","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"jamba 0.0.103.900","text":"readOpenxlsx() Bug caused using startRow rows causing column headers use rows[startRow] intended. logic now use rows present, startRow otherwise, never . help docs now describe distinction. logic applied cols startCol.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-102-900","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"jamba 0.0.102.900","text":"kable_coloring() properly enforcing HTML output, causing HTML tags appear HTML tags, colorize text example. Added test coverage scenario. plotRidges() now works properly single vector, single column, input without rownames() colnames(). plotPolygonDensity() now properly reverts changes par(), \"mfrow\" axis settings \"xaxs\" \"yaxs\".","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-101-900","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"jamba 0.0.101.900","text":"mmixedOrder() Fixed mis-placed parentheses conditional statement, affecting factor columns. Apparently introduced 0.0.100.900 .","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-100-900","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"jamba 0.0.100.900","text":"mmixedOrder(), mixedSortDF() fixed error sorting class \"Date\", \"POSIXct\", \"POSIXt\". Previous columns either caused error, sorted. Now columns handled numeric columns, converted using .numeric(). , actual error arose converting list data.frame failed class \"octmode\". step avoided, since mmixedOrder() operates list input anyway. example added mixedSortDF() using output file.info().","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-100-900","dir":"Changelog","previous_headings":"","what":"Changes to existing functions","title":"jamba 0.0.100.900","text":"heatmap_row_order(), heatmap_column_order() new argument which_heatmap allows returning row column order specific heatmap, HeatmapList provided. works horizontal side--side heatmap orientation, vertical top--bottom heatmap orientation. breaksByVector() Fixed order class(x) (X %% class(x)). rgb2col() Minor change detecting class(red) reverse order \"RGB\" %% class(red) case red multiple classes. pasteByRowOrdered() Minor change allow columns multiple classes, handled accordingly. affect keepOrder=TRUE, checks presence \"character\" columns.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-99-900","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"jamba 0.0.99.900","text":"writeOpenxlsx(), applyXlsxCategoricalColor() Fixed bug caused categorical colors applied sync columns data.frame, called via writeOpenxlsx(). caused using option colRange apply categorical colors subset data, providing substantial speed expense columns becoming sync columns continuously categorically colored starting column 1. bug fixed.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"updates-to-existing-functions-0-0-98-900","dir":"Changelog","previous_headings":"","what":"updates to existing functions","title":"jamba 0.0.98.900","text":"printDebug() removed erroneous additional newline \"<br/>\" htmlOut=TRUE new arg default comment=!htmlOut htmlOut=TRUE default turns comment prefix. Usually HTML output RMarkdown, comment prefix causes text become heading, RMarkdown chunk option uses results='asis'.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-98-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba 0.0.98.900","text":"printDebugHtml() simple wrapper printDebug() intended HTML output, using options htmlOut=TRUE comment=FALSE specifically RMarkdown output using chunk option results='asis'.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"updates-to-existing-functions-0-0-97-900","dir":"Changelog","previous_headings":"","what":"updates to existing functions","title":"jamba 0.0.97.900","text":"functions updated CRAN compliance, removing :::, including @examples @returns. printDebug() arguments use options() potential overrides removed errant argument x ignored anyway","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"jamba-0096900","dir":"Changelog","previous_headings":"","what":"jamba 0.0.96.900","title":"jamba 0.0.96.900","text":"main update enables colorSub input list several functions: writeOpenxlsx(), kable_coloring(), applyXlsxCategoricalFormat(). feature enables passing color function, color assignments specific column data. companion function platjam::design2colors() takes data.frame returns list colors color functions, one per column, suitable use directly functions updated . design2colors() function likely move colorjam.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-96-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba 0.0.96.900","text":"applyXlsxCategoricalFormat() argument colorSub now accepts color list named colnames, either named character vector colors column, function takes column values returns character colors value. method matching names(colorSub) cell values slightly updated, mainly affecting color assignments character strings contain whitespace punctuation characters. writeOpenxlsx() argument colorSub now accepts either character input previously required, now accepts list input named colnames(x) whose list elements either character vector colors, color function. internal processing slightly altered accomodate change, applyXlsxCategoricalFormat() called one extra row include colnames, equivalent previous behavior otherwise. change means value \"\" can colored red one column, \"\" can colored blue another column. also means numeric columns can custom color function, means can exactly match heatmap color function example, instead relying upon limited conditional formatting available MS Excel. kable_coloring() moved R file convenience removed dependency dplyr changed require() check_pkg_available() avoid attaching kableExtra package. argument colorSub now accepts three types input: character vector colors named column values function takes column values returns colors list named colnames(df), defining columns column using character function described . colorSub list input enables colorizing numeric columns passing color function: circlize::colorRamp2(colors=x, breaks=y) new argument align apply alignment per column, retains proper alignment numeric columns colorized (something kableExtra default). new argument format.args numeric column formatting default, maintained even numeric columns colorized (also handled kableExtra default). new argument border_left,border_right default show light grey left border per column new argument extra_css default turns word-wrap per column new argument row.names passed kableExtra::kable() repeated help determine number columns used left border. unalpha() new argument keepNA=FALSE allows NA conversion \"#FFFFFF\" grDevices::col2rgb(); new option keepNA=TRUE returns NA.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-96-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba 0.0.96.900","text":"shadowText_options() intended help manage shadowText settings stored options().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-95-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba 0.0.95.900","text":"groupedAxis() now returns invisible data.frame relevant coordinates. new argument do_plot=TRUE allow suppressing plot output handling numeric values directly. Added unit tests.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-95-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba 0.0.95.900","text":"minorLogTicks() resolved warnings. minorLogTicksAxis() resolved warnings. shadowText() resolved warnings. showColors() resolved warnings examples. rbindList() removed base R example produced warning. plotSmoothScatter() removed warnings.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-94-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.94.900","text":"plotSmoothScatter() Fixed regression printing lots verbose info. getColorRamp() New argument dex replacement gradientWtFactor, reflecting argument color2gradient(). argument used single color provided, order create color gradient using color. argument dex improves color tone, closely matches original color without becoming de-saturated process. Change existing argument: gradientWtFactor=NULL argument ignored, favor new argument dex=1. Updated unit tests accordingly. color2gradient() argument dex now accepts values zero, converting fractions. Added unit tests.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-93-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.93.900","text":"grepls() now properly works regular expressions searching list package functions. Also added unit tests confirm use case. Fixed test cases cPaste() mixedSort() functions. getColorRamp() fixed rare edge case named palette, using n=NULL (returns color function), palette reversed.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-93-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.93.900","text":"gsubs() function moved multienrichjam::gsubs() jamba. process, noted input x list, inconsistent functions lengths(). now processes list input either iteratively (input nested list), unlisted subsets optimal performance.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-93-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.93.900","text":"plotSmoothScatter() New argument asp optional ability define fixed aspect ratio. enabled, plot xlim ylim behaves slightly differently, consistent plot(), plot.default(), plot.window(), include least xlim ylim expand one axis needed order obtain fixed aspect ratio. add=TRUE xlim ylim values default use plot device range, instead data value range. change makes density consistently calculated plot area used display. method drawing background fill color fillBackground=TRUE changed using usrPar() using grid::grid.rect(). However, grid::grid.rect() apparently honors plot device par(\"xpd\"=FALSE) abline() called non-empty non-infinite value h v. Weird. Nonetheless, causes grid::grid.rect() crop output plot device, benefit resizing plot device asp aspect ratio defined, device resized. Normally usrBox() draws box fixed coordinates, asp defined xlim ylim change plot device resized. future, grid::grid.rect() method problematic, method need revert back using usrPar().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-92-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.92.900","text":"showColors() error thrown trying display circlize::colorRamp2() color function, recently updated version circlize now stores colors internally R hex colors, instead previous versions stored numeric matrix r,g,b color values. function updated detect whether colors defined color breaks circlize::colorRamp2() data numeric matrix r,g,b values, character vector R colors. therefore robust earlier newer versions circlize:: colorRamp2() color functions.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-92-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.92.900","text":"showColors() new argument doPlot=TRUE allows disabling graphical output, mainly motivated desire create unit tests. writeOpenxlsx() New arguments startRow, startCol define starting row column, repectively, new worksheet. Argument doFilter=FALSE ignored, since default worksheet created openxlsx::writeDataTable() already enabled column filtering default. argument applied properly now. Column widths now applied one section code, various column formatting options, may improve column width “auto” formatting changes visible width values column. Help docs updated formatted better markdown style. readOpenxlsx() new arguments startCol consistent argument writeOpenxlsx(), cols used specify exact vector columns. arguments allow loading data starting specific column specific columns Excel worksheet. Added simple unit tests. Added simple unit tests verify data.frame saved writeOpenxlsx() re-loaded readOpenxlsx(), optionally using startRow startCol, reproduce identical input data.frame.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-on-r-0-0-91-900","dir":"Changelog","previous_headings":"","what":"bug fixes on R-4.2.3","title":"jamba version 0.0.91.900","text":"Fixed errors caused (class(x) %% x) since class(x) can >1 value, error R-4 warning R-3. notably imageByColors() handleArgsText() called iteratively argument-printing utility jargs(). reload_rmarkdown_cache() using cache.lazy=FALSE cache files save .rdx .rdb files, causing function fail. case .RData files can loaded using lazyLoad() loaded directly environment envir. See changes .","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-91-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.91.900","text":"reload_rmarkdown_cache() new argument options: file_sort=c(\"globals\", \"objects\") defines file order default use order appear RMarkdown index files \"__globals\" \"__objects\". files present, identical, option choose one . Using globals new default, reliable using file creation time: RMarkdown chunks can re-ordered, cause cache file creation order RMarkdown document also chunks can removed, cache files forcibly removed case, new mechanism prevents loading un-necessary cache files may corrupt final environment. new argument: preferred_load_types=c(\"lazyLoad\", \"load\") help limit mechanism used load cache objects. .rdx/.rdb files exists, default use lazyLoad(). exist, .RData files typically always exist, can loaded load(). option now exists prevent lazyLoad() use load() instead. Subtle difference R objects stored re-used. numerous functions argument help text updated clarity. sdim(), ssdim(), sdima(), ssdima() help docs combined.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"jamba-version-0090900","dir":"Changelog","previous_headings":"","what":"jamba version 0.0.90.900","title":"jamba version 0.0.90.900","text":"Added MIT license. Added testthat unit testing.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-90-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.90.900","text":"middle() Similar head() tail(), except shows middle. Actually default shows evenly spaced entries beginning, middle, end.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-90-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.90.900","text":"mixedSorts(), cPasteS(), cPasteSU() Fixed error one entries NULL, output now retains NULL without error. Added tests cover behavior NULL entries, including retaining proper names absence names(x) input data.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-90-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.90.900","text":"getColorRamp() accepts function input circlize::colorRamp2() accepts character function name optional package prefix. coordPresets(), drawLabels() new argument preset_type position labels either plot frame (default), preset_type=\"figure\" position labels relative margin around figure. nullPlot() new argument marginUnit specify whether display margin units lines marginUnit=\"lines\" (default) inches marginUnit=\"inches\". Margin Outer Margin printed summary four-value form, along side. Outer margin values hidden zero. Outer margin dotted dark green line width=3 make distinct margin dotted line width=1.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-89-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.89.900","text":"mixedSort() mixedOrder() used similar non-identical logic applying ignore.case=TRUE useCaseTiebreak=TRUE. Code logic consolidated mixedOrder() (), logic corrected fix weird edge cases internal capitalization within mixed character/numeric string. Logic essentially sorts without regard case, applies tiebreaker using case end. similar logic used default sort(), though admit feels weird. Default sort() returns c(\"aardvark\", \"Aardvark\", \"abacus\", \"Abacus\"). Code consolidation speed mixedSort() almost two-fold default settings, avoiding almost duplicating sort logic just apply case-sensitive tiebreaker. mentioned time hit previous NEWS. mixedSorts() Optimized handle mixed-class, nested simple list. input list contains multiple classes previous behavior iterate list otherwise class conversions (help optimization) cause problems factor character types. reason, calling unlist(x) x contains factor character, output converted character (fine), however factor values converted integer character strings integer values. New behavior call mixedSorts() subsets x class, subset run single-class optimization. Now instead scaling length(x) scales length(class(x)), obviously much faster. input list nested, content class, runs mixedSorts() data en masse optimal. input list nested, content different classes, subset sorted within class, list sorted within subgroup. inconsistently nested list structure, various branches sorted together, slightly unoptimal, maintain input class atomic vector. classes maintained, without coersion character. cPaste() Now passes honorFactor=keepFactors calling mixedSorts(), provide notable speed boost, addition optimizations mixedSorts() already described.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"jamba-version-0088900","dir":"Changelog","previous_headings":"","what":"jamba version 0.0.88.900","title":"jamba version 0.0.88.900","text":"Began prep eventual CRAN release. added ComplexHeatmap Suggests. edited heatmap_row_order() heatmap_column_order() check ComplexHeatmap.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-88-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.88.900","text":"readOpenxlsx() New default check_header=FALSE sidestep issues column headers align subsequent data. formatInt(), rmNA(), asSize(), sizeAsNum(), imageByColors() updated improve checks class(x), allow multiple values. mixedSort(), mixedOrder() default honorFactor=FALSE vector context. someone mixedSorting vector, expect mixedSorted output. mixedSortDF(), mmixedOrder() default honorFactor=TRUE data.frame list context. someone mixedSorting data.frame, expect mixedSorted character columns, sorted factor levels. someone mmixedOrdering list, expect character vectors mixedSorted factors sorted level.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-88-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.88.900","text":"mixedSort(), mixedOrder(). mmixedOrder(), mixedSortDF() gasp core functions ignoring honorFactor=FALSE instead always keeping factor level order without imposing sort order. intent use honorFactor=FALSE, supposed consistent previous versions jamba. However, dependent Jam functions became somewhat reliant unintended behavior represents honorFactor=TRUE. behavior important uses mixedSortDF() expected honor factor level order default. expectation enables assumptions order values. said, specific errors rare non-existent thus far. “problem” arises R versions R-4.0.0, default R-3.6.1 options(stringsAsFactors=TRUE) causes data.frame() convert character factor. conversion, factor level order defined using vanilla sort(). Therefore, using mixedSortDF() appears use vanilla sort order honoring factor level order, cases data.frame created method override options(stringsAsFactors=TRUE) consistency. use honorFactor=TRUE mixedSortDF() causes edge case inconsistent order data.frame objects, dependent upon value getOption(\"stringsAsFactors\"). resolution issues: mixedSortDF() continue expected, opinion honor factor order default; functions carelessly enable stringsAsFactors=TRUE wreack havoc fixed. “Check , wreck .” shouldn’t said . resolution overall different defaults honorFactor, even though seems improper. argue proper: mixedSort(..., honorFactor=FALSE) someone calling mixedSort() benefit mixedSort behavior, otherwise can call sort() factor get result mixedSort(..., honorFactor=TRUE). Therefore think honorFactor=FALSE expected vector. mixedSortDF(..., honorFactor=TRUE) someone calling mixedSortDF() benefit sorting character columns using mixedSort() logic, otherwise factor columns assumed carefully (let’s hope) constructed factor levels. since factor levels dear analyst, order maintained sorting multi-column data.frame. (equivalent tibble, DataFrame, etc.) Therefore think honorFactor=TRUE expected data.frame. mixedOrder(..., honorFactor=FALSE), due vector context. mixedSorts(..., honorFactor=TRUE), due list context. mmixedOrder(..., honorFactor=TRUE), due list context.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-88-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.88.900","text":"jam_calc_density()","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-87-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.87.900","text":"cPaste() properly enforcing na.rm=TRUE, caused NA values converted \"NA\". bug also affected cPasteS(), cPasteU(), cPasteSU(), along dependent functions genejam package. cPaste() now calls rmNAs() na.rm=TRUE, remove NA values relatively efficient manner across input list x. cPaste() new argument useLegacy optionally enable previous code, optimized list contain vectors identical classes throughout. limitation preserve factor level order, sometimes converted factor character mixed list.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-function-0-0-87-900","dir":"Changelog","previous_headings":"","what":"new function","title":"jamba version 0.0.87.900","text":"rmNAs() extension rmNA() applied list input. intended slightly faster iterating list element, however now iterates every element contains NA value, order preserve class vector.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-86-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.86.900","text":"warning issued rgb2col() checking input argument red empty length(red)==0, NA .na(red). However, red length(red)>1 second check NA results logical vector TRUE/FALSE, first used statement. New versions R invoke warning, future versions eventually cause error. Nonetheless code updated check entries red like : (.na(red)).","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-86-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.86.900","text":"printDebug() several arguments use getOption(): jam.htmlOut, jam.comment logical intended usage inside Rmarkdown documents, customize output. arguments jam.file, jam.append, jam.invert, jam.formatNumbers, jam.trim, jam.big.mark, jam.small.mark htmlOut=TRUE now properly includes \"<br/>\" force line break output. mixedSorts() uses iterative mixedSort() different classes contained x, otherwise factor values converted integer strings. mixedSort() re-defining factor levels using order unique values, instead original levels. changed use levels. mixedSort(), mixedOrder(), mixedSorts() new argument. New argument honorFactor=FALSE keeps previous legacy behavior, perform alphanumeric sort character values even factor columns. However, now behavior can changed.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-85-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.85.900","text":"rowGroupMeans() argument rmOutliers=TRUE along crossGroupMad=TRUE incorrectly caused rowStatsFunc redefined. bug fixed. Also, returnType=\"output\" longer returns attributes \"n\" \"nLabel\" intended represent number non-NA replicates per group, information relevant input data.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-84-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.84.900","text":"printDebug() bug fixed: Occurred bgText length=1, element list length=1. Improperly tried determine make alternating light/dark color without first checking luminance color scenario.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-84-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.84.900","text":"color_dither() simply takes one color, returns two colors differ minimum contrast, hue. coincidentally substitutes printDebug() function.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-84-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.84.900","text":"cell_fun_label() updated skip cells text, vastly improving rendering speed heatmaps contain large proportion blank labels.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-83-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.83.900","text":"printDebug() updated: Argument help text updated. Argument indent honored, previously ignored. numeric defines number character spaces \" \" used indent. color adjusted light,dark alternating pattern, color2gradient() called using dex=1 instead gradientWtFactor=1, apply consistent scaling light dark colors. New argument dex used control intensity light,dark color adjustment. dex=0 adjustment performed. bgText light,dark adjustment now uses dex well, consistency. doColor=FALSE, output enforces conversion factor character combining multiple values string, consistent doColor > 0 behavior. minor effect . setPrompt() updates: new argument debug print control characters new default addEscapes=NULL, autodetects whether running inside RStudio, setting addEscapes=TRUE running inside RStudio. addEscapes defined, setting honored. drawLabels() default box color much lighter, less saturated. new argument panelWidth size labels plot panel width, mostly useful labels top bottom plot panel. argument intended used jamma package place plot panels plot, least full width plot panel. panelWidth=\"force\" labels always equal full panel width panelWidth=\"minimum\" labels least full name width, wide necessary text label panelWidth=\"maximum\" labels large needed text label wider plot panel.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-82-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.82.900","text":"col2hsl() hsl2col() help convert colors HSL color space See examples col2hsl() visual comparison HCL HSL Note functions require farver package, may become formal dependency jamba. dramatic selling point HSL values typically consistent within Hue, without distortion interconversion adjustments. contrast, HCL “caps” colors color gamut RGB channel individually, can rather dramatic effects hue - sometimes fundamentally changing color hue 80 degrees! commonly, color hues shifted HCL conversion order represent Chroma Luminance. Sometimes result faithful Chroma Luminance completely different hue, however, ideal. (Note color packages prismatic internal functions detect whether color gamut, can pre-adjust color conversion farver package. , ideal.) HSL property colors “Lightness” perceived “Luminance” HCL. said, property may advantageous, “yellow” hue example rather desolate Luminance Chroma toned comparable levels blue purple. Instead, saturated color hue seen S=100 L=50. HCL, every hue local Luminance values maximum Chroma, maximum Chroma varies substantially across hues.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-82-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.82.900","text":"breaksByVector() updated : enforce consistent vector names output, changing breakPoints labelPoints represent unique values order appear. added breakLengths output list convenience. imageByColors() adjustments moved imageByColors R file jamba-imagebycolors.R. fixed error doTest=TRUE, now returns test data invisibly. cexCellnote input somewhat confusing may change future. supply cex values column row, use list input cexCellnote, list element represents column row, respectively.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-81-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.81.900","text":"showColors() updated accept color functions two forms: circlize::colorRamp2() form, contains attributes \"colors\" \"breaks\" define underlying color gradient. colors converted hex, named \"breaks\", displayed. function expected accept integer number, return many colors, named integer index, default length n=7. either method fail, output colors displayed. showColors() updates: also updated handle par(\"mar\") properly, return NULL input empty, instead throwing error. new argument makeUnique=TRUE display first unique color color vector. moved R file. pasteByRowsOrdered() new argument keepOrder=FALSE, change default behavior. keepOrder=TRUE, character columns converted factor whose levels defined order unique existing entries, keeping order provided x. new argument byCols passed mixedSortDF() define order column sort factor levels. argument previously passed via ..., added specific argument make connection apparent.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-81-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.81.900","text":"call_fn_ellipsis() added. function wrapper around internal function call: within function, calling another function. function allows passing named arguments ... function permit ... may match argument names .... call_fn_ellipsis() passes named arguments permitted subsequent function. Form : some_function_call(x, ...) Form : call_fn_ellipsis(some_function_call, x, ...)","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-80-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.80.900","text":"rowGroupRmOutliers() convenience function calls rowGroupMeans(..., rmOutliers=TRUE, returnType=\"input\"). new argument crossGroupMad=TRUE calcualted row MAD value using median MAD per row, using non-NA non-zero MAD values. See description changes .","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-80-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.80.900","text":"Moved rowGroupMeans() rowRmMadOutliers() specific .R file easier management. rowGroupMeans() changes rmOutliers=TRUE: new argument crossGroupMad=TRUE : calculate group MAD, take median non-zero, non-NA MAD row rowMadValues median non-zero, non-NA rowMadValues defined minDiff rowMadValues minDiff passed rowRmMadOutliers() group, therefore applies threshold group row, minDiff difference--median required. changes ensure row MAD values 0 unless groups MAD=0 row. Also, default minDiff default require point differ least median difference observed median row, group. MAD=0 groups rows, minDiff=0 case likely adverse effect. rowRmMadOutliers() changes: new argument rowMadValues can define MAD values row, useful setting per-row MAD across multiple sample groups example. new argument minReps require many non-NA values, useful providing rowMadValues values, rows n=2 replicates. includeAttributes=TRUE now includes attribute \"outlierDF\" data.frame summary information row input x.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-79-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.79.900","text":"writeOpenxlsx() changes New argument wb supply existing Workbook object, instead loading file. now returns Workbook object invisible(wb). file=NULL output saved. save multiple sheets file, substantially faster build one Workbook object, save Workbook one time end. New argument colWidths apply column widths Workbook internally, avoid save, read, apply, save. applyXlsxConditionalFormat(), applyXlsxCategoricalFormat(), set_xlsx_colwidths(), set_xlsx_rowheights() xlsxFile can filename Workbook object function returns Workbook invisibly","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-78-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.78.900","text":"mixedSortDF() updated: df input objects zero rows returned directly. Bug fixed error thrown objects zero rows rownames, caused 0.0.76.900 inserted NA empty rownames, caused error df zero rows, since NA length 1 match number rows. First, zero-row objects returned, need sort. Second, section rewritten robust, now empty rownames removed prior calling mmixedOrder(). function now properly allows sort character byCols data colnames, useful sorting \"rownames\". Added examples test confirm desired behavior.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-78-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.78.900","text":"plotRidges() analogous plotPolygonDensity() except uses ggplot2 ggridges plot density profiles inside panel. Particularly good comparing densities across columns/samples, large number samples. cell_fun_label() wrapper function add text labels ComplexHeatmap::Heatmap(). somewhat configurable: can display combination one numeric character labels. Label text color intended use color contrasts color heatmap cell , using setTextContrastColor(). can optionally draw outline cell. Numeric values optionally abbreviated, example 1502110 displayed 1.5M. Text font size can directly adjusted. Labels can rotated inside cell, useful cells tall-skinny.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"other-minor-updates-0-0-78-900","dir":"Changelog","previous_headings":"","what":"other minor updates","title":"jamba version 0.0.78.900","text":"packagedown function categories slightly re-ordered, may re-grouped future help organize functions.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-77-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.77.900","text":"reload_rmarkdown_cache() load cache files stored processing Rmarkdown .Rmd file. intended help restore Rmarkdown data available particular Rmarkdown chunks, restore entire session data can used analysis visualization. optionally loads specific environment optionally loads specific Rmarkdown chunk optionally loads given number Rmarkdown chunks order","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"updates-to-existing-functions-0-0-77-900","dir":"Changelog","previous_headings":"","what":"updates to existing functions","title":"jamba version 0.0.77.900","text":"color2gradient() new argument default gradientWtFactor=NULL: gradientWtFactor controls intensity light--dark color gradient, gradientWtFactor >= 1 defines broader range light--dark, gradientWtFactor < 1 defines limited light--dark. example, n=2 need large difference brightness color1 color2. New behavior assigns default gradientWtFactor based upon n. color2gradient() argument gradientWtFactor can supplied vector, value applied gradient created, order.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-76-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.76.900","text":"mixedSortDF() bug supplied matrix rownames(), fail intermediate data.frame assigned rownamesX=rownames(x) thus zero length. now assigns rownamesX=rmNULL(nullValue=NA, rownames(x)) fills column NA values.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-75-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.75.900","text":"Ported two functions multienrichjam. heatmap_row_order(), heatmap_column_order() specifically used Bioconductor package ComplexHeatmap heatmaps. functions enhanced handle several scenarios: presence absence row_groups, column_groups; without rownames(), colnames() data matrix; without specific row_labels, column_labels.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-function-0-0-74-900","dir":"Changelog","previous_headings":"","what":"new function","title":"jamba version 0.0.74.900","text":"diff_functions() simple utility function intended compare text two functions, motivated migrating functions R packages, needing make changes old function source, propagating new function source. Currently function requires access commandline tool \"diff\" likely limits function linux-like operating systems, MS Windows System Linux (WSL), Cygwin MS Windows.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-73-900","dir":"Changelog","previous_headings":"","what":"enhancements","title":"jamba version 0.0.73.900","text":"plotSmoothScatter() improperly defining xlab ylab supplied data.frame matrix colnames. steps now closely match graphics::plot.default(). noiseFloor() checking minimum NULL, though error occurred , step now performed thrown error.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-72-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.72.900","text":"renameColumn() values supplied factor values, coerced R integer therefore lost character string values provided. workaround coerce .character() straightforward processes outside renameColumn(), however expected behavior certainly maintain character string, function updated accordingly. situation tends happen column renaming stored inside data.frame rename “” column type factor checked beforehand. rare scenario, warrants fix. addition, renameColumn() also operates GRanges related genomic ranges objects, step requires IRanges::values() generic function. values() functions updated include proper package prefix, event packages already loaded. function now explicitly requires length() == length(). help text updated information.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-71-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.71.900","text":"mixedSortDF() argument default useRownames=TRUE changed useRownames=FALSE protect extremely slow sort behavior large nrow data, previously default sort rownames even required. new behavior sorts columns specified, can enable rownames tie-breaker useRownames=TRUE including byCols=0. getColorRamp() now accepts gradient names supplied colorjam::jam_linear colorjam::jam_divergent, \"colorjam\" R package available. linear gradients differ mainly subtle ways, emphasizing color saturation mid-range values, motivated use coverage heatmaps.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-70-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.70.900","text":"really bug, mmixedOrder() apparently enabling verbose output default using verbose - 1, realize (-1) cat (\"yes\") print \"yes\"? Geez. bug also caused mixedSort() mixedSortDF() print extremely verbose output default.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"jamba-version-0069900","dir":"Changelog","previous_headings":"","what":"jamba version 0.0.69.900","title":"jamba version 0.0.69.900","text":"Reminder use options(pkgdown.internet=FALSE) behind VPN. sometimes behind VPN…","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-69-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.69.900","text":"sizeToNum() performs opposite function asSize(), takes abbreviated size character string, converts numeric value.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-69-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.69.900","text":"mmixedOrder() updated fix bug sorting numbers class \"integer64\", defined bit64::integer64. values produced openxlsx::read.xlsx() contained large integer values, previously ignored mmixedOrder(). change also fixes bug mixedSortDF(), however bug affect mixedSort() mixedOrder(). conditional now tests .numeric() returns TRUE bit64::integer64 types, hopefully logic work future large numeric types. mixedSort() fixed issue ignore.case=TRUE caused factors sorted alphanumerically instead factor level. new intended behavior sort unique uppercase factor levels, otherwise maintaining factor level order. rbindList() updated change way returnDF=TRUE handled. now simply calls data.frame(x, check.names=FALSE), validation. Previously option called function unlistDataFrame() get ported jamba, probably .","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-69-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.69.900","text":"mixedSortDF() enhanced allow row name sort, using formats: byCols=\"rownames\" byCols=\"row.names\" byCols=c(0). Reverse row name sort can accomplished byCols=\"-rownames\" byCols=\"-row.names\" byCols=c(-0.01). byCols contains numeric values, sign taken first negative values reverse sort, values rounded integer values. byCols=-0.1 reverse sort row names, useful convenient provide byCols numeric vector character vector. mixedSort() refactored simplify logic, correct small issues, example ignore.case=TRUE x factor, previous behavior call toupper() converts x character, sorted . new intended behavior sort unique(toupper(levels(x))) maintain factor level order defined. new logic defines transform function x, whose output passed mixedOrder(). example, sortByName=TRUE transform function passes names(x) mixedOrder(). Otherwise, one call mixedOrder() data copied process, reasonably memory-efficient large sort operations. Frankly, needs one refactor push logic mixedSort(). mixedSortDF(), mixedSort(), mmixedOrder() arguments extended represent arguments mixedOrder(), sort customizations properly passed functions.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"file-re-organization-0-0-69-900","dir":"Changelog","previous_headings":"","what":"File re-organization","title":"jamba version 0.0.69.900","text":"R functions moved separate files easier management. work done time reduce number functions file. files 15 31 functions! asSize() moved jamba.R jamba-size.R. mixedSort() functions moved jamba-mixedSort.R.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-68-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.68.900","text":"lldf() new argument use_utils_objectsize=TRUE prefer utils::object.size() instead pryr::object_size() observing cases object sizes vastly -stated unusual Bioconductor object types. unclear exactly memory usage determined, function correct, now two alternatives remain lldf().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-67-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.67.900","text":"readOpenxlsx() updated fix small bug loading multiple sheets one pass. now work expected run readOpenxlsx() xlsx file, return list data.frame objects representing worksheet xlsx file. readOpenxlsx() new arguments check_header check_header_n intended check header rows, recognized rows different number columns subsequent rows data sheet. check_header=TRUE check first check_header_n rows determine ncol() sclass() row loaded individually. header rows detected, first value first row assigned column dimnames data.frame returned, full header data included attribute attr(df, \"header\"). method intended help loading multiple worksheets, none, , worksheets may header rows. Note methodology tested currently, debug edge cases data sometimes detected fewer columns rows others. intent expect skipEmptyCols=FALSE return columns even data present, consistent ncol() data rows, fewer columns header rows. logic may updated time. readOpenxlsx() updated apply skipEmptyCols=FALSE default step, avoid inconsistencies especially column headers defined columns, data present columns column headers.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-66-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.66.900","text":"rowGroupMeans() updated remove silent dependency matrixStats now properly checks dependency, calls prefix matrixStats::rowMedians() matrixStats::rowMads() needed. applyXlsxCategoricalFormat() updated streamline categorical color matching, though much large files. revisit improve speed eventually. Fixed help documents using markdown format referring package functions.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-66-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.66.900","text":"igrepl() convenient wrapper grepl(..., ignore-case=TRUE)","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-65-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.65.900","text":"writeOpenxlsx() new argument wrapCells=FALSE changes previous behavior cells word-wrapped default. Previously, column width accomodate text, cells tall - sometimes “super-tall”. function set_xlsx_rowheights() can used fix situation, however process can quite slow large Excel worksheets.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-64-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.64.900","text":"provigrep() argument maxValues beedn implemented properly applying limit returned values per grep pattern. implementation corrected. Examples updated demonstrate utility.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-64-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.64.900","text":"heads() applies head() across list atomic vectors, using one-step style notably faster lapply(x, head, n) especially long lists. Also can apply vector n values needed. main utility provigrep() argument maxValues. proigrep() added lightweight alias provigrep(..., value=FALSE) returns index positions rather values. match_unique() matches unique vector values full vector. found performing step many times thought function might feel better. may also equivalent (!duplicated(x)) - , doesn’t feel easy enough. guess.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-function-0-0-63-900","dir":"Changelog","previous_headings":"","what":"new function","title":"jamba version 0.0.63.900","text":"lldf() lightweight extension utils::ls() returns data.frame object name size, sorted largest smallest. found using function several times becoming aware object sizes using jamsession::save_jamsession().","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-63-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.63.900","text":"plotSmoothScatter() default argument bandwidthN=NULL changes default bandwidth use bwpi per-inch calculation bandwidth can reasonably displayed given output size. Previous default bandwidthN=300. Note output density calculation dependent upon display size, can affect results. plotSmoothScatter() now honors xlab ylab, provided, uses base R convention applies deparse(substitute(x)) determine suitable default label.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-62-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.62.900","text":"shadowText() new argument shadowOrder control rendering shadows labels vector labels: shadowOrder=\"\" renders shadow label order, subsequent shadows overlap previously rendered labels; shadowOrder=\"\" renders shadows labels, shadows never overlap labels. minor issue, mostly affecting display labels slightly overlap - see examples shadowText(). setCLranges() fixed issue first time processing, wrongly defining Crange Lrange future use even inside Rstudio. (Minor issue affect text labels light colors light background.)","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-61-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.61.900","text":"fix_matrix_ratio() bug secondary logic referring non-existent object y. function used optional backend imageDefault useRaster=TRUE provide reasonable default matrix adjustment reduce prevent visual distortion image interpolation performed matrices non-1:1 ratio rows columns.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-60-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.60.900","text":"readOpenxlsx() reciprocal writeOpenxlsx() differs openxlsx::read.xlsx() mainly loads multiple sheets time, mangle column names check.names=FALSE. openxlsx method behaves check.names=TRUE cases, 01-Dec-2020.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-59-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.59.900","text":"getColorRamp() argument defaultBaseColor=\"grey99\" previous defaultBaseColor=\"grey95\" just felt dark. plotSmoothScatter() new argument col passed smoothScatterJam() compatible smoothScatter(), defines point color nrpoints non-zero. Apparently defining argument allowed R fuzzy argument name matching, causing conflict colramp. plotSmoothScatter() new argument expand expand x-axis y-axis ranges amount. default expand=c(0.04, 0.04) mimics default setting R base plots. help text updated. plotSmoothScatter() now uses grDevices::xy.coords() define coordinates, avoiding internal logic essentially thing. change silent. change remove warnings produced input supplied single numeric vector.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-59-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.59.900","text":"plotSmoothScatter() argument binpi setting bins per inch identically x y axes, using maximum size – can now handle axis independently. Now output pixels square, rather influenced ratio plot device.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-58-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.58.900","text":"getColorRamp() updated single-color input defaultBaseColor. now properly creates color gradient light--dark, dark--light based upon relative brightness color defaultBaseColor.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-57-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.57.900","text":"Updates setCLranges() mainly affect colorized console text output, used printDebug() calls make_styles(). function also useful adjust color vector colors contrast light dark background. setCLranges() argument new default lightMode=NULL slightly different, intuitive behavior. lightMode defined (TRUE FALSE) -rides existing values, uses corresponding lightMode setting directly. Otherwise, lightMode=NULL existing Crange Lrange values used. none defined, checkLightMode() called, default values used. Functions use setCLranges() updated argument default lightMode=NULL used. functions called lightMode=TRUE lightMode=FALSE text output adjusted. example: Functions affected: * checkLightMode() * applyCLrange() * setCLranges() * printDebug() * make_styles() * jargs()","code":"printDebug(\"yellow\", lightMode=FALSE) printDebug(\"yellow\", lightMode=TRUE)"},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-56-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.56.900","text":"printDebug() failed class \"package_version\" ultimately unnestList() unlist object type. “package_version” class list, e.g. .list(packageVersion(\"base\")) TRUE. However, accessing first item, e.g. x[[1]] always returns full object unchanged… expected behavior list. class added stopClasses. unnestList() refactored handle nested lists without names various combinations, use tryCatch() final protection infinite recursion, list-list objects behave like list objects (case \"package_version\" class.) applyCLranges() updated remove warning message argument fixYellow read \"condition length > 1 first element used\". function now handles vector input fixYellow extends vector length x.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-56-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.56.900","text":"plotSmoothScatter() now correctly determines plot aspect ratio plot initiated. situation occurs using graphics::layout() update par() settings plot created. Now blank plot initiated determining aspect ratio, allows proper calculation 2D density plot.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"refactoring-of-plotsmoothscatter-0-0-56-900","dir":"Changelog","previous_headings":"","what":"refactoring of plotSmoothScatter","title":"jamba version 0.0.56.900","text":"plotSmoothScatter() new argument binpi defines nbin number displayed bins based upon plot panel size. default binpi=50 defines 50 display bins per inch. value adjust accordingly large small figures, based upon physical size figure inches. plotSmoothScatter() argument nbin new default nbin=NULL, uses binpi calculate nbin. use previous style, set nbin=256 ignore binpi. plotSmoothScatter() new argument bwpi defines bandwidthN based upon plot panel size. default bwpi=NULL implement scaling default, instead bandwidthN=300 still default. benefit using bwpi mostly speed calculating 2D density multi-panel plots detail already lost display.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"plotsmoothscatter-commentary-0-0-56-900","dir":"Changelog","previous_headings":"refactoring of plotSmoothScatter","what":"plotSmoothScatter commentary","title":"jamba version 0.0.56.900","text":"plotSmoothScatter() uses two arguments determine data plotted: bandwidthN defines number bandwidth divisions x- y-axes used calculate 2D density. Higher bandwidthN calculates greater detail 2D density – values typically higher graphics::smoothScatter(), still driving reason use plotSmoothScatter smoothScatter(). nbin defines number visible pixels used display calculated 2D density. Higher nbin creates visually detailed representation 2D density. Usually nbin bandwidthN values similar , since conceptually makes sense calculate 2D density roughly resolution used display results. arguments adjustable still valid purposes. change? short summary multi-panel plots fewer pixels displayed, wanted convenient method reduce number pixels (nbin) displayed panel. (Truth told, working home creating plots remote servers, noticed just long multi-panel plots take render. time spent rendering detail never seen display.) extended testing, concluded bandwidth remain relatively constant regardless display pixels, order maintain consistent 2D density despite image size. (Conceptually, makes sense image display size affect underlying calculation data displayed.) However, number displayed pixels reduced roughly proportional size plot panel, solves issue plotting data far detail visually rendered, making plots larger, take longer display, creating larger saved file sizes. Also, resolution resulting plot can now adjusted relative output plot size, consistent computer monitor resolution (dots per inch dpi), printed paper output dpi.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-55-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.55.900","text":"applyXlsxConditionalFormat() writeOpenxlsx() updated make default colors numStyle, intStyle, pvalueStyle slightly colorful, also less dark, Excel default black text better visible contrast. (can Excel apply conditional format rules text font color?) writeOpenxlsx() format P-values pvalueFormat formats values 0.01 decimal value 0.022 0.157, P-values 0.01 exponential notation 2.31E-10. (wish R avoid formatting things like 1.1e+00 1.0e+01 without using custom function.) writeOpenxlsx() updated comprehensive example. applyCategoricalFormat() simple working example. applyXlsxConditionalFormat() simple working example.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-55-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.55.900","text":"set_xlsx_rowheights() set_xlsx_colwidths() light wrappers useful functions openxlsx::setRowHeights() openxlsx::setColWidths(). simply open workbook, apply values appropriate sheet, save workbook.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-54-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.54.900","text":"setPrompt() default wraps color sequence inside proper ansi escape sequences, helps console properly apply word wrapping ignoring color sequences estimate character count per line.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-53-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.53.900","text":"printDebug() fixed visual glitch caused using gsub() remove trailing sep characters vector elements adding sep , without removing ANSI-encoding sep string, sometimes removing trailing zero numeric strings middle multi-element vector. Now sep appended using paste0() trailing sep characters checked removed. behavior probably better since properly represent input content. printDebug() modified fix longstanding visual glitch fully reset inverted ANSI colors span multiple lines. output uses color, trailing crayon::reset(\"\") added end line.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-52-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.52.900","text":"jam_rapply() lightweight customization base::rapply(), specifically designed keep NULL entries without dropping silently. added benefit able flatten nested input list, expand back original nested list structure, without losing NULL entries.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"notes-on-sorting-lists-with-factors-and-vectors-0-0-52-900","dir":"Changelog","previous_headings":"","what":"Notes on sorting lists with factors and vectors","title":"jamba version 0.0.52.900","text":"theme several updates version handle list input may contain factor non-factor vectors. fact even handling list factor vectors unclear least . example, base::unlist() operating list factors define one factor vector whose levels literally unique first-occurrence factor level. example sort(factor(c(\"\",\"B\"), levels=c(\"\",\"B\"))) results c(\"\", \"B\"), sort(factor(c(\"\",\"B\"), levels=c(\"B\",\"\"))) results c(\"B\", \"\"). done given: list(factor(c(\"\",\"B\"), levels=c(\"\",\"B\")), factor(c(\"\",\"B\"), levels=c(\"B\",\"\")) reality, occurrences happen, factor levels specified, best solution include full set factor levels factor vector. input contains mixture factor character, vectors, running unlist() converts factors integers… really bad. least handle prevent scenario.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-52-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.52.900","text":"pasteByRowOrdered() modified two ways: new argument na.last=TRUE passed mixedSortDF() allow NA values sorted top, seems intuitive scenarios; also ... additional arguments passed mixedSortDF() allows column sort order customized. Previously pasteByRowOrdered() called mixedSortDF() sorted columns order appear data.frame, however sometimes better sort columns differently, keeping original column order intact. See examples illustration na.last=TRUE. two-column table NA values second column, using na.last=TRUE (default) yield factor levels c(\"A_B\", \"\", \"B_C\", \"B\"), using na.last=FALSE yield c(\"\", \"A_B\", \"B\", \"B_C\"). output seems intuitive, however default mixedSortDF() mixedSort() na.last=TRUE default maintained consistency. mixedSort() argument NAlast deprecated favor na.last consistency base::sort().","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-52-900","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"jamba version 0.0.52.900","text":"cPaste() refactored simplify internal logic, handle rare edge case inconsistent related functions. occurs input list contains factor vectors, non-factor vectors, doSort=TRUE keepFactors=TRUE. keepFactors=TRUE argument tries maintain factor levels sort, instead using mixedSort() across vectors. case, previously non-factor vectors converted factor, default order factor levels using sort(). Now output consistent character vectors converted factors whose levels ordered using mixedSort(). step occurs across character vectors, fairly fast even large input lists. Also, NULL entries still maintained returned \"\". mixedSorts() updated allow input names, errantly returning NULL. Now names handled gracefully, allowing names, even duplicated names, without issue. mixedSorts() now properly handles nested list input may contain NULL, returns structured list including NULL entries appropriate.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"refactoring-for-performance-0-0-52-900","dir":"Changelog","previous_headings":"","what":"Refactoring for performance","title":"jamba version 0.0.52.900","text":"uniques() new argument useSimpleBioc=TRUE optionally enable Bioconductor SimpleList intermediate – mostly available benchmark painfully slow raised red flag. Bioconductor S4Vectors package changed handle List coersion simple list class, instead using CompressedList defaulted use SimpleList. Unfortunately, SimpleList roughly 6-10 times slower calling unique(), causing curious slowdowns functions cPasteU. Bioconductor allow coersion directly CompressedList, instead requires coersion specific recognized classes \"character\" \"CharacterList\", \"integer\" \"IntegerList\". input list allowed contain different classes, remedy make CompressedList recognized class, call uniques() CompressedList, repeat classes handled. unrecognized classes handled using lapply(x, unique). See examples benchmark comparisons. useBioc=TRUE, optimized Bioconductor method used. useBioc=FALSE, useSimpleBioc=TRUE, slower Bioconductor approach used, uses SimpleList intermediate. useBioc=FALSE useSimpleBioc=FALSE, two additional options: keepNames=FALSE uses lapply(x, unique) loses vector names; keepNames=TRUE invoke special base R approach maintains original vector names remaining unique entries. four approaches timings relative fastest: useBioc=TRUE: 1x (fastest) useBioc=FALSE, useSimpleBioc=TRUE: 6x slower useBioc=FALSE, useSimpleBioc=FALSE, keepNames=FALSE: 1.8x slower useBioc=FALSE, useSimpleBioc=FALSE, keepNames=TRUE: 12x slower","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-51-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.51.900","text":"printDebug() new argument, largely silent, doReset defines whether apply additional color reset delimiter argument sep. Previously delimiter inherited color previous text, now default delimiter style reset, giving clear distinction multiple values. printDebug() now properly applies Crange Lrange values lightMode TRUE, means limits brightness text colors light background, ensure enough contrast read text. using printDebugI() background color adjusted, foreground (text) color set using setTextContrastColor(), meaning either white black depending upon background brightness. setCLranges() make_styles() updated apply options \"jam.Crange\", \"jam.Lrange\" options NULL, otherwise leave -. applyCLrange() now properly applies desired Crange Lrange values, defines appropriate options, default options NULL. fixYellow() default settings changed expand range corrected “green-ness”, also fixup=TRUE default. hcl2col() argument changed fixup=TRUE, model=\"hcl\", consistent changes color handling. hcl2col() col2hcl() now use model=\"hcl\" default, now calls farver package installed, otherwise revert using colorspace model=\"polarLUV\" fixup=TRUE. future colorspace likely removed favor farver, now transition begun. setTextContrastColor() adjusted handle alpha transparency accurately, examples updated include new example uses drawLabels() dark background. New argument alphaLens allows fine-tuning alpha transparency blending foreground background colors.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"other-updates-0-0-51-900","dir":"Changelog","previous_headings":"","what":"Other updates","title":"jamba version 0.0.51.900","text":"Added visuals README.Rmd.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-50-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.50.900","text":"shadowText() updated use several options() default argument values. Although options() always ideal mechanism, purely visual effects conflict statistical reproducibility, allows overall graphical settings maintained shadowText() called internal plot() functions. example setting text <- jamba::shadowText calling default base R plot function use jamba::shadowText() place text(), without allowing customization. options() mechanic allows custom settings honored. primary driver changes multienrichjam::jam_igraph() plots igraph objects customization, one option use_shadowText=TRUE invokes jamba::shadowText(). desirable adjust contrast outline effect completely obscure underlying network graph display.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-experimental-function-0-0-49-900","dir":"Changelog","previous_headings":"","what":"New experimental function","title":"jamba version 0.0.49.900","text":"fix_matrix_ratio() used expand matrix roughly 1:1 dimensions, maximum factor per dimension. purpose enhance image(), rasterImage(), grid.raster() functions, specifically interpolate=TRUE images rows columns actual pixels display image. interpolate=TRUE methods base R account assymetry, account low number rows columns. See examples visible examples effect.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-to-readme-0-0-48-900","dir":"Changelog","previous_headings":"","what":"Enhancements to README","title":"jamba version 0.0.48.900","text":"README.Rmd re-organized, callouts helpful jamba functions. Next step include visual examples.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"minor-bug-fix-0-0-48-900","dir":"Changelog","previous_headings":"","what":"Minor bug fix","title":"jamba version 0.0.48.900","text":"writeOpenxlsx() exporting files inconsistent word wrapping column, inconsistent vertical align (valign) settings. culprit openxlsx::saveWorkbook() appears apply default styles cell styles specifically encoded. Simply loading saving workbook modify column styles. workaround/fix ensure writeOpenxlsx() specifically encode wrapText valign cell, overridden openxlsx::saveWorkbook() mood. writeOpenxlsx() now forces wrapText=TRUE columns. future function may allow per-column wrapText. applyXlsxCategorical() new argument wrapText=TRUE passed openxlsx::createStyle(), since function requires wrapText either TRUE FALSE, default FALSE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-47-900","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"jamba version 0.0.47.900","text":"setTextContrastColor() longer calls par(\"bg\") determine background color, unless graphics device already open. change prevent graphics device opened somewhat random situations. argument bg used input colors alpha transparency. bg supplied, query par(\"bg\") length(dev.list())>0, otherwise uses \"white\" default. Note calling par() always opens new graphics device one already open, even though \"bg\" value stored somewhere require new device. R docs describe behavior, ’s worth. imageByColors() now accepts argument cellnote atomic vector, coerced matrix dimensions input matrix x. change makes easier use numeric formatting functions, sometimes take matrix input provide vector output. applyCLrange() new argument fixup passed hcl2col() turn passes colorspace::hex() converting colors outside color gamut. functions soon replaced calls farver. hcl2col() col2hcl() now argument option model=\"hcl\" uses farver, color model \"hcl\", equivalent using colorspace::hex(...,fixup=TRUE), except faster, better upside color manipulations. now, color model use \"hcl\" can work better default values colorjam::rainbowJam().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-46-900","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"jamba version 0.0.46.900","text":"rbindList() two optional arguments:","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-45-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.45.900","text":"sdima() ssdima() equivalent sdim() ssdim() except operate attributes(x). somehow found constantly typing sdim(attributes(x)) finally enough . printDebugI() shortcut printDebug(..., invert=TRUE), intended quick way use inverted colors, colorize background instead text. Note printDebug() applies color range restriction, make sure text contrasts either light dark background. invert=TRUE background color restricted, instead foreground text uses setTextContrastColor() determine suitable contrasting color text corresponding background color.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-45-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.45.900","text":"imageByColors() refactored handle grouped labels cleanly. New argument groupByColors=TRUE decides whether group cellnotes label underlying color identical – change previous behavior. Previous behavior grouped consecutive identical labels, regardless underlying color, sometimes helpful, example labeling color gradient base color. Typically cellnote color change together, always. new default consistent expected behavior. imageByColors() new argument groupBy one values \"row\" groups cellnote values row, \"column\" groups cellnote values column. Useful limit cellnote grouping values grouped inappropriately. argument mostly useful groupByColors=FALSE. imageByColors() new argument adjustMargins=TRUE call adjustAxisLabelMargins() adjust margins ensure labels fit plot device size. adjustAxisLabelMargins() updated handle par(\"cex\") par(\"cex.axis\") appropriately.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-44-900","dir":"Changelog","previous_headings":"","what":"enhancements","title":"jamba version 0.0.44.900","text":"sdim() ssdim() now handle environment input, list environments. Previously worked sdim() using random order returned names(x) instead proper order ls(envir=x). environment essentially treated list, ssdim() now properly traverse environment list. sdim() ssdim() now handle \"List\" object classes sub-classes S4Vectors Bioconductor package, works S4Vectors package previously loaded search path, otherwise R object object system load dependent package automatically. case, slotNames(x) used, somewhat less useful. imageDefault() now properly honors par(\"bty\") setting, calling box() force drawing box around heatmap.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes--enhancements-0-0-43-900","dir":"Changelog","previous_headings":"","what":"bug fixes / enhancements","title":"jamba version 0.0.43.900","text":"make_styles() fixed issue background color supplied vector form, errantly calling fixYellow() logical vector whether colorize, instead color vector . package needs \"testthat\".","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes--enhancements-0-0-42-900","dir":"Changelog","previous_headings":"","what":"bug fixes / enhancements","title":"jamba version 0.0.42.900","text":"printDebug() now handles nested lists, calling jamba::unnestList() flattens nested lists one layer. change allows printing list printDebug(c(\"one\", \"two \"), c(\"three\", \"four\")) l <- list(c(\"one\", \"two \"), c(\"three\", \"four\"));printDebug(l);. printDebug() now uses color2gradient() create alternating light-dark shadings, used single color defined multi-item vector concatenated sep=\",\". gradient reliable (far) makeColorDarker() ANSI output limited, colors allowed contrast light dark background. printDebug() new argument htmlOut=TRUE output character string containing text colorized using HTML using format <span style=\"color:red;background=white\">text<\/span>. Intended whenever colorized text otherwise interpreted colorized web browser context. calls make_html_styles(). make_html_styles() new function, takes vector text, vector foreground colors, vector background colors, returns character string HTML colorizes text. function intended Rmarkdown web page HTML output. jargs() updated handle arguments vectors containing negative numbers. negative - sign example -3 returned formals() call(\\\\-\\, 3), stores numeric value separate negative sign. seems like change, therefore broke colorization previously worked. now function works, somehow lost ability colorize numeric vectors value. leave future.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-41-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.41.900","text":"pasteByRow() properly handles leading blanks, previously correctly handled blank values second subsequent columns. Caused trying simplify R function moving jamba package.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-0-0-40-900","dir":"Changelog","previous_headings":"","what":"changes","title":"jamba version 0.0.40.900","text":"plotPolygonDensity() new argument highlightPoints allows highlighting points distribution, currently displayed histogram bars top histogram density polygon fill. Also slight change polygon density sized, uses median ratio height density curve histogram bars center bar.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-0-0-39-900","dir":"Changelog","previous_headings":"","what":"changes","title":"jamba version 0.0.39.900","text":"drawLabels() first argument txt label displayed, small convenience change. breaksByVectors() examples updated fix typo calling adjustAxisLabelMargins(). Added substantial content vignette, including moving multiple images docs/articles pkgdown.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"possible-breaking-changes-0-0-39-900","dir":"Changelog","previous_headings":"","what":"possible breaking changes","title":"jamba version 0.0.39.900","text":"cPaste() default doSort=TRUE changed doSort=FALSE. New functions: cPasteS() intended sorted values; cPasteU() alias cPasteUnique() intended unique values; cPasteSU() intended sorted unique values. call cPaste() convenience defaults. recommended use cPasteS() replace sorted cPaste() cases output expected sorted. change made now impact limited mostly Jam packages mitigated.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-function-0-0-39-900","dir":"Changelog","previous_headings":"","what":"new function","title":"jamba version 0.0.39.900","text":"groupedAxis() draws grouped axis labels, small convenience function extends breaksByVectors().","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-39-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.39.900","text":"Fixed regression provigrep() input character, use make.unique() requires explicit conversion character type first.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-38-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.38.900","text":"provigrep() enhanced handle duplicated input entries, previously returned unique entries, now correctly returns entries including duplicates, proper order. optional list output also makes list element unique. New argument value allows returning index positions, equivalent proigrep(). Lastly, ignore.case argument now properly honored, order allow case-sensitive matching. checkLightMode() try use rstudio::getThemeInfo() package installed, function API exists, order determine whether Rstudio currently using dark theme. make_styles() new optional argument bg_style allows defining foreground style background bg_style one step. bg_style supplied, Crange Lrange arguments ignored. Fixed bug rendering Rstudio, ANSI foreground color white get properly reset, causing subsequent foreground colors white despite clear ANSI codes different colors. workaround render white slightly -white (greyscale 254 instead 255) restores correct output. printDebug() enhanced use bg_style argument make_styles(). New argument invert switch foreground background colors. Fixed follow-issues handling empty strings. cPaste() fixed issue cPaste(NULL) cPaste(list(NULL)) previously caused error, now returns \"\" consistent output cPaste(list(NULL, letters[1:2])) NULL entries produce \"\". fixYellow() new argument fixup passed hcl2col() fixes gamut colors scale within viewable range. writeOpenxlsx() properly saving rownames argument keepRownames=TRUE, issue resolved.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-37-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.37.900","text":"Fixed typo make_styles() default Lrange getOption(\"jam.Crange\") instead getOption(\"jam.Lrange\"). affect limited debugging output printed dark background. asSize() updated handle object_size 2.1e9 (2 Gigabytes), previously converted integer handle values large, now converts numeric.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-37-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.37.900","text":"log2signed() performs log2 transformation magnitude numeric values, preserving directionality. effectively performs log1p(abs(x))*sign(x) except default uses log base 2. exp2signed() reciprocal log2signed(), exponentiates magnitude numeric values, preserving directionality.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-0-0-37-900","dir":"Changelog","previous_headings":"","what":"changes","title":"jamba version 0.0.37.900","text":"Cleaned unnecessary verbose output minorLogTicks().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fix-0-0-36-900","dir":"Changelog","previous_headings":"","what":"bug fix","title":"jamba version 0.0.36.900","text":"Fixed embarrassing type R package dependencies, “S4Vector” instead “S4Vectors”.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-35-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.35.900","text":"setTextContrastColor() default hclCutoff changed 73 60, order use dark text often “” colors. makeNames() now uses duplicated() detect duplicates prior assigning names, substantially faster long vectors entries duplicated, compared applying table(x) entire vector. large vectors mostly duplicated values, speed . Note change also affects nameVector(). sdim() now handles special case S4 object data stored one slot slotName \".Data\", example \"limma::MArrayLM-class\" uses format. length names(x) matches length slot(x, \".Data\") names applied. sclass() now properly detects S4 objects, specifically recognizes data.frame list even though secretly slotNames like S4 object, S4 object. (?) Matrix-like objects return class column consistency, even though columns identical class. function also handles special case S4 scenario one slotName \".Data\", described sdim().","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-and-changes-to-mixedorder-family-of-functions-0-0-35-900","dir":"Changelog","previous_headings":"","what":"bug fixes and changes to mixedOrder() family of functions","title":"jamba version 0.0.35.900","text":"mixedOrder() sort properly entry contained \"-\" dashes, problem fixed. Previously “-” potentially used indicate negative numbers therefore treated blank value, inadvertently becoming NA disrupting ordering. Now strings \"-\" \"---\" considered blanks. mixedOrder() now uses input string final tiebreaker, blank strings like \"--\" \"-\" also sorted c(\"-\", \"--\") output instead returning order input. mixedOrder(), several regular expressions updated cover edge cases, soon wrapped series \"testthat\" unit tests, long overdue. Also, verbose output slightly updated. Specifically: blanks properly ordered front blanksFirst=TRUE, end blanksFirst=FALSE. NA values also properly ordered front end NAlast=FALSE NAlast=TRUE respectively. NA order priority blanks, NA always completely first completely last. Infinite values, keepInfinite=TRUE ordered end, blanks, NA values, values also positioned end. Also, keepNegative=TRUE \"-Inf\" position beginning, NA blanks, values also positioned beginning. keepNegative=TRUE also enables recognition scientific notation, regular expression wrongly allowed decimal exponentials, valid (e.g. “1.23e1.2” valid.) now exponential includes non-decimal numeric values, e.g. \"-1.23e2.2\" effectively considered \"-1.23e2\" \"2\". mixedSort(), mixedSorts() mixedSortDF() affected changes mixedOrder(). mixedSorts() updated enable correct behavior sortByName=TRUE, works vectors input list named. mixedSorts() accept nested lists, used ultra-cool utils::relist() function, except function allow re-ordering vector names within nested list. new function relist_named() added jamba. also works sortByName=TRUE sort vector names, vectors named.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-35-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.35.900","text":"relist_named() small modification utils::relist() generic function (actually mostly just utils:::relist.default()). function splits vector list matching structure skeleton list, except names vector output list match input vector x names vectors skeleton list.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-34-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.34.900","text":"cPaste() now properly handles list factor non-factor types, previously base::unlist() coerced mixed list character changed factor values integers non-factor elements present. Now keepFactors=TRUE preserve factor levels sorting doSort=TRUE.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-33-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.33.900","text":"gsubOrdered() applies base::gsub() character factor input, returns factor output, retaining order levels based upon input.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-32-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.32.900","text":"jargs() changed default sortVars=FALSE prints function arguments order defined.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-32-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.32.900","text":"mergeAllXY() merges multiple data.frames, keeping rows columns. unnestList() flattens nested list--lists simple, flat list.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-31-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.31.900","text":"makeColorDarker() fixed issue repeated colors darkFactors, processed using unique combination color,darkFactor,sFactor improve efficiency large vectors, properly handling unique vectors.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-0-0-30-900","dir":"Changelog","previous_headings":"","what":"changes","title":"jamba version 0.0.30.900","text":"revised help text uniques() col2hcl() uses colorspace::sRGB() instead colorspace::RGB() match convention colorspace::hex2RGB() actually uses sRGB RGB function name (common sense realm name function) implies. col2hcl() hcl2col() allow selecting polarLUV polarLAB color models, use HCL values generate colors. col2hcl() longer forces output vector names, however retains names provided input. hcl2col() use polarLUV polarLAB input without converting intermediate color space, makes output slightly less lossy converting sRGB.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-30-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.30.900","text":"ucfirst() simple function uppercase first letter word phrase. mixedSorts() sort list vectors using mixedSort() alphanumeric sort, fairly efficiently ! sorts unlisted data splits back list. drawLabels() coordPresets() moved jamma package. drawLabels() can used add text labels plot, convenient coordinate presets handled coordPresets() include things like “topleft”, “center”, “right”. automatically adjusts text position stay inside plot border cases.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-29-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.29.900","text":"writeOpenxlsx() wrapper openxlsx package, intended encapsulate large number default options certain “known” column data types, like P-values, log2 fold changes, integer values. applyXlsxCategoricalFormat() applyXlsxConditionalFormat() apply colors existing Excel xlsx file worksheet. functions called writeOpenxlsx() can also called manually customize existing Excel file.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-0-0-29-900","dir":"Changelog","previous_headings":"","what":"changes","title":"jamba version 0.0.29.900","text":"Added “openxlsx” Suggests.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-28-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.28.900","text":"asSize() updated handle empty units, useful numeric values especially kiloSize=1000. Numbers also trimmed format() independently number digits propagated values.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-27-900","dir":"Changelog","previous_headings":"","what":"enhancements","title":"jamba version 0.0.27.900","text":"setTextContrastColor() updated handle alpha transparency, semi-transparent colors blended background color, compared threshold.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-26-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.26.900","text":"formatInt() quick wrapper function format numeric values integers, default rounding decimal values using big.mark=“,”, can overridden needed. list2df() convert list vectors tall data.frame.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-25-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.25.900","text":"warpAroundZero() properly handlingbaseline`, method now uses straightforward approach.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-25-900","dir":"Changelog","previous_headings":"","what":"enhancements","title":"jamba version 0.0.25.900","text":"site pkgdown documentation updated include function one (sometimes multiple) categories, help finding potentially useful functions. README.Rmd file stripped examples, bit date compared function docs, intended vignette. write , realize “removed visual examples” rarely positive step.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-24-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.24.900","text":"pasteByRowOrdered() extension pasteByRow() creates ordered factor, individual column order maintained, either using existing factor level ordering, via mixedSort() per column.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-23-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.23.900","text":"unalpha() simply removes alpha transparency R hex color, required plotly functions example. isTRUEV() isFALSEV() vectorized forms isTRUE() isFALSE(). take vector input, entire vector must logical order entry considered.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-23-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.23.900","text":"rgb2col() enhanced alpha argument conveys whether return alpha transparency output string. seemed convenient place control alpha since conversion color names hex requires converting RGB intermediate, back hex color.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"changes-to-existing-functions-0-0-22-900","dir":"Changelog","previous_headings":"","what":"changes to existing functions","title":"jamba version 0.0.22.900","text":"minorLogTicks() minorLogTicksAxis() argument renamed offset instead labelValueOffset. Better change now wider use. Also, defaults changed logBase=2 displayBase=10 based upon current frequent usage. Best set values explicitly. Ideally, R graphical parameters define log base instead TRUE/FALSE par(\"xlog\") par(\"ylog\"). normScale() modified low high range values properly honored even supplying single value x. Now behavior checks low equal high determine whether use low high values. adjustment helps applyCLranges() restrict colors allowed ranges without -correcting single colors midpoint range.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-22-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.22.900","text":"Added function sqrtAxis() computes axis tick mark positions data square root transformed, using transformation sqrt(abs(x))*sign(x) order maintain positive negative values. function called plotPolygonDensity() using xScale=\"sqrt\".","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixed-0-0-22-900","dir":"Changelog","previous_headings":"","what":"bug fixed","title":"jamba version 0.0.22.900","text":"Cleaned issue getColorRamp() RColorBrewer colors, previously retrieve colors using number higher actual number supplied RColorBrewer::brewer.pal(), issues warning (hidden.) code now checks proper maximum number, expands larger number using colorRampPalette() needed.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-21-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.21.900","text":"Updated cPaste() handle lists single NA value, failed previously single NA considered class “logical” “character” required S4Vectors::unstrsplit(). Changed Crange Lrange values used make_styles(), new default overwrite global Crange Lrange settings. Changed Crange Lrange values enforced applyCLranges(). new argument CLmethod controls C L values adjusted.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-20-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.20.900","text":"fillBlanks() used fill vector missing values, fills missing values recent non-blank value. useful importing Excel data headings might present first cell block cells, followed blanks. newestFile() takes vector files, returns recently modified, using file.info().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-19-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.19.900","text":"grepls() useful utility search active environment object name. example grepls(\"statshits\") find everything named “statshits”, grepls(\"farris\") find everything “farris” name”, even within packages, attached environments search space. warpRamp() takes vector colors color gradient, warps gradient. divergent colors, adjustmet symmetric around middle color; otherwise adjustment relative first color. Helpful adjusting colors scales heatmaps.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-18-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.18.900","text":"imageDefault(), plotSmoothScatter(), smoothScatterJam() updated allow values lower 200 nbin previously caused problems fixRasterRatio=TRUE oldstyle=TRUE. rmNA() default returns NULL given NULL input, unless nullValue defined. change fixed several warnings, resolved inconsistencies setCLranges() handling NULL parameters properly, consequently affecting make_styles() ability restrict color chroma (C) luminance (L) ranges, seen printDebug() use scaled colors. Fixed bug hcl2col() detection RGB values 255, sometimes happens colorspace::polarLUV() conversion HCL RGB.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-18-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.18.900","text":"rlengths() returns recursive lengths list elements, intended list may multiple nested lists. returns top level counts per list element default, doSum=FALSE returns full structure length non-list element.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-17-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.17.900","text":"minorLogTicksAxis() minorLogTicks() provide log-transformed axis labels, added benefit handling log(1+x) transformations properly; log2FoldChange data symmetry around zero. renameColumn() basic function allows re-running function without error. normScale() scales numeric vector fixed range, default 0 1. one value given, parameter singletMethod defines whether use minimum, maximum, mean range. rowGroupMeans() rowRmMadOutliers() used compute per-row mean values, grouped columns. Optional outlier detection performed using MAD factor cutoff, example 5xMAD threshold means points 5 times MAD group considered outliers. plotPolygonDensity() wrapper around hist() plot(density(x)), added features like scaling x-axis log10 sqrt; multi-panel output input multi-column matrix. warpAroundZero() takes numeric vector, warps values log curvature, symmetric around zero. intent create non-linear breaks used heatmaps divergent color ramps.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixed-0-0-17-900","dir":"Changelog","previous_headings":"","what":"bug fixed","title":"jamba version 0.0.17.900","text":"ssdim() updated try handle non-list object types, example “bga” class returned made4::bga().","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-16-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.16.900","text":"Fixed small issue R docs properly wrap %>% inside \\code{\\%>\\%} blocks, allows percent sign escaped ignored. Fixed numerous incorrectly formatted \\code{\\link{}} sections properly specify package name. issue apparently causes errors package install systems using HTML preferred help format.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-15-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.15.900","text":"smoothScatterJam() imageDefault() updated fix edge cases image rendered expected integer axis units, raster ratio duplicated columns rows, making units imprecise. setPrompt() default projectName=NULL instead trying pull projectName .GlobalEnv environment, cause error defined. Instead, NULL checks projectName exists, value used.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"bug-fixes-0-0-14-900","dir":"Changelog","previous_headings":"","what":"bug fixes","title":"jamba version 0.0.14.900","text":"Fixed issue sdim() properly traverse non-vector non-list object may contain elements length dimension.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-13-900","dir":"Changelog","previous_headings":"","what":"enhancements","title":"jamba version 0.0.13.900","text":"setCLranges() adjusted use global options available, default update global options defined. mechanism allows one set specific Crange Lrange values, re-used functions affected values. ssdim() now handles S4 objects iterating slotName calling sdim(). sdim() now properly handles detection S4 classes.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-13-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.13.900","text":"fixYellowHue() takes matrix HCL colors (col2hcl()) adjusts colors hue 80 90 appear less green. change visual preference default yellow appears green darkened, simply makes color appear less green. fixYellowColor() takes vector colors wrapper fixYellowHue().","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"jamba-version-0012900","dir":"Changelog","previous_headings":"","what":"jamba version 0.0.12.900","title":"jamba version 0.0.12.900","text":"main change version reduce required R version 3.0.0.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-11-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.11.900","text":"cPaste() efficient method pasting list vectors using delimiter, create character vector. uses mixedOrder() sort entries, optionally applies uniqueness vectors. uniques() takes list makes vector list unique, using efficient mechanism applies uniqueness overall set values .","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"suggests-s4vectors-0-0-11-900","dir":"Changelog","previous_headings":"","what":"Suggests S4Vectors","title":"jamba version 0.0.11.900","text":"Bioconductor package S4Vectors implements efficient unstrsplit() used cPaste(). However, S4Vectors therefore requires installing Bioconductor base packages, might heavy installation requirement just improved efficiency step. future one function may reproduced (permission author Dr. Pages) reduce dependency burden.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-9-900","dir":"Changelog","previous_headings":"","what":"enhancements","title":"jamba version 0.0.9.900","text":"jargs() better job handling functions nested lists, closes open [ corresponding ]. jargs() properly honors useColor=FALSE disable colorized text, adds colNULL assign color NULL values, default grey. printDebug(), make_styles() apply CL range, chroma (C) luminance (L) values, defined part lightMode corresponding function checkLightMode(), helper function setCLranges() sets sensible default values light dark backgrounds. printDebug() two optional parameters Crange Lrange define chroma (C) range luminance (L) range. lighter background, maximum luminance 80 seems reasonable; darker background colors, minimum luminance 75 effective. awkwardness yellow darkens greenish hue, aesthetically pleasing, even noticed , “fix” issue adjusting yellows gold darkening, enabled default argument fixYellow=TRUE. make_styles() calls applyCLrange() fixes chroma (C) luminance (L) values, hopefully sensible default values.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-9-900","dir":"Changelog","previous_headings":"","what":"New functions","title":"jamba version 0.0.9.900","text":"applyCLrange() takes vector colors, fixes chroma (C) luminance (L) values range. Cgrey zero, colors chroma (C) value threshold kept unchanged, order prevent purely grey (unsaturated) color becoming colorized. setCLranges() query checkLightMode() return Crange Lrange default values. hcl2col() simply converts output col2hcl() back vector R hex colors. lossy, meaning faithfully convert R colors HCL matrix, back R original hex colors. Alpha transparency also maintained. Note hcl2col() performs differently grDevices::hcl() produce colors colorspace::polarLUV(H, C, L) using values H, C, L. reasons unclear, however functions jamba internally consistent, using colorspace functions.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"enhancements-0-0-6-900","dir":"Changelog","previous_headings":"","what":"enhancements","title":"jamba version 0.0.6.900","text":"jam.adjustRgb - numeric, sets parameter “adjustRgb” printDebug(). jam.lightMode - boolean, sets lightMode, see . printDebug() new boolean parameter “lightMode”, TRUE background color light (e.g. white light-grey.) case, applies ceiling brightness text colors ensure none bright visible. mixedSortDF() now accepts character values byCols, optional prefix “-” indicate decreasing sort. Alternatively, parameter decreasing still used reverse sort, converted vector byCols multiple values. Note prefix “-” decreasing multiplied combine . smoothScatterJam() tests postPlotHook function, case runs postPlotHook(...) otherwise simply evaluates postPlotHook; nullPlot(), usrBox(), imageDefault() new boolen parameter “add” indicating whether create new plot add existing plot device. rbindList() new boolean parameter keepNA indicating whether keep NA values results, ultimately causes NA converted “NA”. makeNames() new boolean parameter keepNA indicating whether keep NA values results. keepNA TRUE, NA converted “NA”, otherwise NA entries treated “” prior creating names. rmNA() changed default value parameter rmNAnames FALSE, anticipated behavior. input vector shortened non-NA values NA name. Changing function parameter defaults extremely rare occurrence future. make_styles() vectorized wrapper crayon::make_style(), gains finer control color chroma luminance. jargs() gets larger refactoring, aimed better display list parameters, lists lists nested variations. now better job displaying list vector names appropriately. new function handleArgsText() split separate function, rare non-exported function since currently useful jargs(). TODO.md created keep track future enhancements fixes.","code":""},{"path":"https://jmw86069.github.io/jamba/news/index.html","id":"new-functions-0-0-6-900","dir":"Changelog","previous_headings":"","what":"new functions","title":"jamba version 0.0.6.900","text":"applyLceiling() intended restrict colors maximum luminance HCL color space, mainly support new lightMode option intended using printDebug() light background. checkLightMode() intends support new lightMode option best check situations enable lightMode. first checks options(“lightMode”). checks environment variables suggest Rstudio running, case defaults lightMode=TRUE, since default Rstudio light background. sclass() returns class list element. sdim() returns dimensions (lengths) list element. ssdim() special case returns dimensions list list objects. cases, input object S4 object, operates slotNames(x). Thus, calling ssdim(x) helpful S4 objects, since returns class dimensions object inside S4 object.","code":""}]
