% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba-heatmap-order.R
\name{heatmap_column_order}
\alias{heatmap_column_order}
\title{Return Heatmap column order from ComplexHeatmap heatmap object}
\usage{
heatmap_column_order(hm)
}
\arguments{
\item{hm}{\code{Heatmap} or \code{HeatmapList} object as defined by the
Bioconductor package via \code{ComplexHeatmap::Heatmap()}.}
}
\value{
output depends upon the heatmap:
\itemize{
\item When heatmap columns are grouped using \code{column_split}, and
when the data matrix contains colnames,
returns a \code{character} vector of colnames in the order they
appear in the heatmap. When there are no colnames, \code{integer}
column index values are returned. If the heatmap has column labels,
they are returned as vector names.
\item When columns are grouped using \code{column_split}, it returns a
\code{list} of vectors as described above. The \code{list}
is named using the \code{column_title} labels only when there is
an equal number of column labels.
}
}
\description{
Return Heatmap column order from ComplexHeatmap heatmap object
}
\details{
This function is a helpful utility to return the fully
qualified list of colnames in a \code{ComplexHeatmap::Heatmap}
object.

The core intention is for the output to be usable with the
original data matrix used in the heatmap. Therefore, the
vector values are \code{colnames()} when present, or \code{integer}
column index values when there are no \code{colnames()}. If heatmap
\code{column_labels} are defined, they are returned as \code{names()}.

Note that \code{names()} are assigned inside \code{try()} to allow the
case where \code{column_labels}, or \code{column_title} labels cannot be
coerced to \code{character} values, for example using \code{gridtext}
for markdown formatting.
}
\examples{
if (check_pkg_installed("ComplexHeatmap")) {
   set.seed(123);

   mat <- matrix(rnorm(18 * 24),
      ncol=24);
   rownames(mat) <- paste0("row", seq_len(18))
   colnames(mat) <- paste0("column", seq_len(24))

   # obtaining row order first causes a warning message
   hm1 <- ComplexHeatmap::Heatmap(mat);
   heatmap_row_order(hm1)
   ComplexHeatmap::draw(hm1);

   # best practice is to draw() and store output in an object
   # to ensure the row orders are absolutely fixed
   hm2 <- ComplexHeatmap::Heatmap(mat, show_row_names=FALSE);
   hm2d <- ComplexHeatmap::draw(hm2);
   heatmap_row_order(hm2d)
   heatmap_column_order(hm2d)

}

}
\seealso{
Other jam heatmap functions: 
\code{\link{cell_fun_label}()},
\code{\link{heatmap_row_order}()}
}
\concept{jam heatmap functions}
