% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba.r
\name{setPrompt}
\alias{setPrompt}
\title{set R prompt with project name and R version}
\usage{
setPrompt(
  projectName = NULL,
  useColor = TRUE,
  projectColor = "yellow",
  bracketColor = "white",
  Rcolors = c("white", "white", "white"),
  PIDcolor = NA,
  promptColor = "white",
  usePid = TRUE,
  resetPrompt = FALSE,
  addEscape = NULL,
  debug = FALSE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{projectName}{\code{character} string representing the active project.}

\item{useColor}{\code{logical} whether to define a color prompt if the
\code{crayon} package is installed.}

\item{projectColor, bracketColor, Rcolors, PIDcolor, promptColor}{\code{character}
colors used when \code{useColor==TRUE} and the \code{crayon} package
is installed:
\itemize{
\item \code{projectColor} colors the project name;
\item \code{bracketColor} colors the curly brackets around the project;
\item \code{Rcolors} can be a vector of 3 colors, colorizing "R",
the "-" divider, and the R version;
\item \code{PIDcolor} colors the PID when \code{usePid=TRUE}; and
\item \code{promptColor} colors the \code{">"} at the end of the prompt.
}}

\item{usePid}{\code{logical} whether to include the process ID in the prompt.
Including the PID is helpful for the rare occasion when a process is
hung and needs to be stopped directly.}

\item{resetPrompt}{\code{logical} whether to revert all changes to the prompt
back to the default R prompt, that is, no color and no projectName.}

\item{addEscape}{\code{logical} or \code{NULL} indicating whether to wrap color
encoding ANSI inside additional escape sequences. This change is
helpful for linux-based (readline-based) R consoles, by telling
the console not to count ANSI color control characters as visible
characters when determining word wrapping on the console. Note
that RStudio does not work well with this setting.
If you find that the word-wrap is incorrect in the R console, try
\code{addEscape=TRUE}. Apparently most versions of RStudio will already
adjust (and prevent) colorizing the prompt during editing, presumably
to sidestep the problem of calculating the correct character length.
By default when \code{addEscape} is \code{NULL}, it checks whether environmental
variable \code{RSTUDIO} equals \code{"1"} (running inside RStudio) then sets
\code{addEscape=FALSE}; otherwise it defines \code{addEscape=TRUE}.
In most cases for commandline prompts, \code{addEscape=TRUE} is helpful
and not problematic.}

\item{debug}{\code{logical} indicating whether to print the ANSI control
character output for the full prompt, for visual review.}

\item{verbose}{\code{logical} whether to print verbose output.}

\item{...}{additional parameters are passed to \code{make_styles()} which is
only relevant with the argument \code{useColor=TRUE}.}
}
\value{
\code{character} string representing the prompt used, returned
invisibly.
}
\description{
set R prompt with project name and R version
}
\details{
This function sets the R prompt including project name, the R
version, and the process ID. It is intended to be useful by
reinforcing the active project for an R session, particularly when
there may be multiple R sessions active. The R version can be useful
when running R on different machines, to reinforce which version of
R is active on the given machine. The process ID is mainly helpful in
the event an R process spins out of control, and it would be useful
to know definitively which exact process ID is stuck, so that it can
be killed without affecting other R sessions inadvertently.

The prompt is defined in \code{options("prompt")}.

Note that in some cases, the color encoding of the prompt interferes
with word wrapping, the symptom is that when typing text into the R console
a long line will begin to word wrap prematurely, before the text reaches
the edge of the screen. There are two frequent causes of this issue:

\describe{
\item{options("width")}{is sometimes defined too narrow for the
screen, which can happen when resizing the console, or when
accessing an R session via GNU screen, or tmux, and the environment
variable has not been propagated to the terminal window. Usually
this issue is resolved by defining \code{options("width")} manually,
or by simply resizing the terminal window, which may trigger the
appropriate environment variable updates.}
\item{The locale}{can sometimes be mismatched with the terminal window,
usually caused by some terminal emulation layer which is not
properly detecting the compatibility of the server. It may happen
for example, when using PuTTY on Windows, or when using GNU screen or
tmux on linux or Mac OSX. To troubleshoot, check
\code{Sys.env("LC_ALL")} which may be \code{"C"} or another locale such as
\code{"en_US.UTF-8"}. Note that switching locale may have the effect of
correcting the word wrap, but may adversely affect display of
non-standard unicode characters.}
}

In any event, R uses readline for unix-like systems by default, and
issues related to using color prompt are handled at that level. For example,
in some Mac OSX consoles, there are alternate color escape sequences which
are used to tell readline to ignore an escape sequence when it counts the
number of characters being displayed by the prompt.
}
\examples{
\dontrun{
setPrompt("jamba", projectColor="purple");
setPrompt("jamba", usePid=FALSE);
}

}
\seealso{
Other jam practical functions: 
\code{\link{breakDensity}()},
\code{\link{call_fn_ellipsis}()},
\code{\link{checkLightMode}()},
\code{\link{check_pkg_installed}()},
\code{\link{colNum2excelName}()},
\code{\link{color_dither}()},
\code{\link{exp2signed}()},
\code{\link{getAxisLabel}()},
\code{\link{handleArgsText}()},
\code{\link{isFALSEV}()},
\code{\link{isTRUEV}()},
\code{\link{jargs}()},
\code{\link{kable_coloring}()},
\code{\link{lldf}()},
\code{\link{log2signed}()},
\code{\link{match_unique}()},
\code{\link{middle}()},
\code{\link{minorLogTicks}()},
\code{\link{newestFile}()},
\code{\link{printDebug}()},
\code{\link{reload_rmarkdown_cache}()},
\code{\link{renameColumn}()},
\code{\link{rmInfinite}()},
\code{\link{rmNA}()},
\code{\link{rmNAs}()},
\code{\link{rmNULL}()}
}
\concept{jam practical functions}
