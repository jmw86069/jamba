% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba-colors.r
\name{getColorRamp}
\alias{getColorRamp}
\title{get color ramp by name, color, or function}
\usage{
getColorRamp(col, n = 15, trimRamp = 0, gradientN = 15,
  defaultBaseColor = "grey95", reverseRamp = FALSE, alpha = TRUE,
  verbose = FALSE, ...)
}
\arguments{
\item{col}{accepts
\itemize{
\item{"character vector"}{one or more colors used to define a color
gradient. Where one color is supplied, a gradient is created from
defaultBaseColor to the supplied color.}
\item{"character vector length 1"}{one name matching a known color ramp either
from \code{RColorBrewer::brewer.pal.info}, or from the
\code{viridis::viridis} package.}
}}

\item{n}{integer number of output colors to return, or NULL if
the output should be a color function in the form \code{function(n)}
which returns \code{n} colors.}

\item{trimRamp}{integer vector, expanded to length=2 as needed,
which defines the number of colors to trim from the beginning
and end of the color vector, respectively. Note that if the
two values are not identical, symmetric divergent color scales
will no longer have a proper middle color. Therefore, this parameter
is mostly useful with linear gradients, to trim off the brightest
and/or darkest colors.}

\item{gradientN}{integer number of colors to expand gradient colors
prior to trimming colors.}

\item{defaultBaseColor}{character vector indicating a color from which to
begin a color gradient, only used when col is a single color.}

\item{reverseRamp}{logical indicating whether to reverse the resulting
color ramp. This value is ignored when a single value is supplied for
col, and where "_r" or "_rev" is detected as a substring at the end
of the character value.}

\item{alpha}{logical indicating whether to honor alpha transparency
whenever \code{colorRampPalette} is called. If colors contain
no alpha transparency, this setting has no effect, otherwise the
alpha value appears to be applied using a linear gradient between
colors.}

\item{verbose}{logical whether to print verbose output}
}
\description{
get color ramp by name, color, or function
}
\details{
This function accepts a color ramp name, a single color,
a vector of colors, or a function names, and returns a simple
vector of colors of the appropriate length, suitable as input
to a number of plotting functions.

For example, it recognizes \code{\link[RColorBrewer]{RColorBrewer}} color ramp
names, but can reverse those color ramps with a suffix "_r" at the
end, e.g. "RdBu_r" will supply a color ramp from blue to red, suitable
for heatmaps where red is typically associated with heat and high
numeric values.

If \code{n} is zero, and a color gradient is recognized from \code{RColorBrewer} or
\code{viridis} for example, the colors are expanded to \code{gradientN} colors,
then wrapped by \code{grDevices::colorRampPalette}.

Note that when \code{reverseRamp} is TRUE, colors are reversed
before \code{trimRamp} is used to trim colors from the beginning and end.

The parameter \code{trimRamp} is used to trim colors from the beginning
and end, respectively. However, when specifying a color gradient, like
any \code{viridis} package color ramps, or \code{RColorBrewer} package divergent
or sequential color palettes, a color vector is created with length
\code{gradientN}. The \code{trimRamp} colors are trimmed from this vector, then
the remaining color vector is fed to \code{grDevices::colorRampPalette()}.
This mechanism allows trimming the brightest and darkest colors from
the color ramp, as needed.

By default, alpha transparency will be maintained if supplied in the
input color vector. Most color ramps have no transparency, in which
case transparency can be added after the fact using \code{alpha2col()}.
}
\examples{
# get a gradient using red4
red4 <- getColorRamp("red4");
showColors(getColorRamp(red4));

# make a custom gradient
BuOr <- getColorRamp(c("dodgerblue","grey10","orange"));
showColors(BuOr);
colorList <- list(red4=red4, BuOr=BuOr);

# If RColorBrewer is available, use a brewer name
if (suppressPackageStartupMessages(require(RColorBrewer))) {
   RdBu <- getColorRamp("RdBu");
   RdBu_r <- getColorRamp("RdBu_r");
   colorList <- c(colorList, list(RdBu=RdBu, RdBu_r=RdBu_r));
   showColors(RdBu);
}

if (suppressPackageStartupMessages(require(viridis))) {
   viridisV <- getColorRamp("viridis");
   colorList <- c(colorList, list(viridis=viridisV));
}

# for fun, put a few color ramps onto one plot
showColors(colorList, cexCellnote=0.7);

}
\seealso{
Other jam color functions: \code{\link{alpha2col}},
  \code{\link{col2alpha}}, \code{\link{col2hcl}},
  \code{\link{col2hsv}}, \code{\link{color2gradient}},
  \code{\link{hcl2col}}, \code{\link{hsv2col}},
  \code{\link{isColor}}, \code{\link{kable_coloring}},
  \code{\link{makeColorDarker}}, \code{\link{rgb2col}},
  \code{\link{setTextContrastColor}}
}
\concept{jam color functions}
