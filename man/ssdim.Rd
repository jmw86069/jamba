% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba.r
\name{ssdim}
\alias{ssdim}
\title{print dimensions of nested list objects}
\usage{
ssdim(
  x,
  includeClass = TRUE,
  doFormat = FALSE,
  big.mark = ",",
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{one of several recognized object classes: an S3
object inheriting from class \code{"list"}, including a nested list of
lists or simple list;
an \code{S4} object in which case it used \code{slotNames(x)}
to traverse the object structure;
an \code{"environment"} object, in which case \code{ls(envir=x)} is
used to traverse the object structure. When the object is
\code{S4} that inherits \code{"List"} from the \code{S4Vectors} package,
it will attempt to use the proper subset functions from
\code{S4Vectors} via \code{names(x)}, but that process only works
properly if the \code{S4Vectors} package is previously loaded,
otherwise it reverts to using \code{slotNames(x)}.}

\item{includeClass}{boolean passed to \code{sdim()},
indicating whether to print the class of
each element in the input \code{x} object. Note that for S4 objects,
each element will be the object returned for each of \code{slotNames(x)}.}

\item{doFormat}{boolean passed to \code{sdim()},
indicating whether to format the dimensions using
\code{format(...,big.mark=",")}, which is mainly useful for extremely
large dimensions. This parameter should probably become more broadly
useful and respectful for different locales.}

\item{big.mark}{character passed to \code{sdim()},
value used when \code{doFormat=TRUE}, used in the
call to \code{format(...,big.mark)}.}

\item{verbose}{logical whether to print verbose output}

\item{...}{additional parameters are ignored.}
}
\value{
\code{list} of \code{data.frame}, each row indicates the dimensions of
each element in the input list. When \code{includeClass} is \code{TRUE} it
will include a column \code{class} which indicates the class of each
list element. When the input list contains arrays with more than
two dimensions, the first two dimensions are named \code{"rows"} and
\code{"columns"} with additional dimensions named \code{"dim3"} and so on.
Any list element with fewer than that many dimensions will only have
values populated to the relevant dimensions, for example a character
vector will only populate the length.
}
\description{
print dimensions of list nested objects, such as a list of lists
}
\details{
This function iteratively calls \code{sdim(x)} on each list element,
which can be helpful for some more complicated object formats. In future,
the intent is to recurse through a nested list structure, but currently
this process only recurses two steps. Attempts to recurse deeper sometimes
results in printing much more detail than originally intended.
}
\examples{
## Simple list
L <- list(LETTERS=LETTERS,
   letters=letters,
   lettersDF=data.frame(LETTERS, letters));
sdim(L);

## list of lists
L2 <- list(List1=L,
   List2=rev(L));
## first level of detail
sdim(L2);
## second level of detail
ssdim(L2);

## Perform the same steps using an environment
E1 <- new.env();
assign("L", envir=E1, value=L);
sdim(E1);
ssdim(E1);

assign("L2", envir=E1, value=L2);
ssdim(E1);

rm(E1);

}
\seealso{
Other jam practical functions: 
\code{\link{applyCLrange}()},
\code{\link{breakDensity}()},
\code{\link{checkLightMode}()},
\code{\link{check_pkg_installed}()},
\code{\link{colNum2excelName}()},
\code{\link{diff_functions}()},
\code{\link{exp2signed}()},
\code{\link{fileInfo}()},
\code{\link{fixYellowHue}()},
\code{\link{fixYellow}()},
\code{\link{getAxisLabel}()},
\code{\link{handleArgsText}()},
\code{\link{heads}()},
\code{\link{isFALSEV}()},
\code{\link{isTRUEV}()},
\code{\link{jamba}},
\code{\link{jargs}()},
\code{\link{kable_coloring}()},
\code{\link{lldf}()},
\code{\link{log2signed}()},
\code{\link{make_html_styles}()},
\code{\link{make_styles}()},
\code{\link{match_unique}()},
\code{\link{mergeAllXY}()},
\code{\link{minorLogTicks}()},
\code{\link{newestFile}()},
\code{\link{printDebugI}()},
\code{\link{printDebug}()},
\code{\link{renameColumn}()},
\code{\link{rmInfinite}()},
\code{\link{rmNA}()},
\code{\link{rmNULL}()},
\code{\link{sclass}()},
\code{\link{sdima}()},
\code{\link{sdim}()},
\code{\link{setCLranges}()},
\code{\link{setPrompt}()},
\code{\link{ssdima}()}

Other jam list functions: 
\code{\link{cPasteSU}()},
\code{\link{cPasteS}()},
\code{\link{cPasteUnique}()},
\code{\link{cPasteU}()},
\code{\link{cPaste}()},
\code{\link{heads}()},
\code{\link{jam_rapply}()},
\code{\link{list2df}()},
\code{\link{mergeAllXY}()},
\code{\link{mixedSorts}()},
\code{\link{rbindList}()},
\code{\link{relist_named}()},
\code{\link{rlengths}()},
\code{\link{sclass}()},
\code{\link{sdima}()},
\code{\link{sdim}()},
\code{\link{ssdima}()},
\code{\link{uniques}()},
\code{\link{unnestList}()}
}
\concept{jam list functions}
\concept{jam practical functions}
