% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba.r
\name{pasteByRow}
\alias{pasteByRow}
\title{Paste data.frame rows into character vector}
\usage{
pasteByRow(x, sep = "_", na.rm = TRUE, condenseBlanks = TRUE,
  includeNames = FALSE, sepName = ":", blankGrep = "^[ ]*$",
  verbose = FALSE, ...)
}
\arguments{
\item{x}{data.frame, matrix, or tibble}

\item{sep}{character separator to use between columns}

\item{na.rm}{logical whether to remove NA values, or include them as "NA"}

\item{condenseBlanks}{logical whether to condense blank or empty values
without including an extra delimiter between columns.}

\item{includeNames}{logical whether to include the colname delimited
prior to the value, using sepName as the delimiter.}

\item{sepName}{character, only relevant when includeNames=TRUE, this value
becomes the delimiter.}

\item{blankGrep}{character grep string used to recognize blank entries,
by default any field containing no text, or only spaces, is considered
a blank entry.}

\item{verbose}{logical whether to print verbose output.}
}
\value{
character vector of length \code{nrow(x)}.
}
\description{
Paste data.frame rows into a character vector, optionally removing
empty fields in order to avoid delimiters being duplicated.
}
\details{
This function is intended to paste data.frame (or matrix, or tibble) values
for each row of data. It differs from using apply(x, 2, paste) in that it
handles factors without converting to integer factor level numbers. It
also by default removes blank or empty fields, preventing the delimiter
from being included multiple times, per the condenseBlanks parameter.
Lastly, it is notably faster than apply, by means of running paste() on
each column of data, making the output vectorized, and scaling rather
well for large data.frames.

The output can also include name:value pairs, which can make the output
data more self-describing in some circumstances. That said, the most basic
usefulness of this function is to create row labels.
}
\examples{
a1 <- c("red","blue")[c(1,1,2)];
b1 <- c("yellow","orange")[c(1,2,2)];
d1 <- c("purple","green")[c(1,2,2)];
df2 <- data.frame(a=a1, b=b1, d=d1);
pasteByRow(df2);

}
