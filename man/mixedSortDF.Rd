% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba-string.r
\name{mixedSortDF}
\alias{mixedSortDF}
\title{sort data.frame keeping numeric values in proper order}
\usage{
mixedSortDF(df, byCols = seq_len(ncol(df)), na.last = TRUE,
  decreasing = NULL, useRownames = TRUE, verbose = FALSE, ...)
}
\arguments{
\item{df}{data.frame input}

\item{byCols}{integer vector referring to the order of columns to be
used by \code{\link{mmixedOrder}} to order the data.frame. Note that
negative values will reverse the sort order for the corresponding
column number.
byCols can also be a character vector of values in colnames(df),
optionally including prefix "-" to reverse the sort. Note that the
parameter \code{decreasing} can also be used to specify columns
to have reverse sort.}

\item{na.last}{logical whether NA values should be ranked last}

\item{decreasing}{NULL or a logical vector indicating which columns
in \code{byCols} should be sorted in decreasing order. By default, the
sign(byCols) is used to define the sort order of each column, but it
can be explicitly overridden with this \code{decreasing} parameter.}

\item{useRownames}{logical whether to use \code{rownames(df)} as a last
tiebreaker in the overall rank ordering. This parameter has the primary
effect of assuring a reproducible result, provided the rownames are
consistently defined, or if rownames are actually row numbers.}

\item{verbose}{logical whether to print verbose output}

\item{...}{additional arguments passed to \code{mmixedOrder(...)}}
}
\value{
data.frame whose rows are ordered using \code{\link{mmixedOrder}}
}
\description{
sort data.frame keeping numeric values in proper order
}
\details{
This function is a wrapper around \code{\link{mmixedOrder}} so it operates
on data.frame columns in the proper order, using logic similar that used
by \code{\link[base]{order}} when operating on data.frames. The sort order logic
is fully described in \code{\link{mixedSort}} and \code{\link{mixedOrder}}.
}
\examples{
# start with a vector of miRNA names
x <- c("miR-12","miR-1","miR-122","miR-1b", "miR-1a","miR-2");
# add some arbitrary group information
g <- rep(c("Air", "Treatment", "Control"), 2);
# create a data.frame
df <- data.frame(group=g, miRNA=x, stringsAsFactors=FALSE);

# sort the data.frame by each column
mixedSortDF(df);

# mixedSort respects factor order, so reorder the factor levels
# to demonstrate. "Control" should come first, for example.'
gf <- factor(g, levels=c("Control","Air", "Treatment"));
df2 <- data.frame(groupfactor=gf, miRNA=x, stringsAsFactors=FALSE);

# now the sort properly keeps the group factor levels in order,
# which also sorting the miRNA names in their proper order.
mixedSortDF(df2);

x <- data.frame(l1=letters[1:10],
   l2=rep(letters[1:2+10], 5),
   L1=LETTERS[1:10],
   L2=rep(LETTERS[1:2+20], each=5));

}
\seealso{
Other jam sort functions: \code{\link{mixedOrder}},
  \code{\link{mixedSorts}}, \code{\link{mixedSort}},
  \code{\link{mmixedOrder}}

Other jam string functions: \code{\link{asSize}},
  \code{\link{breaksByVector}}, \code{\link{cPasteSU}},
  \code{\link{cPasteS}}, \code{\link{cPasteUnique}},
  \code{\link{cPasteU}}, \code{\link{cPaste}},
  \code{\link{fillBlanks}}, \code{\link{formatInt}},
  \code{\link{gsubOrdered}}, \code{\link{makeNames}},
  \code{\link{mixedOrder}}, \code{\link{mixedSorts}},
  \code{\link{mixedSort}}, \code{\link{mmixedOrder}},
  \code{\link{nameVectorN}}, \code{\link{nameVector}},
  \code{\link{padInteger}}, \code{\link{padString}},
  \code{\link{pasteByRowOrdered}},
  \code{\link{pasteByRow}}, \code{\link{tcount}},
  \code{\link{ucfirst}}, \code{\link{uniques}}
}
\concept{jam sort functions}
\concept{jam string functions}
