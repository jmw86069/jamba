% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba-plots.r
\name{plotSmoothScatter}
\alias{plotSmoothScatter}
\title{Smooth scatter plot with enhancements}
\usage{
plotSmoothScatter(
  x,
  y = NULL,
  bandwidthN = NULL,
  bpi = 50,
  transformation = function(x) x^0.25,
  xlim = NULL,
  ylim = NULL,
  nbin = NULL,
  binpi = 50,
  nrpoints = 0,
  colramp = c("white", "lightblue", "blue", "orange", "orangered2"),
  doTest = FALSE,
  fillBackground = TRUE,
  naAction = c("remove", "floor0", "floor1"),
  xaxt = "s",
  yaxt = "s",
  add = FALSE,
  applyRangeCeiling = TRUE,
  useRaster = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{numeric vector, or data matrix with two or  more columns.}

\item{y}{numeric vector, or if data is supplied via x as a matrix, y
is NULL.}

\item{bandwidthN}{integer number of bandwidth steps to use across the
visible plot window. Note that this bandwidth differs from default
\code{\link[graphics]{smoothScatter}} in that it uses the visible
plot window instead of the data range, so if the plot window is not
sufficiently similar to the data range, the resulting smoothed
density will not be visibly distorted. This parameter also permits
display of higher (or lower) level of detail.}

\item{transformation}{function which converts point density to a number,
typically related to square root or cube root transformation.}

\item{xlim}{optional numeric x-axis range}

\item{ylim}{optional numeric y-axis range}

\item{nbin}{integer number of bins to use when converting the kernel
density result (which uses bandwidthN above) into a usable image.
For example, nbin=256 produces notably high detail, while nbin=32
produces lower resolution which may be more suitable when plotting
multiple smaller plot panels.}

\item{nrpoints}{integer number of outlier datapoints to display,
as defined by the
hidden but very useful
\code{grDevices:::.smoothScatterCalcDensity}
function. The base \code{link[graphics]{smoothScatter}} function
plots 100 such points, perhaps to overcome the default over-smoothing
of data which results in large areas not displaying density. The
default here is zero, since the new default bandwidthN parameter
typically already indicates these points.}

\item{colramp}{one of several inputs recognized by
\code{\link{getColorRamp}}. It typically recognizes either the name of
a color ramp from RColorBrewer, the name of functions from the
\code{viridis} package, or single R colors, or
a vector of R colors.}

\item{doTest}{logical, defines whether to create a visual set of test
plots to demonstrate the utility of this function.}

\item{fillBackground}{logical, whether to fill the background with the
first colramp color, which is useful especially when that color is
not white, and most visible when the x- and y-axes are not identical
to the data range. Run doTest=TRUE with colramp="viridis" as a test.}

\item{naAction}{character value, indicating how to handle missing NA values,
typically when x is NA and y is not NA, or vice versa. valid values:
\describe{
\item{"remove"}{ignore any points where either x or y are NA}
\item{"floor0"}{change any NA values to zero 0 for either x or y}
\item{"floor1"}{change any NA values to one 1 for either x or y}
}
The latter two options are useful when the desired plot should indicate
the presence of an NA value in either x or y, while also indicating the
the corresponding non-NA value in the opposing axis. The driving use
was plotting gene fold changes from two experiments, where the two
experiments may not have measured the same genes.}

\item{xaxt}{character value compatible with par(xaxt), used to control
the x-axis range, similar to its use in plot(...) generic functions.}

\item{yaxt}{character value compatible with par(yaxt), used to control
the y-axis range, similar to its use in plot(...) generic functions.}

\item{add}{logical whether to add to an existing active R plot, or create
a new plot window.}

\item{applyRangeCeiling}{logical, indicates how to handle points outside
the visible plot range. Valid values:
\describe{
\item{TRUE}{apply floor and ceiling, which fixes
these values to the edges of the visible plot area, so they have a
visible indication without forcing the plot space to be expanded outside
what may be a more useful (zoomed) range.}
\item{FALSE}{do not apply floor
and ceiling, meaning points outside the visible range are simply not
displayed. Not applying a ceiling is desirable for example, if there
is a huge number of points at zero, and the presence of these points
adversely affects the kernel density.}
}}

\item{useRaster}{logical, indicating whether to produce plots using the
\code{\link[graphics]{rasterImage}} function, which produces a plot
raster image offline then scales this image to usable plot space,
often resulting in substantially faster plot output, with subtantially
smaller object size especially in vector output files like PDF and SVG.}
}
\description{
Produce scatter plot using point density instead of displaying
individual data points.
}
\details{
This function intends to make several potentially customizable
features of \code{\link[graphics]{smoothScatter}} plots much easier
to customize. For example bandwidthN allows defining the number of
bandwidth steps used by the kernel density function, and importantly
bases the number of steps on the visible plot window, and not the range
of data, which can differ substantially. The nbin parameter is related,
but is used to define the level of detail used in the image function,
which when plotting numerous smaller panels, can be useful to reduce
unnecessary visual details.

A related new function could be part of ggplot2, and is certainly
on the todo list. However, frankly it is quite difficult to grok where one
would obtain several of the values required by this function, notably
the visible plot space per panel. The documentation for ggplot2 developers
is not well described. That said, panelSmoothScatter could be created to
handle the main features of this function. However, it would also
need to call a custom imageDefault() function in order to handle the
custom (and hopefully beneficial) mechanism of creating a properly-scaled
raster image.
}
\examples{
# doTest=TRUE invisibly returns the test data
x <- plotSmoothScatter(doTest=TRUE);

# so it can be plotted again with different settings
plotSmoothScatter(x, colramp="viridis");

}
\seealso{
\code{\link{smoothScatterJam}},
\code{\link[graphics]{smoothScatter}}

Other jam plot functions: 
\code{\link{adjustAxisLabelMargins}()},
\code{\link{coordPresets}()},
\code{\link{decideMfrow}()},
\code{\link{drawLabels}()},
\code{\link{getPlotAspect}()},
\code{\link{groupedAxis}()},
\code{\link{imageByColors}()},
\code{\link{imageDefault}()},
\code{\link{minorLogTicksAxis}()},
\code{\link{nullPlot}()},
\code{\link{plotPolygonDensity}()},
\code{\link{shadowText}()},
\code{\link{showColors}()},
\code{\link{smoothScatterJam}()},
\code{\link{sqrtAxis}()},
\code{\link{usrBox}()}
}
\concept{jam plot functions}
