% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba-string.r
\name{mixedSort}
\alias{mixedSort}
\title{sort alphanumeric values keeping numeric values in proper order}
\usage{
mixedSort(x, blanksFirst = TRUE, NAlast = TRUE, keepNegative = FALSE,
  keepInfinite = FALSE, keepDecimal = FALSE, ignore.case = TRUE,
  sortByName = FALSE, verbose = FALSE, ...)
}
\arguments{
\item{x}{input vector}

\item{blanksFirst}{logical whether to order blank entries before entries
containing a value.}

\item{NAlast}{logical whether to move NA entries to the end of the sort.}

\item{keepNegative}{logical whether to keep '-' associated with adjacent
numeric values, in order to sort them as negative values.}

\item{keepInfinite}{logical whether to allow "Inf" to be considered
a numeric infinite value.}

\item{keepDecimal}{logical whether to keep the decimal in numbers,
sorting as a true number and not as a version number. By default
keepDecimal=FALSE, which means "v1.200" should be ordered before
"v1.30". When keepDecimal=TRUE, the numeric sort considers only
"1.2" and "1.3" and sorts in that order.}

\item{ignore.case}{logical whether to ignore uppercase and lowercase
characters when defining the sort order.}

\item{sortByName}{logical whether to sort the vector x by names(x) instead
of sorting by x itself.}

\item{verbose}{logical whether to print verbose output.}

\item{...}{additional parameters are sent to \code{\link{mixedOrder}}.}
}
\value{
vector of values from x, ordered by alphanumeric logic.
}
\description{
sort alphanumeric values keeping numeric values in proper order
}
\details{
This function is a refactor of the \code{\link[gtools]{mixedsort}}
function from the \code{gtools} package. It was extended to make it faster,
and to handle special cases slightly differently. It was driven by some
need to sort gene symbols, and miRNA symbols in numeric order, for example:
\describe{
\item{test set:}{miR-12,miR-1,miR-122,miR-1b,mir-1a}
\item{\code{gtools::mixedsort}:}{miR-122,miR-12,miR-1,miR-1a,mir-1b}
\item{\code{mixedSort}:}{miR-1,miR-1a,miR-1b,miR-12,miR-122}
}
The function does not by default recognize negative numbers as negative,
instead it treats '-' as a delimiter, unless keepNegative=TRUE.

This function also attempts to maintain '.' as part of a decimal number,
which can be problematic when sorting IP addresses, for example.

This function is really just a wrapper function for \code{\link{mixedOrder}}
which does the work of defining a proper order.
}
\examples{
x <- c("miR-12","miR-1","miR-122","miR-1b", "miR-1a", "miR-2");
sort(x);
mixedSort(x);

}
\seealso{
\code{\link{mixedSort}}, \code{\link[gtools]{mixedorder}},
\code{\link[gtools]{mixedsort}}

Other jam string functions: \code{\link{cPasteUnique}},
  \code{\link{cPaste}}, \code{\link{igrepHas}},
  \code{\link{igrep}}, \code{\link{mixedOrder}},
  \code{\link{mixedSortDF}}, \code{\link{mmixedOrder}},
  \code{\link{provigrep}}, \code{\link{unigrep}},
  \code{\link{uniques}}, \code{\link{unvigrep}},
  \code{\link{vgrep}}, \code{\link{vigrep}}
}
