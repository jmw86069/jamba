% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jamba-mixedSort.R
\name{mixedSort}
\alias{mixedSort}
\title{sort alphanumeric values keeping numeric values in proper order}
\usage{
mixedSort(
  x,
  blanksFirst = TRUE,
  na.last = NAlast,
  keepNegative = FALSE,
  keepInfinite = FALSE,
  keepDecimal = FALSE,
  ignore.case = TRUE,
  useCaseTiebreak = TRUE,
  sortByName = FALSE,
  honorFactor = FALSE,
  verbose = FALSE,
  NAlast = TRUE,
  ...
)
}
\arguments{
\item{x}{\code{vector}}

\item{blanksFirst}{\code{logical} whether to order blank entries before entries
containing a value.}

\item{na.last}{\code{logical} indicating whether to move NA entries at
the end of the sort.}

\item{keepNegative}{\code{logical} whether to keep '-' associated with adjacent
numeric values, in order to sort them as negative values.}

\item{keepInfinite}{\code{logical} whether to allow "Inf" to be considered
a numeric infinite value.}

\item{keepDecimal}{\code{logical} whether to keep the decimal in numbers,
sorting as a true number and not as a version number. By default
keepDecimal=FALSE, which means "v1.200" should be ordered before
"v1.30". When keepDecimal=TRUE, the numeric sort considers only
"1.2" and "1.3" and sorts in that order.}

\item{ignore.case}{\code{logical} whether to ignore uppercase and lowercase
characters when defining the sort order. Note that when \code{x} is
\code{factor} the factor levels are converted using
\code{unique(toupper(levels(x)))}, therefore the values in \code{x} will be
sorted by factor level.}

\item{useCaseTiebreak}{\code{logical} indicating whether to break ties
when \code{ignore.case=TRUE}, using mixed case as a tiebreaker.}

\item{sortByName}{\code{logical} whether to sort the vector x by names(x) instead
of sorting by x itself.}

\item{verbose}{\code{logical} whether to print verbose output.}

\item{NAlast}{\code{logical} deprecated in favor of argument \code{na.last}
for consistency with \code{base::sort()}.}

\item{...}{additional parameters are sent to \code{\link{mixedOrder}}.}
}
\value{
\code{vector} of values from argument \code{x}, ordered by
\code{mixedOrder()}. The output class should match \code{class(x)}.
}
\description{
sort alphanumeric values keeping numeric values in proper order
}
\details{
This function is a refactor of the \code{gtools::mixedsort}
function from the \code{gtools} package. It was extended to make it faster,
and to handle special cases slightly differently. It was driven by some
need to sort gene symbols, and miRNA symbols in numeric order, for example:
\describe{
\item{test set:}{miR-12,miR-1,miR-122,miR-1b,mir-1a}
\item{\code{gtools::mixedsort}:}{miR-122,miR-12,miR-1,miR-1a,mir-1b}
\item{\code{mixedSort}:}{miR-1,miR-1a,miR-1b,miR-12,miR-122}
}
The function does not by default recognize negative numbers as negative,
instead it treats '-' as a delimiter, unless keepNegative=TRUE.

This function also attempts to maintain '.' as part of a decimal number,
which can be problematic when sorting IP addresses, for example.

This function is really just a wrapper function for \code{\link{mixedOrder}}
which does the work of defining a proper order.
}
\examples{
x <- c("miR-12","miR-1","miR-122","miR-1b", "miR-1a", "miR-2");
sort(x);
mixedSort(x);

}
\seealso{
Other jam sort functions: 
\code{\link{mixedOrder}()},
\code{\link{mixedSortDF}()},
\code{\link{mixedSorts}()},
\code{\link{mmixedOrder}()}

Other jam string functions: 
\code{\link{asSize}()},
\code{\link{breaksByVector}()},
\code{\link{cPasteSU}()},
\code{\link{cPasteS}()},
\code{\link{cPasteUnique}()},
\code{\link{cPasteU}()},
\code{\link{cPaste}()},
\code{\link{fillBlanks}()},
\code{\link{formatInt}()},
\code{\link{gsubOrdered}()},
\code{\link{makeNames}()},
\code{\link{mixedOrder}()},
\code{\link{mixedSortDF}()},
\code{\link{mixedSorts}()},
\code{\link{mmixedOrder}()},
\code{\link{nameVectorN}()},
\code{\link{nameVector}()},
\code{\link{padInteger}()},
\code{\link{padString}()},
\code{\link{pasteByRowOrdered}()},
\code{\link{pasteByRow}()},
\code{\link{sizeAsNum}()},
\code{\link{tcount2}()},
\code{\link{tcount}()},
\code{\link{ucfirst}()},
\code{\link{uniques}()}
}
\concept{jam sort functions}
\concept{jam string functions}
